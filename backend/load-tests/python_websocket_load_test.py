"""
–ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å Home State Detection
–ë–µ–∑ JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
"""

import asyncio
import json
import time
import statistics
from datetime import datetime
from typing import List, Dict, Any

import websockets
import aiohttp
from concurrent.futures import ThreadPoolExecutor


class LoadTestResults:
    def __init__(self):
        self.connection_times: List[float] = []
        self.message_response_times: List[float] = []
        self.successful_connections = 0
        self.failed_connections = 0
        self.successful_messages = 0
        self.failed_messages = 0
        self.errors: List[str] = []


async def single_websocket_test(
    user_id: str, 
    test_duration: int = 30, 
    messages_per_second: int = 2
) -> Dict[str, Any]:
    """–¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    
    results = {
        'user_id': user_id,
        'connected': False,
        'messages_sent': 0,
        'messages_received': 0,
        'errors': [],
        'response_times': [],
        'home_state_detections': 0
    }
    
    uri = f"ws://localhost:8000/ws/{user_id}"
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –±–µ–∑ JWT –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
        async with websockets.connect(uri, timeout=10) as websocket:
            results['connected'] = True
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            start_time = time.time()
            message_interval = 1.0 / messages_per_second
            
            messages = [
                "–ü—Ä–∏–≤–µ—Ç! –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É",
                "–ß–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è, —è –≤–æ–ª–Ω—É—é—Å—å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ –Ω–∞—Ö–æ–∂—É—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                "–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –¥–æ–º–∞ –≤ —ç—Ç–æ–º —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏",
                "–ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ, —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ",
                "–°–µ–π—á–∞—Å —è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é –≤ –º–æ–º–µ–Ω—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            ]
            
            message_count = 0
            while time.time() - start_time < test_duration:
                try:
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    text = messages[message_count % len(messages)]
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = {
                        "type": "message",
                        "user_id": user_id,
                        "channel": "load_test_channel",
                        "message": {
                            "text": text,
                            "timestamp": datetime.now().isoformat()
                        }
                    }
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –∑–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è
                    send_time = time.time()
                    await websocket.send(json.dumps(message))
                    results['messages_sent'] += 1
                    
                    # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    try:
                        response = await asyncio.wait_for(
                            websocket.recv(), 
                            timeout=5.0
                        )
                        receive_time = time.time()
                        response_time = receive_time - send_time
                        results['response_times'].append(response_time)
                        results['messages_received'] += 1
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Home State Detection –≤ –æ—Ç–≤–µ—Ç–µ
                        try:
                            response_data = json.loads(response)
                            if (response_data.get('type') == 'home_state_update' or 
                                'home_state' in response):
                                results['home_state_detections'] += 1
                        except json.JSONDecodeError:
                            pass
                            
                    except asyncio.TimeoutError:
                        # –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –º–Ω–æ–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                        pass
                    
                    message_count += 1
                    await asyncio.sleep(message_interval)
                    
                except Exception as e:
                    results['errors'].append(f"Message error: {str(e)}")
                    break
                    
    except Exception as e:
        results['errors'].append(f"Connection error: {str(e)}")
    
    return results


async def http_api_load_test(concurrent_requests: int = 50) -> Dict[str, Any]:
    """–ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç HTTP API"""
    
    results = {
        'total_requests': 0,
        'successful_requests': 0,
        'failed_requests': 0,
        'response_times': [],
        'errors': []
    }
    
    async def single_request(session: aiohttp.ClientSession, user_id: str):
        try:
            start_time = time.time()
            
            # –¢–µ—Å—Ç Home State API
            async with session.post(
                f'http://localhost:8000/home-state/analyze/load_test_{user_id}',
                json={
                    'text': f'–¢–µ—Å—Ç–∏—Ä—É—é –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ß–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è, –≤–æ–ª–Ω—É—é—Å—å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö.',
                    'timestamp': time.time(),
                    'user_id': f'load_test_{user_id}',
                    'response_time': 2.5
                }
            ) as response:
                end_time = time.time()
                response_time = end_time - start_time
                
                if response.status == 200:
                    results['successful_requests'] += 1
                    results['response_times'].append(response_time)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                    data = await response.json()
                    if 'authenticity_level' not in data:
                        results['errors'].append(f"Missing authenticity_level in response")
                else:
                    results['failed_requests'] += 1
                    results['errors'].append(f"HTTP {response.status}")
                    
                results['total_requests'] += 1
                
        except Exception as e:
            results['failed_requests'] += 1
            results['errors'].append(f"Request error: {str(e)}")
            results['total_requests'] += 1
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    async with aiohttp.ClientSession() as session:
        tasks = [
            single_request(session, i) 
            for i in range(concurrent_requests)
        ]
        await asyncio.gather(*tasks, return_exceptions=True)
    
    return results


async def comprehensive_load_test():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LIMINAL")
    print("=" * 60)
    
    # 1. HTTP API –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç
    print("\nüìä 1. HTTP API Load Test (50 concurrent requests)")
    http_results = await http_api_load_test(50)
    
    print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {http_results['total_requests']}")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {http_results['successful_requests']}")
    print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {http_results['failed_requests']}")
    
    if http_results['response_times']:
        avg_time = statistics.mean(http_results['response_times'])
        p95_time = statistics.quantiles(http_results['response_times'], n=20)[18]
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_time:.3f}s")
        print(f"   95-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {p95_time:.3f}s")
    
    if http_results['errors']:
        print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∏: {len(http_results['errors'])} (–ø–µ—Ä–≤—ã–µ 3: {http_results['errors'][:3]})")
    
    # 2. WebSocket –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –±–µ–∑ JWT)
    print(f"\nüîó 2. WebSocket Load Test (10 connections, 30s each)")
    print("   –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –¢–µ—Å—Ç –±–µ–∑ JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    websocket_tasks = [
        single_websocket_test(f"load_test_user_{i}", test_duration=30, messages_per_second=1)
        for i in range(10)
    ]
    
    websocket_results = await asyncio.gather(*websocket_tasks, return_exceptions=True)
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ WebSocket
    connected_count = 0
    total_messages = 0
    total_responses = 0
    total_errors = 0
    all_response_times = []
    home_state_detections = 0
    
    for result in websocket_results:
        if isinstance(result, dict):
            if result['connected']:
                connected_count += 1
            total_messages += result['messages_sent'] 
            total_responses += result['messages_received']
            total_errors += len(result['errors'])
            all_response_times.extend(result['response_times'])
            home_state_detections += result['home_state_detections']
    
    print(f"   –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–π —É—Å–ø–µ—à–Ω—ã—Ö: {connected_count}/10")
    print(f"   –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_messages}")
    print(f"   –û—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {total_responses}")
    print(f"   Home State –¥–µ—Ç–µ–∫—Ü–∏–π: {home_state_detections}")
    
    if all_response_times:
        avg_ws_time = statistics.mean(all_response_times)
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ WebSocket: {avg_ws_time:.3f}s")
    
    if total_errors > 0:
        print(f"   ‚ö†Ô∏è  WebSocket –æ—à–∏–±–∫–∏: {total_errors}")
    
    # 3. Health check —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç  
    print(f"\nüíì 3. Health Endpoints Stress Test")
    health_start = time.time()
    
    async with aiohttp.ClientSession() as session:
        health_tasks = []
        for _ in range(100):
            health_tasks.extend([
                session.get('http://localhost:8000/health'),
                session.get('http://localhost:8000/health/live'),
                session.get('http://localhost:8000/health/ready'),
            ])
        
        health_responses = await asyncio.gather(*health_tasks, return_exceptions=True)
    
    health_time = time.time() - health_start
    health_success = sum(1 for r in health_responses if hasattr(r, 'status') and r.status in [200, 503])
    
    print(f"   300 health requests –∑–∞ {health_time:.2f}s")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {health_success}/300")
    print(f"   RPS: {300/health_time:.1f}")
    
    print("\n" + "=" * 60)
    print("‚úÖ –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    overall_score = 0
    if http_results['successful_requests'] > 40:  # 80%+ success rate
        overall_score += 3
    if connected_count >= 8:  # 80%+ WebSocket connections
        overall_score += 3  
    if health_success > 250:  # 80%+ health checks
        overall_score += 2
    if total_errors < 10:  # Low error count
        overall_score += 2
    
    print(f"\nüéØ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {overall_score}/10")
    if overall_score >= 8:
        print("üü¢ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!")
    elif overall_score >= 6:
        print("üü° –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    else:
        print("üî¥ –¢—Ä–µ–±—É—é—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")


if __name__ == "__main__":
    try:
        asyncio.run(comprehensive_load_test())
    except KeyboardInterrupt:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")