"""
üöÄüõ°Ô∏è BurnoutGuard Simple Test ‚Äî –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏

–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ BurnoutGuard:
- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞ –≤—ã–≥–æ—Ä–∞–Ω–∏—è
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
backend_path = Path(__file__).parent
sys.path.insert(0, str(backend_path))

# –ò–º–ø–æ—Ä—Ç—ã BurnoutGuard
try:
    # –ü—Ä—è–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    from burnout_guard.modes import BurnoutModeMapper, BurnoutModeType, BurnoutRiskLevel
    from burnout_guard.core import BurnoutRiskScorer
    from burnout_guard.recommendations import RecommendationEngine, RecommendationType
    from burnout_guard.utils import format_risk_score, create_alert_message
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ mock –∫–ª–∞—Å—Å—ã –¥–ª—è Emotime
    from datetime import datetime
    from dataclasses import dataclass
    from typing import List, Optional
    from enum import Enum
    
    class EmotionalModeType(Enum):
        CALM = "calm"
        FOCUS = "focus"
        STRESS = "stress"
        JOY = "joy"
        CONTEMPLATION = "contemplation"
        NEUTRAL = "neutral"
    
    @dataclass
    class EmotionalMode:
        name: str
        type: EmotionalModeType
        intensity: float
        confidence: float
        description: str
        duration: int = 1
    
    @dataclass
    class EmotionalFeatures:
        valence: float
        arousal: float
        dominance: float
        tempo: float
        intensity: float
        timestamp: datetime
        confidence: float
        sources: List[str]
    
    @dataclass
    class EmotionalPoint:
        timestamp: datetime
        valence: float
        arousal: float
        mode: EmotionalMode
        confidence: float
    
    @dataclass
    class EmotimeState:
        timestamp: datetime
        features: EmotionalFeatures
        mode: EmotionalMode
        resonance_trace: List[EmotionalPoint]
        confidence: float
    
    print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ BurnoutGuard —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)


def create_test_emotional_mode(mode_type: EmotionalModeType, intensity: float = 0.7) -> EmotionalMode:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º."""
    return EmotionalMode(
        name=mode_type.value,
        type=mode_type,
        intensity=intensity,
        confidence=0.8,
        description=f"Test {mode_type.value} mode",
        duration=1
    )


def create_test_emotional_features(valence: float = 0.0, arousal: float = 0.5) -> EmotionalFeatures:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏."""
    return EmotionalFeatures(
        valence=valence,
        arousal=arousal,
        dominance=0.5,
        tempo=0.5,
        intensity=0.7,
        timestamp=datetime.now(),
        confidence=0.8,
        sources=["test"]
    )


def create_test_emotime_state(mode_type: EmotionalModeType, valence: float = 0.0) -> EmotimeState:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Emotime."""
    features = create_test_emotional_features(valence=valence)
    mode = create_test_emotional_mode(mode_type)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π resonance trace
    resonance_trace = [
        EmotionalPoint(
            timestamp=datetime.now() - timedelta(minutes=i),
            valence=valence + (i * 0.1),
            arousal=0.5,
            mode=mode,
            confidence=0.8
        )
        for i in range(5)
    ]
    
    return EmotimeState(
        timestamp=datetime.now(),
        features=features,
        mode=mode,
        resonance_trace=resonance_trace,
        confidence=0.8
    )


async def test_burnout_mode_mapping():
    """–¢–µ—Å—Ç –º–∞–ø–ø–∏–Ω–≥–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –≤ —Ä–µ–∂–∏–º—ã –≤—ã–≥–æ—Ä–∞–Ω–∏—è."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ —Ä–µ–∂–∏–º–æ–≤ –≤—ã–≥–æ—Ä–∞–Ω–∏—è...")
    
    mapper = BurnoutModeMapper(lookback_hours=24)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    test_scenarios = [
        # –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å
        {
            "name": "–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å",
            "modes": [(create_test_emotional_mode(EmotionalModeType.STRESS, 0.9), datetime.now() - timedelta(hours=i)) for i in range(3)],
            "expected_risk": "high"
        },
        # –ó–¥–æ—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        {
            "name": "–ó–¥–æ—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
            "modes": [(create_test_emotional_mode(EmotionalModeType.CALM, 0.7), datetime.now() - timedelta(hours=i)) for i in range(3)],
            "expected_risk": "low"
        },
        # –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞
        {
            "name": "–î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å (–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞)",
            "modes": [(create_test_emotional_mode(EmotionalModeType.FOCUS, 0.8), datetime.now() - timedelta(hours=i)) for i in range(4)],
            "expected_risk": "medium"
        }
    ]
    
    for scenario in test_scenarios:
        print(f"\n  üìã –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario['name']}")
        
        burnout_mode = await mapper.analyze_burnout_risk(scenario["modes"])
        
        print(f"    –†–µ–∂–∏–º –≤—ã–≥–æ—Ä–∞–Ω–∏—è: {burnout_mode.type.value}")
        print(f"    –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {burnout_mode.risk_level.value}")
        print(f"    –°–∫–æ—Ä —Ä–∏—Å–∫–∞: {burnout_mode.risk_score:.2f}")
        print(f"    –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {', '.join(burnout_mode.primary_indicators)}")
        print(f"    –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {burnout_mode.confidence:.2f}")
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if scenario["expected_risk"] == "high" and burnout_mode.risk_score > 0.6:
            print("    ‚úÖ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        elif scenario["expected_risk"] == "low" and burnout_mode.risk_score < 0.4:
            print("    ‚úÖ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        elif scenario["expected_risk"] == "medium" and 0.4 <= burnout_mode.risk_score <= 0.6:
            print("    ‚úÖ –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        else:
            print(f"    ‚ö†Ô∏è –û–∂–∏–¥–∞–ª—Å—è {scenario['expected_risk']} —Ä–∏—Å–∫, –ø–æ–ª—É—á–µ–Ω —Å–∫–æ—Ä {burnout_mode.risk_score:.2f}")


async def test_risk_scoring():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å–∫–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–∞."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–∞...")
    
    scorer = BurnoutRiskScorer("test_user")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    test_states = [
        {
            "name": "–°–∏–ª—å–Ω—ã–π —Å—Ç—Ä–µ—Å—Å",
            "emotime_state": create_test_emotime_state(EmotionalModeType.STRESS, valence=-0.7),
            "context": {"session_duration_hours": 10}
        },
        {
            "name": "–°–ø–æ–∫–æ–π–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
            "emotime_state": create_test_emotime_state(EmotionalModeType.CALM, valence=0.3),
            "context": {"session_duration_hours": 4}
        },
        {
            "name": "–î–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å",
            "emotime_state": create_test_emotime_state(EmotionalModeType.FOCUS, valence=0.1),
            "context": {"session_duration_hours": 12}
        }
    ]
    
    for test_state in test_states:
        print(f"\n  üìã –°–æ—Å—Ç–æ—è–Ω–∏–µ: {test_state['name']}")
        
        # –°–æ–∑–¥–∞–µ–º dummy burnout mode
        from burnout_guard.modes import BurnoutMode
        dummy_mode = BurnoutMode(
            type=BurnoutModeType.HEALTHY,
            risk_level=BurnoutRiskLevel.LOW,
            risk_score=0.3,
            primary_indicators=["test"],
            emotional_pattern="test_pattern",
            duration_hours=1.0
        )
        
        risk_assessment = await scorer.calculate_risk(
            test_state["emotime_state"],
            dummy_mode,
            test_state["context"]
        )
        
        print(f"    –°–∫–æ—Ä —Ä–∏—Å–∫–∞: {risk_assessment.score:.2f}")
        print(f"    –£—Ä–æ–≤–µ–Ω—å: {risk_assessment.level.value}")
        print(f"    –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {risk_assessment.confidence:.2f}")
        print(f"    –§–∞–∫—Ç–æ—Ä—ã: {list(risk_assessment.factors.keys())}")
        print(f"    –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {', '.join(risk_assessment.emotional_indicators[:3])}")


async def test_recommendations():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
    
    engine = RecommendationEngine("test_user")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–≥–æ—Ä–∞–Ω–∏—è
    from burnout_guard.modes import BurnoutMode
    from burnout_guard.core import BurnoutRisk, BurnoutState
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    critical_risk = BurnoutRisk(
        score=0.9,
        level=BurnoutRiskLevel.CRITICAL,
        factors={"emotional": 0.9, "behavioral": 0.8, "temporal": 0.7, "ml_confidence": 0.6},
        confidence=0.8,
        timestamp=datetime.now(),
        emotional_indicators=["–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å", "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏—Å—Ç–æ—â–µ–Ω–∏–µ"],
        behavioral_patterns=["–î–ª–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞"],
        duration_risk=0.8,
        trend_risk=0.7
    )
    
    critical_mode = BurnoutMode(
        type=BurnoutModeType.EMOTIONAL_EXHAUSTION,
        risk_level=BurnoutRiskLevel.CRITICAL,
        risk_score=0.9,
        primary_indicators=["–°—Ç—Ä–µ—Å—Å", "–ò—Å—Ç–æ—â–µ–Ω–∏–µ"],
        emotional_pattern="chronic_stress",
        duration_hours=8.0,
        confidence=0.8
    )
    
    critical_state = BurnoutState(
        timestamp=datetime.now(),
        emotime_state=create_test_emotime_state(EmotionalModeType.STRESS, valence=-0.8),
        burnout_mode=critical_mode,
        risk_assessment=critical_risk,
        risk_history=[0.5, 0.6, 0.7, 0.8, 0.9],
        mode_stability=0.8,
        intervention_needed=True
    )
    
    print("\n  üìã –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    recommendations = await engine.get_recommendations(critical_state)
    
    for i, rec in enumerate(recommendations, 1):
        print(f"    {i}. {rec.title}")
        print(f"       {rec.description}")
        print(f"       –¢–∏–ø: {rec.type.value}, –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {rec.priority}, –í—Ä–µ–º—è: {rec.estimated_time} –º–∏–Ω")
    
    # –ó–¥–æ—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    healthy_risk = BurnoutRisk(
        score=0.2,
        level=BurnoutRiskLevel.LOW,
        factors={"emotional": 0.2, "behavioral": 0.1, "temporal": 0.2, "ml_confidence": 0.3},
        confidence=0.9,
        timestamp=datetime.now(),
        emotional_indicators=["–°—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"],
        behavioral_patterns=["–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"],
        duration_risk=0.1,
        trend_risk=0.0
    )
    
    healthy_mode = BurnoutMode(
        type=BurnoutModeType.HEALTHY,
        risk_level=BurnoutRiskLevel.LOW,
        risk_score=0.2,
        primary_indicators=["–ë–∞–ª–∞–Ω—Å"],
        emotional_pattern="stable",
        duration_hours=2.0,
        confidence=0.9
    )
    
    healthy_state = BurnoutState(
        timestamp=datetime.now(),
        emotime_state=create_test_emotime_state(EmotionalModeType.CALM, valence=0.4),
        burnout_mode=healthy_mode,
        risk_assessment=healthy_risk,
        risk_history=[0.3, 0.2, 0.2, 0.1, 0.2],
        mode_stability=0.9,
        intervention_needed=False
    )
    
    print("\n  üìã –ó–¥–æ—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    recommendations = await engine.get_recommendations(healthy_state)
    
    for i, rec in enumerate(recommendations, 1):
        print(f"    {i}. {rec.title}")
        print(f"       –¢–∏–ø: {rec.type.value}, –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {rec.priority}")


async def test_utils():
    """–¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç...")
    
    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∏—Å–∫–∞
    test_scores = [0.1, 0.3, 0.5, 0.7, 0.9]
    
    print("\n  üìã –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞:")
    for score in test_scores:
        formatted = format_risk_score(score)
        print(f"    –°–∫–æ—Ä {score}: {formatted}")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤
    print("\n  üìã –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤:")
    test_indicators = ["–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å", "–î–ª–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç–¥—ã—Ö–∞"]
    alert_message = create_alert_message(0.8, test_indicators)
    print(f"    –ê–ª–µ—Ä—Ç: {alert_message}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄüõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BurnoutGuard - AI –∑–∞—â–∏—Ç–∞ –æ—Ç –≤—ã–≥–æ—Ä–∞–Ω–∏—è")
    print("=" * 60)
    
    try:
        await test_burnout_mode_mapping()
        await test_risk_scoring()
        await test_recommendations()
        await test_utils()
        
        print("\n" + "=" * 60)
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã BurnoutGuard –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–æ–±–∏–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º")
        print("üí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        print("   2. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        print("   3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏")
        print("   4. –°–æ–∑–¥–∞–Ω–∏–µ HR –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())