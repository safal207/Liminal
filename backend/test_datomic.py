from datetime import datetime, timedelta

from datomic_client import DatomicClient


def test_datomic_operations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å Datomic."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã —Å Datomic...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    client = DatomicClient()

    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if not client.connect():
            print("‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é...")
            if not client.create_database():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                return

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        emotions = ["—Ä–∞–¥–æ—Å—Ç—å", "–≥—Ä—É—Å—Ç—å", "–≥–Ω–µ–≤", "—Å—Ç—Ä–∞—Ö", "—É–¥–∏–≤–ª–µ–Ω–∏–µ", "–¥–æ–≤–µ—Ä–∏–µ"]
        user_id = "test-user-1"

        print("\n‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        for i, emotion in enumerate(emotions):
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ —Å —Ä–∞–∑–Ω–∏—Ü–µ–π –≤ –¥–Ω—è—Ö
            timestamp = datetime.utcnow() - timedelta(days=len(emotions) - i)
            intensity = 0.1 + (i * 0.15)  # –†–∞–∑–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
            if intensity > 1.0:
                intensity = 1.0

            client.add_emotion_entry(
                user_id=user_id,
                emotion=emotion,
                intensity=intensity,
                timestamp=timestamp,
            )
            print(f"  - –î–æ–±–∞–≤–ª–µ–Ω–∞ —ç–º–æ—Ü–∏—è '{emotion}' —Å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é {intensity:.2f}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        print("\nüìú –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–π...")
        history = client.get_emotion_history(user_id)

        if not history:
            print("‚ùå –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
            return

        print("\nüìä –ò—Å—Ç–æ—Ä–∏—è —ç–º–æ—Ü–∏–π:")
        for entry in history:
            print(f"  - {entry['emotion']}: {entry['intensity']:.2f} ({entry['timestamp']})")

        # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Datalog
        print("\nüîç –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å...")
        query = """
        [:find ?emotion (avg ?intensity) (count ?e)
         :in $ ?user
         :where
         [?e :entry/user ?user]
         [?e :entry/emotion ?emotion]
         [?e :entry/intensity ?intensity]]
        """

        results = client.query(query, {"?user": user_id})

        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç–º–æ—Ü–∏—è–º:")
        for emotion, avg_intensity, count in results:
            print(
                f"  - {emotion}: —Å—Ä–µ–¥–Ω—è—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å {float(avg_intensity):.2f} (–≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {count})"
            )

        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")

    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        import traceback

        traceback.print_exc()
    finally:
        client.close()


if __name__ == "__main__":
    test_datomic_operations()
