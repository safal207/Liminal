import asyncio

import pytest
import websockets
from websockets.exceptions import ConnectionClosed


class TestWebSocketLimitsSimple:
    """
    –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.
    –¢–æ–ª—å–∫–æ WebSocket —Ç–µ—Å—Ç—ã, –±–µ–∑ HTTP API.
    """

    @pytest.fixture
    def websocket_url(self):
        """URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket."""
        return "ws://127.0.0.1:8000/ws/timeline"

    @pytest.mark.asyncio
    async def test_multiple_connections_basic(self, websocket_url):
        """–¢–µ—Å—Ç: –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π."""
        connections = []
        successful_connections = 0

        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å 5 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π (–¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å)
            for i in range(5):
                try:
                    websocket = await websockets.connect(websocket_url)
                    connections.append(websocket)
                    successful_connections += 1
                    print(f"‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {i+1} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                except Exception as e:
                    print(f"‚úó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {i+1} –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
                    break

            # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã 3 —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            assert (
                successful_connections >= 3
            ), f"–°–ª–∏—à–∫–æ–º –º–∞–ª–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {successful_connections}"
            print(f"‚úì –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç: {successful_connections}/5")

        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            for ws in connections:
                try:
                    await ws.close()
                except Exception:
                    pass

    @pytest.mark.asyncio
    async def test_connection_limit_stress(self, websocket_url):
        """–¢–µ—Å—Ç: —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –ª–∏–º–∏—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π."""
        connections = []
        successful_connections = 0
        rejected_connections = 0

        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å 15 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π (–±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ 10)
            for i in range(15):
                try:
                    websocket = await websockets.connect(websocket_url)
                    connections.append(websocket)
                    successful_connections += 1
                    print(f"‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {i+1} –ø—Ä–∏–Ω—è—Ç–æ")

                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(0.1)

                except (ConnectionClosed, OSError, Exception) as e:
                    rejected_connections += 1
                    print(f"‚úó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {i+1} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: {type(e).__name__}")

            print(
                f"üìä –ò—Ç–æ–≥–æ: –ü—Ä–∏–Ω—è—Ç–æ={successful_connections}, –û—Ç–∫–ª–æ–Ω–µ–Ω–æ={rejected_connections}"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∏–º–∏—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
            if successful_connections > 10:
                print("‚ö† –í–æ–∑–º–æ–∂–Ω–æ, –ª–∏–º–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print("‚úì –õ–∏–º–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

            # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ —Ö–æ—Ç—è –±—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            assert (
                successful_connections <= 12
            ), f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏–Ω—è—Ç–æ: {successful_connections}"

        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            for ws in connections:
                try:
                    await ws.close()
                except Exception:
                    pass

    @pytest.mark.asyncio
    async def test_connection_recovery_after_disconnect(self, websocket_url):
        """–¢–µ—Å—Ç: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è."""
        # –°–æ–∑–¥–∞—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        connections = []
        for i in range(3):
            websocket = await websockets.connect(websocket_url)
            connections.append(websocket)
            print(f"‚úì –°–æ–∑–¥–∞–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {i+1}")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        for i, ws in enumerate(connections):
            await ws.close()
            print(f"‚úì –ó–∞–∫—Ä—ã—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {i+1}")

        # –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π
        await asyncio.sleep(0.2)

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å)
        new_connections = []
        try:
            for i in range(3):
                websocket = await websockets.connect(websocket_url)
                new_connections.append(websocket)
                print(f"‚úì –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {i+1} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

            assert len(new_connections) == 3, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
            print("‚úì –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")

        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            for ws in new_connections:
                try:
                    await ws.close()
                except Exception:
                    pass

    @pytest.mark.asyncio
    async def test_websocket_message_exchange(self, websocket_url):
        """–¢–µ—Å—Ç: –æ–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ WebSocket."""
        try:
            async with websockets.connect(websocket_url) as websocket:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                test_message = {"type": "ping", "data": "test"}
                await websocket.send(str(test_message))

                # –ñ–¥—ë–º –æ—Ç–≤–µ—Ç
                try:
                    response = await asyncio.wait_for(websocket.recv(), timeout=3.0)
                    print(f"‚úì –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response}")
                except asyncio.TimeoutError:
                    print("‚ö† –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")

                print("‚úì –û–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")

        except Exception as e:
            pytest.fail(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: {e}")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
    pytest.main([__file__, "-v", "-s"])
