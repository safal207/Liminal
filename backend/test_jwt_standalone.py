"""
Standalone —Ç–µ—Å—Ç JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–µ–∑ conftest.py
–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É –Ω–∞ localhost:8000
"""

import asyncio
import json

import requests
import websockets

# –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_URL = "http://127.0.0.1:8000"
WS_URL = "ws://127.0.0.1:8000/ws/timeline"


async def test_websocket_messaging_after_auth():
    """–¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    print("üîê –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")

    # 1. –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    print("üìù –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω...")
    response = requests.post(
        f"{BASE_URL}/auth/login", json={"username": "testuser", "password": "testpass"}
    )

    assert response.status_code == 200, f"Login failed: {response.text}"
    token_data = response.json()
    token = token_data["access_token"]
    print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:20]}...")

    # 2. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
    print("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket...")
    async with websockets.connect(WS_URL) as websocket:
        print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")

        # 3. –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        auth_required = await websocket.recv()
        auth_required_data = json.loads(auth_required)
        print(f"üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {auth_required_data}")
        assert auth_required_data["type"] == "auth_required"

        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
        print("üîë –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JWT —Ç–æ–∫–µ–Ω...")
        await websocket.send(json.dumps({"type": "auth", "token": token}))

        # 5. –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        auth_response = await websocket.recv()
        auth_result = json.loads(auth_response)
        print(f"üì® –û—Ç–≤–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {auth_result}")
        assert auth_result["type"] == "auth_success"
        print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")

        # 6. –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
        print("üì¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª test_channel...")
        await websocket.send(json.dumps({"type": "subscribe", "channel": "test_channel"}))

        # 7. –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        subscribe_response = await websocket.recv()
        subscribe_result = json.loads(subscribe_response)
        print(f"üì® –û—Ç–≤–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏: {subscribe_result}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø–æ–ª–µ type
        if "type" not in subscribe_result:
            print("‚ùå –û–®–ò–ë–ö–ê: –í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –ø–æ–ª—è 'type'!")
            print(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {subscribe_result}")
            return False

        assert subscribe_result["type"] == "subscribed"
        assert subscribe_result["channel"] == "test_channel"
        print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞!")

        # 8. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        print("üí¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª...")
        await websocket.send(
            json.dumps(
                {
                    "type": "broadcast",
                    "channel": "test_channel",
                    "content": "Hello from JWT test!",
                }
            )
        )

        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ standalone —Ç–µ—Å—Ç–∞ JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print("‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:8000")

    try:
        result = asyncio.run(test_websocket_messaging_after_auth())
        if result:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò!")
        else:
            print("üí• –¢–ï–°–¢–´ –£–ü–ê–õ–ò!")
    except Exception as e:
        print(f"üí• –û–®–ò–ë–ö–ê: {e}")
        import traceback

        traceback.print_exc()
