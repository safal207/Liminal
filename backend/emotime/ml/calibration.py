"""
üéØ‚ö° Adaptive Calibration System ‚Äî MIT-style parameter optimization

Smart calibration without heavy ML dependencies:
- Evolutionary algorithms for parameter tuning
- Bayesian-inspired optimization
- Performance-based adaptive thresholds
- Real-time system calibration

Based on MIT optimization research.
"""

import numpy as np
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass, asdict
from collections import deque
import random

from ..modes import ModeType, EmotionalMode
from ..timeseries import EmotionalPoint
from ..utils import safe_logger


@dataclass
class ParameterSet:
    """–ù–∞–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏."""
    valence_thresholds: Dict[str, float]
    arousal_thresholds: Dict[str, float]
    confidence_boost: float
    temporal_weight: float
    performance_score: float = 0.0
    generation: int = 0
    usage_count: int = 0


@dataclass
class CalibrationEvent:
    """–°–æ–±—ã—Ç–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏."""
    timestamp: datetime
    old_parameters: Dict[str, Any]
    new_parameters: Dict[str, Any]
    performance_improvement: float
    trigger_reason: str


class EvolutionaryOptimizer:
    """
    –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –ø–æ–∏—Å–∫–∞
    –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    """
    
    def __init__(self, population_size: int = 20, mutation_rate: float = 0.1):
        self.population_size = population_size
        self.mutation_rate = mutation_rate
        self.population: List[ParameterSet] = []
        self.generation = 0
        self.best_performer: Optional[ParameterSet] = None
        
    def initialize_population(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ø—É–ª—è—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
        for _ in range(self.population_size):
            params = ParameterSet(
                valence_thresholds={
                    'calm_max': random.uniform(0.2, 0.6),
                    'joy_min': random.uniform(0.4, 0.8),
                    'stress_max': random.uniform(0.1, 0.5)
                },
                arousal_thresholds={
                    'calm_max': random.uniform(0.2, 0.4),
                    'stress_min': random.uniform(0.6, 0.9),
                    'focus_range': (random.uniform(0.3, 0.5), random.uniform(0.6, 0.8))
                },
                confidence_boost=random.uniform(0.8, 1.2),
                temporal_weight=random.uniform(0.1, 0.9),
                generation=self.generation
            )
            self.population.append(params)
            
        safe_logger.info(f"Initialized population of {self.population_size} parameter sets")
    
    def evaluate_fitness(self, params: ParameterSet, feedback_data: List[Dict]) -> float:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
        if not feedback_data:
            return 0.5
            
        correct_predictions = 0
        total_predictions = len(feedback_data)
        
        for data_point in feedback_data:
            point = data_point.get('emotional_point')
            actual_mode = data_point.get('actual_mode')
            
            if not point or not actual_mode:
                continue
                
            # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            predicted_mode = self._classify_with_params(point, params)
            
            if predicted_mode == actual_mode:
                correct_predictions += 1
        
        accuracy = correct_predictions / max(total_predictions, 1)
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (–º–µ–Ω—å—à–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)
        stability_bonus = 1.0 - (
            abs(params.confidence_boost - 1.0) + 
            abs(params.temporal_weight - 0.5)
        ) * 0.1
        
        return accuracy * stability_bonus
    
    def _classify_with_params(self, point: EmotionalPoint, params: ParameterSet) -> ModeType:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏—é —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."""
        valence = point.valence
        arousal = point.arousal
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥–∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if (valence <= params.valence_thresholds['calm_max'] and 
            arousal <= params.arousal_thresholds['calm_max']):
            return ModeType.CALM
            
        elif valence >= params.valence_thresholds['joy_min']:
            return ModeType.JOY
            
        elif (valence <= params.valence_thresholds['stress_max'] and 
              arousal >= params.arousal_thresholds['stress_min']):
            return ModeType.STRESS
            
        elif (params.arousal_thresholds['focus_range'][0] <= arousal <= 
              params.arousal_thresholds['focus_range'][1]):
            return ModeType.FOCUS
            
        elif arousal < params.arousal_thresholds['calm_max']:
            return ModeType.CONTEMPLATION
            
        else:
            return ModeType.NEUTRAL
    
    def evolve_generation(self, feedback_data: List[Dict]) -> ParameterSet:
        """–≠–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –ø–æ–∫–æ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""
        if not self.population:
            self.initialize_population()
        
        # –û—Ü–µ–Ω–∫–∞ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏
        for params in self.population:
            params.performance_score = self.evaluate_fitness(params, feedback_data)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–Ω–æ—Å—Ç–∏
        self.population.sort(key=lambda p: p.performance_score, reverse=True)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        if not self.best_performer or self.population[0].performance_score > self.best_performer.performance_score:
            self.best_performer = self.population[0]
        
        # –°–µ–ª–µ–∫—Ü–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –ª—É—á—à—É—é –ø–æ–ª–æ–≤–∏–Ω—É)
        survivors = self.population[:self.population_size // 2]
        
        # –ö—Ä–æ—Å—Å–æ–≤–µ—Ä –∏ –º—É—Ç–∞—Ü–∏—è
        new_generation = survivors.copy()
        
        while len(new_generation) < self.population_size:
            parent1, parent2 = random.choices(survivors, k=2)
            child = self._crossover(parent1, parent2)
            child = self._mutate(child)
            child.generation = self.generation + 1
            new_generation.append(child)
        
        self.population = new_generation
        self.generation += 1
        
        safe_logger.info(f"Generation {self.generation}: best score = {self.best_performer.performance_score:.3f}")
        
        return self.best_performer
    
    def _crossover(self, parent1: ParameterSet, parent2: ParameterSet) -> ParameterSet:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ—Ç–æ–º–∫–∞ –æ—Ç –¥–≤—É—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π."""
        child = ParameterSet(
            valence_thresholds={},
            arousal_thresholds={},
            confidence_boost=0.0,
            temporal_weight=0.0
        )
        
        # –°–º–µ—à–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥–∏ –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        for key in parent1.valence_thresholds:
            if random.random() < 0.5:
                child.valence_thresholds[key] = parent1.valence_thresholds[key]
            else:
                child.valence_thresholds[key] = parent2.valence_thresholds[key]
        
        # –°–º–µ—à–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥–∏ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏—è  
        for key in parent1.arousal_thresholds:
            if random.random() < 0.5:
                child.arousal_thresholds[key] = parent1.arousal_thresholds[key]
            else:
                child.arousal_thresholds[key] = parent2.arousal_thresholds[key]
        
        # –£—Å—Ä–µ–¥–Ω—è–µ–º —Å–∫–∞–ª—è—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        child.confidence_boost = (parent1.confidence_boost + parent2.confidence_boost) / 2
        child.temporal_weight = (parent1.temporal_weight + parent2.temporal_weight) / 2
        
        return child
    
    def _mutate(self, params: ParameterSet) -> ParameterSet:
        """–ú—É—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."""
        if random.random() > self.mutation_rate:
            return params
            
        # –ú—É—Ç–∞—Ü–∏—è –ø–æ—Ä–æ–≥–æ–≤ –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        for key in params.valence_thresholds:
            if random.random() < 0.3:  # 30% —à–∞–Ω—Å –º—É—Ç–∞—Ü–∏–∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ä–æ–≥–∞
                noise = random.uniform(-0.1, 0.1)
                params.valence_thresholds[key] = np.clip(
                    params.valence_thresholds[key] + noise, 0.0, 1.0
                )
        
        # –ú—É—Ç–∞—Ü–∏—è –ø–æ—Ä–æ–≥–æ–≤ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏—è
        for key in params.arousal_thresholds:
            if random.random() < 0.3:
                if isinstance(params.arousal_thresholds[key], tuple):
                    # –î–∏–∞–ø–∞–∑–æ–Ω
                    low, high = params.arousal_thresholds[key]
                    noise_low = random.uniform(-0.05, 0.05)
                    noise_high = random.uniform(-0.05, 0.05)
                    new_low = np.clip(low + noise_low, 0.0, 1.0)
                    new_high = np.clip(high + noise_high, 0.0, 1.0)
                    if new_low < new_high:
                        params.arousal_thresholds[key] = (new_low, new_high)
                else:
                    # –û–¥–∏–Ω–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    noise = random.uniform(-0.1, 0.1)
                    params.arousal_thresholds[key] = np.clip(
                        params.arousal_thresholds[key] + noise, 0.0, 1.0
                    )
        
        # –ú—É—Ç–∞—Ü–∏—è —Å–∫–∞–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if random.random() < 0.3:
            params.confidence_boost += random.uniform(-0.1, 0.1)
            params.confidence_boost = np.clip(params.confidence_boost, 0.5, 1.5)
            
        if random.random() < 0.3:
            params.temporal_weight += random.uniform(-0.1, 0.1)
            params.temporal_weight = np.clip(params.temporal_weight, 0.0, 1.0)
        
        return params


class AdaptiveCalibrator:
    """
    –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∫–∞–ª–∏–±—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã.
    
    MIT-level features:
    - Evolutionary parameter optimization
    - Real-time performance monitoring
    - Adaptive threshold adjustment
    - Multi-objective optimization
    """
    
    def __init__(self, user_id: str):
        self.user_id = user_id
        self.optimizer = EvolutionaryOptimizer()
        
        # Performance tracking
        self.feedback_buffer = deque(maxlen=100)
        self.performance_history = deque(maxlen=50)
        self.calibration_events = deque(maxlen=20)
        
        # Current parameters
        self.current_parameters: Optional[ParameterSet] = None
        self.baseline_performance = 0.5
        
        # Calibration settings
        self.min_feedback_for_calibration = 10
        self.calibration_interval = timedelta(hours=1)
        self.last_calibration = datetime.now()
        
        safe_logger.info(f"Adaptive calibrator initialized for user {user_id}")
    
    def add_feedback(
        self, 
        emotional_point: EmotionalPoint,
        predicted_mode: ModeType,
        actual_mode: ModeType,
        confidence: float
    ):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏."""
        feedback = {
            'timestamp': datetime.now(),
            'emotional_point': emotional_point,
            'predicted_mode': predicted_mode,
            'actual_mode': actual_mode,
            'confidence': confidence,
            'correct': predicted_mode == actual_mode
        }
        
        self.feedback_buffer.append(feedback)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
        if self._should_calibrate():
            self._trigger_calibration()
    
    def _should_calibrate(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–∞ –ª–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞."""
        if len(self.feedback_buffer) < self.min_feedback_for_calibration:
            return False
            
        if datetime.now() - self.last_calibration < self.calibration_interval:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        recent_feedback = list(self.feedback_buffer)[-10:]
        recent_accuracy = sum(1 for f in recent_feedback if f['correct']) / len(recent_feedback)
        
        if recent_accuracy < self.baseline_performance - 0.1:  # –ü–∞–¥–µ–Ω–∏–µ –Ω–∞ 10%
            safe_logger.info(f"Performance drop detected: {recent_accuracy:.3f} vs {self.baseline_performance:.3f}")
            return True
        
        return False
    
    def _trigger_calibration(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏."""
        safe_logger.info("Starting adaptive calibration...")
        
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            feedback_data = list(self.feedback_buffer)
            
            # –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            old_params = self.current_parameters
            new_params = self.optimizer.evolve_generation(feedback_data)
            
            # –û—Ü–µ–Ω–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è
            old_score = old_params.performance_score if old_params else self.baseline_performance
            improvement = new_params.performance_score - old_score
            
            if improvement > 0.01:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ 1%
                self.current_parameters = new_params
                self.baseline_performance = new_params.performance_score
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
                calibration_event = CalibrationEvent(
                    timestamp=datetime.now(),
                    old_parameters=asdict(old_params) if old_params else {},
                    new_parameters=asdict(new_params),
                    performance_improvement=improvement,
                    trigger_reason="performance_optimization"
                )
                
                self.calibration_events.append(calibration_event)
                self.last_calibration = datetime.now()
                
                safe_logger.info(f"Calibration complete: {improvement:.3f} improvement")
            else:
                safe_logger.info("No significant improvement found")
        
        except Exception as e:
            safe_logger.error(f"Calibration failed: {e}")
    
    def get_calibrated_thresholds(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏."""
        if not self.current_parameters:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
            return {
                "valence_thresholds": {
                    "calm_max": 0.4,
                    "joy_min": 0.6,
                    "stress_max": 0.3
                },
                "arousal_thresholds": {
                    "calm_max": 0.3,
                    "stress_min": 0.7,
                    "focus_range": (0.4, 0.7)
                },
                "confidence_boost": 1.0,
                "temporal_weight": 0.5,
                "calibration_status": "default"
            }
        
        return {
            "valence_thresholds": self.current_parameters.valence_thresholds,
            "arousal_thresholds": self.current_parameters.arousal_thresholds,
            "confidence_boost": self.current_parameters.confidence_boost,
            "temporal_weight": self.current_parameters.temporal_weight,
            "calibration_status": "optimized",
            "performance_score": self.current_parameters.performance_score,
            "generation": self.current_parameters.generation
        }
    
    def get_calibration_analytics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏."""
        recent_feedback = list(self.feedback_buffer)[-20:]
        recent_accuracy = sum(1 for f in recent_feedback if f['correct']) / max(len(recent_feedback), 1)
        
        return {
            "user_id": self.user_id,
            "current_performance": recent_accuracy,
            "baseline_performance": self.baseline_performance,
            "total_feedback": len(self.feedback_buffer),
            "calibration_events": len(self.calibration_events),
            "last_calibration": self.last_calibration.isoformat(),
            "optimizer_generation": self.optimizer.generation,
            "best_performer_score": self.optimizer.best_performer.performance_score if self.optimizer.best_performer else None,
            "recent_events": [asdict(event) for event in list(self.calibration_events)[-5:]]
        }
    
    def save_calibration(self, filepath: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏."""
        try:
            state = {
                "user_id": self.user_id,
                "current_parameters": asdict(self.current_parameters) if self.current_parameters else None,
                "baseline_performance": self.baseline_performance,
                "optimizer_generation": self.optimizer.generation,
                "calibration_events": [asdict(event) for event in self.calibration_events]
            }
            
            with open(filepath, 'w') as f:
                json.dump(state, f, indent=2, default=str)
                
            safe_logger.info(f"Calibration state saved to {filepath}")
            
        except Exception as e:
            safe_logger.error(f"Failed to save calibration: {e}")
    
    def load_calibration(self, filepath: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏."""
        try:
            with open(filepath, 'r') as f:
                state = json.load(f)
            
            self.baseline_performance = state.get("baseline_performance", 0.5)
            self.optimizer.generation = state.get("optimizer_generation", 0)
            
            if state.get("current_parameters"):
                params_dict = state["current_parameters"]
                self.current_parameters = ParameterSet(**params_dict)
            
            safe_logger.info(f"Calibration state loaded from {filepath}")
            
        except Exception as e:
            safe_logger.warning(f"Failed to load calibration: {e}")


# Global calibrator instances
_calibrators = {}

def get_calibrator(user_id: str) -> AdaptiveCalibrator:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–ª–∏–±—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user_id not in _calibrators:
        _calibrators[user_id] = AdaptiveCalibrator(user_id)
    return _calibrators[user_id]