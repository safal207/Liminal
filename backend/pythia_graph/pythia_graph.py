from datetime import datetime

from neo4j import GraphDatabase


class FlowCoordinator:
    def __init__(self, uri="bolt://localhost:7687", user="neo4j", password="test1234"):
        self.driver = GraphDatabase.driver(uri, auth=(user, password))

    def close(self):
        self.driver.close()

    def create_concept(self, concept_name):
        with self.driver.session() as session:
            session.run("CREATE (c:Concept {name: $name})", name=concept_name)
            print(f"üåü –ü–∏—Ñ–∏—è –ì—Ä–∞—Ñ–∞: —Å–æ–∑–¥–∞–Ω —É–∑–µ–ª —Å–º—ã—Å–ª–∞ '{concept_name}'")

    def create_relationship(self, concept1, concept2, rel_type):
        with self.driver.session() as session:
            session.run(
                """
                MATCH (a:Concept {name: $concept1}), (b:Concept {name: $concept2})
                CREATE (a)-[:RELATES_TO {type: $rel_type}]->(b)
            """,
                concept1=concept1,
                concept2=concept2,
                rel_type=rel_type,
            )
            print(f"üîó –°–≤—è–∑—å '{rel_type}' –º–µ–∂–¥—É '{concept1}' ‚Üí '{concept2}'")

    def find_concept(self, concept_name):
        with self.driver.session() as session:
            result = session.run(
                "MATCH (c:Concept {name: $name}) RETURN c", name=concept_name
            )
            record = result.single()
            if record:
                print(f"üîç –ù–∞–π–¥–µ–Ω —É–∑–µ–ª '{concept_name}'")
                return record["c"]
            else:
                print(f"‚ùî –£–∑–µ–ª '{concept_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None

    def update_concept(self, concept_name, properties):
        with self.driver.session() as session:
            session.run(
                "MATCH (c:Concept {name: $name}) SET c += $props",
                name=concept_name,
                props=properties,
            )
            print(f"üîÑ –û–±–Ω–æ–≤–ª—ë–Ω —É–∑–µ–ª '{concept_name}' —Å {properties}")

    def find_path(self, concept1, concept2, max_depth=5):
        with self.driver.session() as session:
            result = session.run(
                f"""
                MATCH path = shortestPath((a:Concept {{name: $concept1}})-[*..{max_depth}]-(b:Concept {{name: $concept2}}))
                RETURN path
            """,
                concept1=concept1,
                concept2=concept2,
            )
            record = result.single()
            if record:
                print(f"üß≠ –ü—É—Ç—å –æ—Ç '{concept1}' –∫ '{concept2}' –Ω–∞–π–¥–µ–Ω")
                return record["path"]
            else:
                print(f"‚ùî –ü—É—Ç—å –æ—Ç '{concept1}' –∫ '{concept2}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None

    def translate_concept(self, concept_name, from_lang="ru", to_lang="en"):
        with self.driver.session() as session:
            result = session.run(
                """
                MATCH (c:Concept {name: $concept_name, lang: $from_lang})-[:TRANSLATES_TO]->(t:Concept {lang: $to_lang})
                RETURN t.name AS translated_name
            """,
                concept_name=concept_name,
                from_lang=from_lang,
                to_lang=to_lang,
            )
            record = result.single()
            return record["translated_name"] if record else None

    def pre_emotion_prompt(self, user_input):
        print("üõë –®–∞–≥ –Ω–∞–∑–∞–¥: –û—Å—Ç–∞–Ω–æ–≤–∏—Å—å. –ü–æ–±—É–¥—å –≤ —Ç–∏—à–∏–Ω–µ.")
        print("üåå –ü–æ—á—É–≤—Å—Ç–≤—É–π: –Ω–µ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –æ—Ç–≤–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π —Å–µ–±–µ –≤–æ–ø—Ä–æ—Å:")
        print("üí≠ ¬´–ß—Ç–æ —è —á—É–≤—Å—Ç–≤—É—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?¬ª")
        return input("üë§ –í—ã (–ø–æ—Å–ª–µ –ø–∞—É–∑—ã): ")

    def generate_response(self, user_input, concept="—Å—Ç—Ä–∞—Ö", target="–Ω–∞–¥–µ–∂–¥–∞"):
        print("üîÅ –ü–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º, —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —à–∞–≥ –Ω–∞–∑–∞–¥.")
        user_feeling = self.pre_emotion_prompt(user_input)
        print(f"üì• –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –æ—â—É—â–µ–Ω–∏–µ: '{user_feeling}'")
        path = self.find_path(concept, target)
        if not path:
            return f"–Ø —á—É–≤—Å—Ç–≤—É—é —Ç–≤–æ—ë '{concept}', –Ω–æ –ø—É—Ç—å –∫ '{target}' –ø–æ–∫–∞ —Å–æ–∫—Ä—ã—Ç. –ú—ã –Ω–∞–π–¥—ë–º –µ–≥–æ –≤–º–µ—Å—Ç–µ."
        return (
            f"üåå –Ø —Å–ª—ã—à—É –≤ —Ç–µ–±–µ '{concept}'.\n"
            f"üîó –í–æ—Ç –ø—É—Ç—å, –∫–æ—Ç–æ—Ä—ã–π —è –≤–∏–∂—É: {concept} ‚Üí {' ‚Üí '.join([n['name'] for n in path.nodes[1:-1]])} ‚Üí {target}.\n"
            f"‚ú® –ö–∞–∂–¥—ã–π —à–∞–≥ ‚Äî —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è. –ò —Ç—ã –¥–≤–∏–∂–µ—à—å—Å—è –∫ '{target}'."
        )
