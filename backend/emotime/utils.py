"""
üåø‚ú® Emotime Utils ‚Äî —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö

–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é
"""

import os
import sys
import locale
from typing import Dict, Any


def setup_encoding():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows –∏ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º."""
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å UTF-8
        if sys.platform.startswith('win'):
            # Windows: –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–¥–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–Ω—Å–æ–ª–∏
            try:
                import subprocess
                subprocess.run(['chcp', '65001'], shell=True, capture_output=True)
            except:
                pass
                
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è UTF-8
        os.environ['PYTHONIOENCODING'] = 'utf-8'
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –ª–æ–∫–∞–ª—å –Ω–∞ UTF-8
        try:
            locale.setlocale(locale.LC_ALL, '')
        except:
            pass
            
        return True
    except Exception as e:
        print(f"WARNING: Could not setup UTF-8 encoding: {e}")
        return False


def safe_print(message: str, fallback_encoding: str = 'ascii'):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥ —Å fallback –Ω–∞ ASCII."""
    try:
        print(message)
    except UnicodeEncodeError:
        # Fallback: –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        try:
            safe_message = message.encode(fallback_encoding, errors='replace').decode(fallback_encoding)
            print(safe_message)
        except:
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback: —Ç–æ–ª—å–∫–æ ASCII —Å–∏–º–≤–æ–ª—ã
            ascii_message = ''.join(c if ord(c) < 128 else '?' for c in message)
            print(ascii_message)


def sanitize_for_console(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏."""
    # –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ ASCII —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã
    emoji_map = {
        'üåø': '[leaf]',
        '‚ú®': '[sparkle]', 
        'üíì': '[heart]',
        '‚ù§Ô∏è‚Äçüî•': '[fire-heart]',
        'üíî': '[broken-heart]',
        'üéØ': '[target]',
        '‚ö°': '[lightning]',
        'üí≠': '[thought]',
        'üòê': '[neutral]',
        'üßò‚Äç‚ôÄÔ∏è': '[meditation]',
        'üí°': '[bulb]',
        'üî•': '[fire]',
        '‚úÖ': '[OK]',
        '‚ùå': '[ERROR]',
        '‚ö†Ô∏è': '[WARNING]',
        'üìä': '[chart]',
        'üöÄ': '[rocket]'
    }
    
    result = text
    for emoji, replacement in emoji_map.items():
        result = result.replace(emoji, replacement)
    
    # –ó–∞–º–µ–Ω—è–µ–º –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ Unicode —Å–∏–º–≤–æ–ª—ã
    result = result.replace('‚ñà', '=').replace('‚ñë', '-')
    
    return result


def get_console_safe_symbols() -> Dict[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ASCII-–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π."""
    return {
        'heart_calm': '*',
        'heart_focus': '**', 
        'heart_stress': '!',
        'heart_joy': '+',
        'progress_fill': '=',
        'progress_empty': '-',
        'bullet': '‚Ä¢',
        'arrow': '->',
        'check': '[OK]',
        'error': '[ERROR]', 
        'warning': '[WARN]',
        'info': '[INFO]'
    }


class SafeLogger:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–¥–∏—Ä–æ–≤–æ–∫."""
    
    def __init__(self, prefix: str = "Emotime"):
        self.prefix = prefix
        self.symbols = get_console_safe_symbols()
        
    def info(self, message: str):
        safe_message = f"{self.symbols['info']} {self.prefix}: {sanitize_for_console(message)}"
        safe_print(safe_message)
        
    def warning(self, message: str):
        safe_message = f"{self.symbols['warning']} {self.prefix}: {sanitize_for_console(message)}"
        safe_print(safe_message)
        
    def error(self, message: str):
        safe_message = f"{self.symbols['error']} {self.prefix}: {sanitize_for_console(message)}"
        safe_print(safe_message)
        
    def heartbeat(self, mode_name: str, confidence: float):
        """–í—ã–≤–æ–¥–∏—Ç —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ –≤ ASCII-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
        if mode_name == "calm":
            symbol = self.symbols['heart_calm']
        elif mode_name == "focus":
            symbol = self.symbols['heart_focus']
        elif mode_name == "stress":
            symbol = self.symbols['heart_stress']
        elif mode_name == "joy":
            symbol = self.symbols['heart_joy']
        else:
            symbol = '-'
            
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏–∑ ASCII —Å–∏–º–≤–æ–ª–æ–≤
        progress_length = 10
        filled = int(confidence * progress_length)
        progress_bar = (self.symbols['progress_fill'] * filled + 
                       self.symbols['progress_empty'] * (progress_length - filled))
        
        message = f"{symbol} Emotime: {mode_name} | confidence: {progress_bar} {confidence:.1%}"
        safe_print(message)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
safe_logger = SafeLogger()


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
setup_encoding()