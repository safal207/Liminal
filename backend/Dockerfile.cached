FROM python:3.11-slim AS builder

# Install build dependencies (with apt combined in one layer)
RUN apt-get update && \
    apt-get install -y build-essential gcc && \
    rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install pip tools first (separate layer for better caching)
RUN pip install --no-cache-dir --upgrade pip wheel setuptools

# Split requirements into separate layers
WORKDIR /app

# Copy only base requirements first (fastapi, uvicorn, etc)
COPY requirements.txt .
RUN grep -v "numpy\|pandas\|scikit\|shap\|lime\|onnx" requirements.txt > base_reqs.txt || true
RUN pip install --no-cache-dir -r base_reqs.txt

# Install numpy and pandas separately (frequently used ML dependencies)
RUN grep "numpy\|pandas" requirements.txt > numpy_reqs.txt || true
RUN if [ -s numpy_reqs.txt ]; then pip install --no-cache-dir -r numpy_reqs.txt; fi

# Install remaining heavy ML packages
RUN grep "scikit\|shap\|lime\|onnx" requirements.txt > ml_reqs.txt || true
RUN if [ -s ml_reqs.txt ]; then pip install --no-cache-dir --prefer-binary -r ml_reqs.txt; fi

# Make sure we've installed everything
RUN pip install --no-cache-dir -r requirements.txt

# Final minimal image
FROM python:3.11-slim

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set ML optimization variables
ENV OPENBLAS_NUM_THREADS=1 \
    OMP_NUM_THREADS=1 \
    MKL_NUM_THREADS=1

# Copy application code
WORKDIR /app
COPY . .

# Run with multiple workers for better performance
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]
