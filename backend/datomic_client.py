"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Datomic –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏.
"""

from datetime import datetime
from typing import Dict, List, Optional

from datomic import Client, Connection


class DatomicClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Datomic –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""

    def __init__(
        self,
        uri: str = "http://localhost:8080",
        db_name: str = "liminal",
        storage_type: str = "dev",
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Datomic.

        Args:
            uri: –ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ Datomic (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:8080)
            db_name: –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: liminal)
            storage_type: –¢–∏–ø —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: dev)
        """
        self.uri = uri
        self.db_name = db_name
        self.storage_type = storage_type
        self.conn = None

    def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            client = Client(self.uri, self.db_name, self.storage_type)
            self.conn = Connection(client)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {self.db_name}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Datomic: {str(e)}")
            return False

    def create_database(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        try:
            client = Client(self.uri, self.db_name, self.storage_type)
            client.create_database()
            self.conn = Connection(client)
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {self.db_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return False

    def transact(self, data: List[Dict]) -> Dict:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.

        Args:
            data: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        """
        if not self.conn:
            raise ConnectionError("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

        try:
            result = self.conn.transact(data)
            print("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}")
            raise

    def query(self, query: str, params: Optional[Dict] = None) -> List[Dict]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

        Args:
            query: Datalog –∑–∞–ø—Ä–æ—Å –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞

        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        """
        if not self.conn:
            raise ConnectionError("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

        try:
            db = self.conn.db()
            if params:
                result = db.query(query, params)
            else:
                result = db.query(query)
            return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            raise

    def add_emotion_entry(
        self,
        user_id: str,
        emotion: str,
        intensity: float,
        timestamp: Optional[datetime] = None,
    ) -> Dict:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ–± —ç–º–æ—Ü–∏–∏.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            emotion: –ù–∞–∑–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–∏
            intensity: –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —ç–º–æ—Ü–∏–∏ (–æ—Ç 0.0 –¥–æ 1.0)
            timestamp: –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è)

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        """
        if not timestamp:
            timestamp = datetime.utcnow()

        data = [
            {
                "db/id": "emotion-temp",
                "entry/user": user_id,
                "entry/emotion": emotion,
                "entry/intensity": float(intensity),
                "entry/timestamp": timestamp,
            }
        ]

        return self.transact(data)

    def get_emotion_history(self, user_id: str, limit: int = 100) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π

        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –æ–± —ç–º–æ—Ü–∏—è—Ö
        """
        query = """
        [:find ?e ?emotion ?intensity ?timestamp
         :in $ ?user ?limit
         :where
         [?e :entry/user ?user]
         [?e :entry/emotion ?emotion]
         [?e :entry/intensity ?intensity]
         [?e :entry/timestamp ?timestamp]]
        """

        results = self.query(query, {"?user": user_id, "?limit": limit})

        return [
            {
                "id": str(r[0]),
                "emotion": r[1],
                "intensity": float(r[2]),
                "timestamp": r[3],
            }
            for r in results
        ]

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        if self.conn:
            self.conn.release()
            self.conn = None
            print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    client = DatomicClient()

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π
        if not client.connect():
            print("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            client.create_database()

        # –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        result = client.add_emotion_entry(
            user_id="user-123", emotion="—Ä–∞–¥–æ—Å—Ç—å", intensity=0.8
        )
        print(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: {result}")

        # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏
        history = client.get_emotion_history("user-123")
        print(f"–ò—Å—Ç–æ—Ä–∏—è —ç–º–æ—Ü–∏–π: {history}")

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        # –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        client.close()
