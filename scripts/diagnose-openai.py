#!/usr/bin/env python
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ OpenAI API –∫–ª—é—á–∞ –∏ –¥–æ—Å—Ç—É–ø–∞ –∫ API
"""
import os
import sys
import traceback
from pathlib import Path

print("\n====================================")
print("   OPENAI API KEY DIAGNOSTICS")
print("====================================\n")

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))
print(f"Added {Path(__file__).parent.parent} to sys.path")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
os.environ["PYTHONIOENCODING"] = "utf-8"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
try:
    from dotenv import load_dotenv

    env_path = Path(__file__).parent.parent / ".env"
    if env_path.exists():
        load_dotenv(env_path)
        print(f"‚úÖ Loaded .env file from {env_path}")
    else:
        print(f"‚ö†Ô∏è .env file not found at {env_path}")
except ImportError:
    print("‚ö†Ô∏è dotenv module not found, skipping .env loading")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
api_key = os.getenv("OPENAI_API_KEY", "")
if api_key:
    key_length = len(api_key)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–∏–º–≤–æ–ª–∞
    masked_key = (
        f"{api_key[:4]}...{api_key[-4:]}" if key_length > 8 else "[—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π]"
    )
    print(f"\nAPI Key details:")
    print(f"‚úì Length: {key_length} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"‚úì Format: {masked_key}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
    if api_key.strip() != api_key:
        print("‚ö†Ô∏è Warning: API key contains whitespace at beginning/end")

    if "\n" in api_key or "\r" in api_key:
        print("‚ö†Ô∏è Warning: API key contains line breaks")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫–ª—é—á–∞
    valid_prefixes = ["sk-", "org-"]
    has_valid_prefix = any(api_key.startswith(prefix) for prefix in valid_prefixes)
    if not has_valid_prefix:
        print(
            f"‚ö†Ô∏è Warning: API key does not start with a valid prefix (should be one of: {', '.join(valid_prefixes)})"
        )
        print(f"  Key starts with: {api_key[:3]}...")
else:
    print("‚ùå Error: OPENAI_API_KEY environment variable is not set")
    print("  Please set it in your .env file or environment variables")

print("\nTrying to import OpenAI module...")
try:
    import openai
    from openai import AsyncOpenAI

    print("‚úÖ OpenAI module imported successfully")
    print(f"  Version: {openai.__version__}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    try:
        client = AsyncOpenAI(api_key=api_key.strip() if api_key else "invalid-key")
        print("‚úÖ OpenAI client created (not validated)")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        print("\nCreating test async function...")
        import asyncio

        async def test_api():
            try:
                print("Testing API connection...")
                response = await client.models.list()
                print("‚úÖ API connection successful!")
                print(f"‚úì Available models: {len(response.data)} models found")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –º–æ–¥–µ–ª–∏
                for i, model in enumerate(response.data[:3]):
                    print(f"  - {model.id}")
                if len(response.data) > 3:
                    print(f"  - ... and {len(response.data) - 3} more")
                return True
            except Exception as e:
                print(f"‚ùå API connection failed: {e}")
                traceback.print_exc()
                return False

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        print("\nAttempting to connect to OpenAI API...")
        loop = asyncio.get_event_loop()
        success = loop.run_until_complete(test_api())

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n====================================")
        print("            DIAGNOSIS")
        print("====================================")
        if success:
            print("‚úÖ OpenAI API connection is WORKING!")
            print("  You can use the API for natural language explanations")
        else:
            print("‚ùå OpenAI API connection FAILED!")
            print("  Please check the error message above and fix your API key")
            print("  Common issues:")
            print("  1. Invalid or expired API key")
            print("  2. Network connection problems")
            print("  3. Incorrect key format (should start with 'sk-')")

    except Exception as e:
        print(f"‚ùå Error creating OpenAI client: {e}")
        traceback.print_exc()

except ImportError as e:
    print(f"‚ùå Error importing OpenAI module: {e}")
    print("  Please install it using: pip install openai")

print("\nüèÅ Diagnostics completed")
