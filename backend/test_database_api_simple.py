#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Database API –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å DatabaseAdapter –∏ API endpoints
—á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π.
"""

import asyncio
import sys
import os
from unittest.mock import AsyncMock, MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_database_adapter_routing():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ë–î –ø–æ —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—É—Ç–∏–Ω–≥–∞ DatabaseAdapter...")
    
    try:
        from database_adapter import DatabaseAdapter, DataType
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω—ã–º –ë–î
        adapter = DatabaseAdapter(auto_connect=False)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ‚Üí Datomic
        temporal_types = [
            DataType.TEMPORAL,
            DataType.EVENT, 
            DataType.AUDIT,
            DataType.EMOTION_HISTORY,
            DataType.SESSION_DATA
        ]
        
        for data_type in temporal_types:
            db = adapter._choose_database(data_type)
            assert db == "datomic", f"‚ùå {data_type.value} –¥–æ–ª–∂–µ–Ω –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ Datomic, –ø–æ–ª—É—á–µ–Ω {db}"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–∏–Ω–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ‚Üí Neo4j
        structural_types = [
            DataType.RELATIONSHIP,
            DataType.GRAPH,
            DataType.PHILOSOPHY,
            DataType.CONCEPT_MAP,
            DataType.USER_NETWORK
        ]
        
        for data_type in structural_types:
            db = adapter._choose_database(data_type)
            assert db == "neo4j", f"‚ùå {data_type.value} –¥–æ–ª–∂–µ–Ω –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ Neo4j, –ø–æ–ª—É—á–µ–Ω {db}"
        
        print("‚úÖ –†–æ—É—Ç–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ—É—Ç–∏–Ω–≥–∞: {e}")
        return False


def test_database_adapter_fallback():
    """–¢–µ—Å—Ç fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞...")
    
    try:
        from database_adapter import DatabaseAdapter
        
        adapter = DatabaseAdapter(auto_connect=False, fallback_enabled=True)
        
        # –¢–µ—Å—Ç 1: Datomic –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Üí fallback –Ω–∞ Neo4j
        adapter.datomic_available = False
        adapter.neo4j_available = True
        
        available_db = adapter._get_available_database("datomic")
        assert available_db == "neo4j", f"‚ùå –û–∂–∏–¥–∞–ª—Å—è fallback –Ω–∞ Neo4j, –ø–æ–ª—É—á–µ–Ω {available_db}"
        
        # –¢–µ—Å—Ç 2: Neo4j –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Üí fallback –Ω–∞ Datomic
        adapter.datomic_available = True
        adapter.neo4j_available = False
        
        available_db = adapter._get_available_database("neo4j")
        assert available_db == "datomic", f"‚ùå –û–∂–∏–¥–∞–ª—Å—è fallback –Ω–∞ Datomic, –ø–æ–ª—É—á–µ–Ω {available_db}"
        
        # –¢–µ—Å—Ç 3: Fallback –æ—Ç–∫–ª—é—á–µ–Ω
        adapter.fallback_enabled = False
        adapter.datomic_available = False
        adapter.neo4j_available = True
        
        available_db = adapter._get_available_database("datomic")
        assert available_db is None, f"‚ùå –ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–º fallback –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None, –ø–æ–ª—É—á–µ–Ω {available_db}"
        
        print("‚úÖ Fallback –º–µ—Ö–∞–Ω–∏–∑–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è fallback: {e}")
        return False


async def test_database_adapter_store_data():
    """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from database_adapter import DatabaseAdapter, DataType
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä —Å –º–æ–∫–∞–º–∏
        adapter = DatabaseAdapter(auto_connect=False)
        
        # –ú–æ–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã –ë–î
        mock_datomic = MagicMock()
        mock_datomic.add_emotion_entry.return_value = "emotion-123"
        
        mock_neo4j = MagicMock()
        
        adapter.datomic_client = mock_datomic
        adapter.neo4j_client = mock_neo4j
        adapter.datomic_available = True
        adapter.neo4j_available = True
        
        # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        emotion_data = {
            "emotion": "—Ä–∞–¥–æ—Å—Ç—å",
            "intensity": 0.8,
            "context": "—É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"
        }
        
        result_id = await adapter.store_data(
            data=emotion_data,
            data_type=DataType.EMOTION_HISTORY,
            user_id="user-123",
            session_id="session-456"
        )
        
        assert result_id == "emotion-123", f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {result_id}"
        assert adapter.stats["datomic_queries"] == 1, "‚ùå –°—á–µ—Ç—á–∏–∫ Datomic –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ —É–≤–µ–ª–∏—á–∏–ª—Å—è"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ Datomic
        mock_datomic.add_emotion_entry.assert_called_once_with(
            user_id="user-123",
            emotion="—Ä–∞–¥–æ—Å—Ç—å",
            intensity=0.8
        )
        
        print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


async def test_database_adapter_query_data():
    """–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from database_adapter import DatabaseAdapter, DataType
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä —Å –º–æ–∫–∞–º–∏
        adapter = DatabaseAdapter(auto_connect=False)
        
        # –ú–æ–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã –ë–î
        mock_datomic = MagicMock()
        mock_datomic.get_emotion_history.return_value = [
            ("entry-1", "—Ä–∞–¥–æ—Å—Ç—å", 0.8, "2025-08-21T19:30:00"),
            ("entry-2", "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", 0.6, "2025-08-21T19:25:00")
        ]
        
        adapter.datomic_client = mock_datomic
        adapter.datomic_available = True
        adapter.neo4j_available = True
        
        # –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π
        emotions = await adapter.query_data(
            data_type=DataType.EMOTION_HISTORY,
            filters={"user_id": "user-123"},
            limit=10
        )
        
        assert len(emotions) == 2, f"‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å 2 –∑–∞–ø–∏—Å–∏, –ø–æ–ª—É—á–µ–Ω–æ {len(emotions)}"
        assert emotions[0]["emotion"] == "—Ä–∞–¥–æ—Å—Ç—å", f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —ç–º–æ—Ü–∏—è: {emotions[0]['emotion']}"
        assert emotions[1]["emotion"] == "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —ç–º–æ—Ü–∏—è: {emotions[1]['emotion']}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞
        mock_datomic.get_emotion_history.assert_called_once_with(
            user_id="user-123",
            limit=10
        )
        
        print("‚úÖ –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def test_database_adapter_health():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è...")
    
    try:
        from database_adapter import DatabaseAdapter
        
        adapter = DatabaseAdapter(auto_connect=False)
        adapter.datomic_available = True
        adapter.neo4j_available = True
        adapter.stats = {"datomic_queries": 5, "neo4j_queries": 3, "fallback_uses": 0, "errors": 0}
        
        health = adapter.get_health_status()
        
        assert health["status"] == "healthy", f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {health['status']}"
        assert health["databases"]["datomic"]["available"] is True, "‚ùå Datomic –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω"
        assert health["databases"]["neo4j"]["available"] is True, "‚ùå Neo4j –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω"
        assert health["stats"]["datomic_queries"] == 5, "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Datomic –∑–∞–ø—Ä–æ—Å–æ–≤"
        
        # –¢–µ—Å—Ç –Ω–µ–∑–¥–æ—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        adapter.datomic_available = False
        adapter.neo4j_available = False
        
        health = adapter.get_health_status()
        assert health["status"] == "unhealthy", f"‚ùå –ü—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ë–î —Å—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å unhealthy"
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        return False


def test_api_endpoints_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API endpoints."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API endpoints...")
    
    try:
        from database_api import router
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ—É—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω
        assert router is not None, "‚ùå Router –Ω–µ —Å–æ–∑–¥–∞–Ω"
        assert router.prefix == "/api/database", f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π prefix: {router.prefix}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ routes
        route_paths = [route.path for route in router.routes]
        
        expected_paths = ["/store", "/query", "/health", "/data-types", "/examples"]
        for path in expected_paths:
            assert path in route_paths, f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç route: {path}"
        
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ API endpoints –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return False


async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Database API...")
    print("=" * 50)
    
    tests = [
        ("–†–æ—É—Ç–∏–Ω–≥ DatabaseAdapter", test_database_adapter_routing),
        ("Fallback –º–µ—Ö–∞–Ω–∏–∑–º", test_database_adapter_fallback),
        ("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", test_database_adapter_store_data),
        ("–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö", test_database_adapter_query_data),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è", test_database_adapter_health),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ API", test_api_endpoints_structure),
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            
            if result:
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            failed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed/(passed+failed)*100:.1f}%")
    
    if failed == 0:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üöÄ Database API –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
    
    return failed == 0


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    try:
        success = asyncio.run(run_all_tests())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
