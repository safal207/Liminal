"""
üöÄüõ°Ô∏è BurnoutGuard Team Analytics ‚Äî –∫–æ–º–∞–Ω–¥–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è HR

–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤—ã–≥–æ—Ä–∞–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏ HR –æ—Ç–¥–µ–ª–æ–≤:
- –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
- –†–∞–Ω–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∏—Å–∫–∞—Ö –∫–æ–º–∞–Ω–¥—ã
- –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –¥–ª—è HR
- –¢—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã –≤—ã–≥–æ—Ä–∞–Ω–∏—è
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π data architecture

"–ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–≥–æ—Ä–∞–Ω–∏–∏ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è HR" üìä
"""

import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, asdict
from enum import Enum
import statistics
from collections import defaultdict, deque

from .core import BurnoutState, BurnoutRisk
from .modes import BurnoutRiskLevel, BurnoutModeType
from .utils import safe_logger, format_risk_score, calculate_percentage_change


class TeamAlertLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã."""
    GREEN = "green"          # –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ
    YELLOW = "yellow"        # –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è
    ORANGE = "orange"        # –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
    RED = "red"             # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è


class TrendDirection(Enum):
    """–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞."""
    IMPROVING = "improving"
    STABLE = "stable"
    DETERIORATING = "deteriorating"


@dataclass
class TeamMember:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–ª–µ–Ω–µ –∫–æ–º–∞–Ω–¥—ã."""
    user_id: str
    name: str
    role: str
    department: str
    current_risk_score: float
    risk_level: BurnoutRiskLevel
    last_update: datetime
    days_since_break: int = 0
    
    # Privacy settings
    anonymized: bool = False
    share_details: bool = True


@dataclass
class TeamBurnoutTrend:
    """–¢—Ä–µ–Ω–¥ –≤—ã–≥–æ—Ä–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã."""
    timeframe: str                  # "24h", "7d", "30d"
    direction: TrendDirection
    change_percentage: float        # % –∏–∑–º–µ–Ω–µ–Ω–∏—è
    affected_members: int           # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö
    risk_distribution: Dict[BurnoutRiskLevel, int]
    key_factors: List[str]         # –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    
    
@dataclass
class TeamAnalytics:
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—é."""
    team_id: str
    team_name: str
    analysis_timestamp: datetime
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    total_members: int
    active_members: int              # –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á
    average_risk_score: float
    team_alert_level: TeamAlertLevel
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤
    risk_distribution: Dict[BurnoutRiskLevel, int]
    high_risk_members: List[str]     # anonymized IDs
    
    # –¢—Ä–µ–Ω–¥—ã
    trend_24h: TeamBurnoutTrend
    trend_7d: TeamBurnoutTrend
    trend_30d: TeamBurnoutTrend
    
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∫–æ–º–∞–Ω–¥—ã
    team_indicators: List[str]
    workload_metrics: Dict[str, float]
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è HR
    hr_recommendations: List[str]
    intervention_priority: int       # 1-5 (5 = —Å—Ä–æ—á–Ω–æ)


@dataclass
class DepartmentAnalytics:
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–¥–µ–ª–∞."""
    department_name: str
    teams: List[TeamAnalytics]
    total_employees: int
    average_department_risk: float
    critical_teams: List[str]        # team IDs with high risk
    
    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    benchmark_comparison: Dict[str, float]  # —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–µ–Ω—á–º–∞—Ä–∫–∞–º–∏
    best_practices: List[str]
    

class TeamBurnoutAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤—ã–≥–æ—Ä–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥.
    
    –ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–≥–æ—Ä–∞–Ω–∏–∏ –≤ –∫–æ–º–∞–Ω–¥–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π.
    """
    
    def __init__(self, data_retention_days: int = 90):
        self.data_retention_days = data_retention_days
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö (–≤ production –±—É–¥–µ—Ç DB)
        self.team_members: Dict[str, List[TeamMember]] = {}  # team_id -> members
        self.historical_data: Dict[str, deque] = {}          # team_id -> historical analytics
        
        # –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.analytics_cache: Dict[str, Tuple[TeamAnalytics, datetime]] = {}
        self.cache_ttl = timedelta(minutes=5)
        
    async def add_team_member(
        self, 
        team_id: str, 
        member: TeamMember
    ) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã."""
        
        if team_id not in self.team_members:
            self.team_members[team_id] = []
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ
        for i, existing_member in enumerate(self.team_members[team_id]):
            if existing_member.user_id == member.user_id:
                self.team_members[team_id][i] = member
                safe_logger.debug(f"Updated team member {member.user_id} in team {team_id}")
                return True
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        self.team_members[team_id].append(member)
        safe_logger.info(f"Added new team member {member.user_id} to team {team_id}")
        return True
    
    async def analyze_team(
        self, 
        team_id: str,
        team_name: str = None,
        include_trends: bool = True
    ) -> Optional[TeamAnalytics]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—é."""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if team_id in self.analytics_cache:
            cached_analytics, cache_time = self.analytics_cache[team_id]
            if datetime.now() - cache_time < self.cache_ttl:
                return cached_analytics
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        members = self.team_members.get(team_id, [])
        if not members:
            safe_logger.warning(f"No members found for team {team_id}")
            return None
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á)
        cutoff_time = datetime.now() - timedelta(hours=24)
        active_members = [m for m in members if m.last_update >= cutoff_time]
        
        if not active_members:
            safe_logger.warning(f"No active members in team {team_id}")
            return None
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        risk_scores = [m.current_risk_score for m in active_members]
        average_risk = statistics.mean(risk_scores)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º —Ä–∏—Å–∫–∞
        risk_distribution = {level: 0 for level in BurnoutRiskLevel}
        for member in active_members:
            risk_distribution[member.risk_level] += 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–ª–µ—Ä—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
        team_alert_level = self._determine_team_alert_level(
            active_members, average_risk, risk_distribution
        )
        
        # –í—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ (–∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
        high_risk_members = [
            f"member_{i+1}" for i, m in enumerate(active_members)
            if m.risk_level in [BurnoutRiskLevel.HIGH, BurnoutRiskLevel.CRITICAL]
        ]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
        trends = {}
        if include_trends:
            trends = await self._analyze_team_trends(team_id, active_members)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        team_indicators = self._generate_team_indicators(active_members, risk_distribution)
        workload_metrics = self._calculate_workload_metrics(active_members)
        hr_recommendations = await self._generate_hr_recommendations(
            active_members, team_alert_level, risk_distribution
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞
        intervention_priority = self._calculate_intervention_priority(
            team_alert_level, average_risk, len(high_risk_members)
        )
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        analytics = TeamAnalytics(
            team_id=team_id,
            team_name=team_name or f"Team {team_id}",
            analysis_timestamp=datetime.now(),
            total_members=len(members),
            active_members=len(active_members),
            average_risk_score=average_risk,
            team_alert_level=team_alert_level,
            risk_distribution=risk_distribution,
            high_risk_members=high_risk_members,
            trend_24h=trends.get("24h"),
            trend_7d=trends.get("7d"), 
            trend_30d=trends.get("30d"),
            team_indicators=team_indicators,
            workload_metrics=workload_metrics,
            hr_recommendations=hr_recommendations,
            intervention_priority=intervention_priority
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        self.analytics_cache[team_id] = (analytics, datetime.now())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        await self._save_to_history(team_id, analytics)
        
        return analytics
    
    def _determine_team_alert_level(
        self,
        members: List[TeamMember],
        average_risk: float,
        risk_distribution: Dict[BurnoutRiskLevel, int]
    ) -> TeamAlertLevel:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∞–ª–µ—Ä—Ç–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã."""
        
        total_members = len(members)
        critical_count = risk_distribution.get(BurnoutRiskLevel.CRITICAL, 0)
        high_count = risk_distribution.get(BurnoutRiskLevel.HIGH, 0)
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
        if critical_count > 0 or (high_count / total_members) > 0.5:
            return TeamAlertLevel.RED
        
        # –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
        if average_risk > 0.7 or (high_count / total_members) > 0.3:
            return TeamAlertLevel.ORANGE
        
        # –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è
        if average_risk > 0.5 or (high_count / total_members) > 0.1:
            return TeamAlertLevel.YELLOW
        
        # –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ
        return TeamAlertLevel.GREEN
    
    async def _analyze_team_trends(
        self, 
        team_id: str, 
        current_members: List[TeamMember]
    ) -> Dict[str, TeamBurnoutTrend]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã –∫–æ–º–∞–Ω–¥—ã."""
        
        trends = {}
        timeframes = ["24h", "7d", "30d"]
        
        for timeframe in timeframes:
            trend = await self._calculate_trend_for_timeframe(
                team_id, current_members, timeframe
            )
            if trend:
                trends[timeframe] = trend
        
        return trends
    
    async def _calculate_trend_for_timeframe(
        self,
        team_id: str,
        current_members: List[TeamMember],
        timeframe: str
    ) -> Optional[TeamBurnoutTrend]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞."""
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        if team_id not in self.historical_data:
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        hours_map = {"24h": 24, "7d": 168, "30d": 720}
        hours_back = hours_map.get(timeframe, 24)
        
        cutoff_time = datetime.now() - timedelta(hours=hours_back)
        
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Ç–æ—á–∫—É
        historical_analytics = None
        for analytics in reversed(self.historical_data[team_id]):
            if analytics.analysis_timestamp <= cutoff_time:
                historical_analytics = analytics
                break
        
        if not historical_analytics:
            return None
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        current_avg_risk = statistics.mean([m.current_risk_score for m in current_members])
        historical_avg_risk = historical_analytics.average_risk_score
        
        change_percentage = calculate_percentage_change(
            historical_avg_risk, current_avg_risk
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
        if abs(change_percentage) < 5:
            direction = TrendDirection.STABLE
        elif change_percentage > 0:
            direction = TrendDirection.DETERIORATING
        else:
            direction = TrendDirection.IMPROVING
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        current_high_risk = sum(1 for m in current_members 
                               if m.risk_level in [BurnoutRiskLevel.HIGH, BurnoutRiskLevel.CRITICAL])
        historical_high_risk = sum(historical_analytics.risk_distribution.get(level, 0) 
                                  for level in [BurnoutRiskLevel.HIGH, BurnoutRiskLevel.CRITICAL])
        
        affected_members = abs(current_high_risk - historical_high_risk)
        
        # –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤
        risk_distribution = {level: 0 for level in BurnoutRiskLevel}
        for member in current_members:
            risk_distribution[member.risk_level] += 1
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        key_factors = self._identify_trend_factors(
            current_members, historical_analytics, direction
        )
        
        return TeamBurnoutTrend(
            timeframe=timeframe,
            direction=direction,
            change_percentage=change_percentage,
            affected_members=affected_members,
            risk_distribution=risk_distribution,
            key_factors=key_factors
        )
    
    def _generate_team_indicators(
        self,
        members: List[TeamMember],
        risk_distribution: Dict[BurnoutRiskLevel, int]
    ) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã."""
        
        indicators = []
        total_members = len(members)
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤
        critical_ratio = risk_distribution.get(BurnoutRiskLevel.CRITICAL, 0) / total_members
        high_ratio = risk_distribution.get(BurnoutRiskLevel.HIGH, 0) / total_members
        
        if critical_ratio > 0:
            indicators.append(f"üö® {int(critical_ratio * 100)}% –∫–æ–º–∞–Ω–¥—ã –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
        
        if high_ratio > 0.3:
            indicators.append(f"‚ö†Ô∏è {int(high_ratio * 100)}% –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–æ–ª–µ–π
        role_risks = defaultdict(list)
        for member in members:
            role_risks[member.role].append(member.current_risk_score)
        
        for role, risks in role_risks.items():
            if len(risks) > 1 and statistics.mean(risks) > 0.6:
                indicators.append(f"üìã –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –≤ —Ä–æ–ª–∏: {role}")
        
        # –ê–Ω–∞–ª–∏–∑ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
        no_break_count = sum(1 for m in members if m.days_since_break > 7)
        if no_break_count > total_members * 0.3:
            indicators.append(f"‚è∞ {no_break_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞ >7 –¥–Ω–µ–π")
        
        return indicators if indicators else ["‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ"]
    
    def _calculate_workload_metrics(self, members: List[TeamMember]) -> Dict[str, float]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥—ã."""
        
        if not members:
            return {}
        
        risk_scores = [m.current_risk_score for m in members]
        break_days = [m.days_since_break for m in members]
        
        return {
            "average_workload_pressure": statistics.mean(risk_scores),
            "workload_variance": statistics.stdev(risk_scores) if len(risk_scores) > 1 else 0.0,
            "average_days_since_break": statistics.mean(break_days),
            "overworked_percentage": sum(1 for score in risk_scores if score > 0.7) / len(risk_scores),
            "burnout_distribution_index": len(set(m.risk_level for m in members)) / len(BurnoutRiskLevel)
        }
    
    async def _generate_hr_recommendations(
        self,
        members: List[TeamMember],
        alert_level: TeamAlertLevel,
        risk_distribution: Dict[BurnoutRiskLevel, int]
    ) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è HR."""
        
        recommendations = []
        total_members = len(members)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—é –∞–ª–µ—Ä—Ç–∞
        if alert_level == TeamAlertLevel.RED:
            recommendations.extend([
                "üö® –ö–†–ò–¢–ò–ß–ù–û: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞",
                "üìû –ü—Ä–æ–≤–µ—Å—Ç–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏",
                "‚è∞ –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –∏ –æ—Ç–ª–æ–∂–∏—Ç—å –Ω–µ—Å—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏",
                "üè• –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é"
            ])
        elif alert_level == TeamAlertLevel.ORANGE:
            recommendations.extend([
                "‚ö†Ô∏è –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏",
                "üìÖ –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø—Ä–æ–µ–∫—Ç–æ–≤",
                "üéØ –í–Ω–µ–¥—Ä–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –≤ —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å",
                "üë• –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"
            ])
        elif alert_level == TeamAlertLevel.YELLOW:
            recommendations.extend([
                "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ",
                "üí¨ –ü—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø—Ä–æ—Å –ø–æ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–æ–π",
                "üèÉ‚Äç‚ôÄÔ∏è –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–Ω—è—Ç–∏—è —Å—Ç—Ä–µ—Å—Å–∞",
                "üìö –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏–Ω–≥–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å—Ç—Ä–µ—Å—Å–æ–º"
            ])
        else:  # GREEN
            recommendations.extend([
                "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è",
                "üéâ –û—Ç–º–µ—Ç–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã",
                "üìà –ò–∑—É—á–∏—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Ç–∏—Ä–∞–∂–∏—Ä–æ–≤–∞–Ω–∏—è",
                "ü§ù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–æ–º–∞–Ω–¥–µ –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º –æ—Ç–¥–µ–ª–∞–º"
            ])
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∏—Å–∫–∞–º
        critical_count = risk_distribution.get(BurnoutRiskLevel.CRITICAL, 0)
        if critical_count > 0:
            recommendations.append(f"üî• {critical_count} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–ø—É—Å–∫–∞")
        
        high_count = risk_distribution.get(BurnoutRiskLevel.HIGH, 0)
        if high_count > total_members * 0.2:
            recommendations.append("üìã –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á")
        
        return recommendations[:6]  # –º–∞–∫—Å–∏–º—É–º 6 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    
    def _calculate_intervention_priority(
        self,
        alert_level: TeamAlertLevel,
        average_risk: float,
        high_risk_count: int
    ) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (1-5)."""
        
        priority = 1
        
        # –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —É—Ä–æ–≤–Ω—é –∞–ª–µ—Ä—Ç–∞
        if alert_level == TeamAlertLevel.RED:
            priority = 5
        elif alert_level == TeamAlertLevel.ORANGE:
            priority = 4
        elif alert_level == TeamAlertLevel.YELLOW:
            priority = 3
        else:
            priority = 2
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
        if average_risk > 0.8:
            priority = min(5, priority + 1)
        
        if high_risk_count > 3:
            priority = min(5, priority + 1)
        
        return priority
    
    def _identify_trend_factors(
        self,
        current_members: List[TeamMember],
        historical_analytics: TeamAnalytics,
        direction: TrendDirection
    ) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ç—Ä–µ–Ω–¥–∞."""
        
        factors = []
        
        if direction == TrendDirection.DETERIORATING:
            factors.extend([
                "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏",
                "–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Ç–¥—ã—Ö",
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
            ])
        elif direction == TrendDirection.IMPROVING:
            factors.extend([
                "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ä—ã –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é —Å—Ç—Ä–µ—Å—Å–∞",
                "–£–ª—É—á—à–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
                "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ"
            ])
        else:
            factors.append("–°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—á–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞")
        
        return factors
    
    async def _save_to_history(self, team_id: str, analytics: TeamAnalytics):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é."""
        
        if team_id not in self.historical_data:
            self.historical_data[team_id] = deque(maxlen=100)  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
        
        self.historical_data[team_id].append(analytics)
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        cutoff_date = datetime.now() - timedelta(days=self.data_retention_days)
        while (self.historical_data[team_id] and 
               self.historical_data[team_id][0].analysis_timestamp < cutoff_date):
            self.historical_data[team_id].popleft()


class DepartmentAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è –æ—Ç–¥–µ–ª–∞."""
    
    def __init__(self, team_analyzer: TeamBurnoutAnalyzer):
        self.team_analyzer = team_analyzer
        
    async def analyze_department(
        self,
        department_name: str,
        team_ids: List[str]
    ) -> Optional[DepartmentAnalytics]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
        
        team_analytics = []
        total_employees = 0
        critical_teams = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É
        for team_id in team_ids:
            analytics = await self.team_analyzer.analyze_team(team_id)
            if analytics:
                team_analytics.append(analytics)
                total_employees += analytics.active_members
                
                if analytics.team_alert_level in [TeamAlertLevel.RED, TeamAlertLevel.ORANGE]:
                    critical_teams.append(team_id)
        
        if not team_analytics:
            return None
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ –æ—Ç–¥–µ–ª–∞
        department_risk = statistics.mean([ta.average_risk_score for ta in team_analytics])
        
        # –ë–µ–Ω—á–º–∞—Ä–∫–∏ (–≤ production –±—É–¥—É—Ç –∏–∑ DB)
        benchmark_comparison = {
            "industry_average": 0.35,
            "company_average": 0.40,
            "department_score": department_risk
        }
        
        # –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
        best_practices = self._generate_best_practices(team_analytics)
        
        return DepartmentAnalytics(
            department_name=department_name,
            teams=team_analytics,
            total_employees=total_employees,
            average_department_risk=department_risk,
            critical_teams=critical_teams,
            benchmark_comparison=benchmark_comparison,
            best_practices=best_practices
        )
    
    def _generate_best_practices(self, team_analytics: List[TeamAnalytics]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∞–Ω–¥."""
        
        practices = []
        
        # –ù–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—ã —Å –Ω–∏–∑–∫–∏–º —Ä–∏—Å–∫–æ–º
        low_risk_teams = [ta for ta in team_analytics if ta.average_risk_score < 0.3]
        
        if low_risk_teams:
            practices.append("üèÜ –ò–∑—É—á–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Å –Ω–∏–∑–∫–∏–º —Ä–∏—Å–∫–æ–º –≤—ã–≥–æ—Ä–∞–Ω–∏—è")
            practices.append("üìã –¢–∏—Ä–∞–∂–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–æ–π")
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        practices.extend([
            "‚è∞ –í–Ω–µ–¥—Ä–∏—Ç—å –µ–¥–∏–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏",
            "üìä –†–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è",
            "üéØ –û–±—É—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–∏–∑–Ω–∞–∫–∞–º –≤—ã–≥–æ—Ä–∞–Ω–∏—è",
            "üí¨ –°–æ–∑–¥–∞–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä—ã –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–∞"
        ])
        
        return practices[:5]