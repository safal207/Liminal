# LIMINAL Backend Prototype
# –ü–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫: –ø—É–ª—å—Å -> Redis -> InfluxDB -> –∞–Ω–∞–ª–∏–∑ -> Neo4j/Datomic

import asyncio
import json
import logging
import random
import time
from datetime import datetime, timezone
from typing import Any, Dict, List, Optional


# Mock dependencies –¥–ª—è –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞
class MockRedis:
    def __init__(self):
        self.data = {}
        self.pubsub_channels = {}

    async def set(self, key: str, value: str):
        self.data[key] = value
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∏
        if key.startswith("biometric:"):
            await self.publish("biometric_stream", value)

    async def get(self, key: str) -> Optional[str]:
        return self.data.get(key)

    async def publish(self, channel: str, message: str):
        if channel in self.pubsub_channels:
            for callback in self.pubsub_channels[channel]:
                await callback(message)

    def subscribe(self, channel: str, callback):
        if channel not in self.pubsub_channels:
            self.pubsub_channels[channel] = []
        self.pubsub_channels[channel].append(callback)


class MockInfluxDB:
    def __init__(self):
        self.points = []

    async def write_point(
        self, measurement: str, tags: Dict, fields: Dict, timestamp: datetime
    ):
        point = {
            "measurement": measurement,
            "tags": tags,
            "fields": fields,
            "timestamp": timestamp.isoformat(),
        }
        self.points.append(point)
        print(f"üìä InfluxDB: {measurement} - {fields}")

    async def query_recent(self, measurement: str, limit: int = 10) -> List[Dict]:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è
        recent = [p for p in self.points if p["measurement"] == measurement][-limit:]
        return recent


class MockNeo4j:
    def __init__(self):
        self.nodes = {}
        self.relationships = []

    async def create_node(self, label: str, properties: Dict):
        node_id = f"{label}_{len(self.nodes)}"
        self.nodes[node_id] = {"label": label, "properties": properties}
        print(f"üß† Neo4j: –°–æ–∑–¥–∞–Ω —É–∑–µ–ª {label} - {properties}")
        return node_id

    async def create_relationship(
        self, from_node: str, to_node: str, rel_type: str, properties: Dict = None
    ):
        rel = {
            "from": from_node,
            "to": to_node,
            "type": rel_type,
            "properties": properties or {},
        }
        self.relationships.append(rel)
        print(f"üîó Neo4j: –°–≤—è–∑—å {rel_type}: {from_node} -> {to_node}")


class MockDatomic:
    def __init__(self):
        self.facts = []
        self.transaction_id = 0

    async def transact(self, facts: List[Dict]):
        self.transaction_id += 1
        timestamp = datetime.now(timezone.utc)

        for fact in facts:
            fact["tx_id"] = self.transaction_id
            fact["tx_time"] = timestamp
            self.facts.append(fact)

        print(f"üï∞Ô∏è Datomic: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {self.transaction_id} - {len(facts)} —Ñ–∞–∫—Ç–æ–≤")

    async def query_entity(self, entity_id: str) -> List[Dict]:
        return [f for f in self.facts if f.get("entity") == entity_id]


# Core Services


class BiometricService:
    """üíì Biometric Service - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–ª—å—Å–∞ –∏ –±–∏–æ–º–µ—Ç—Ä–∏–∫–∏"""

    def __init__(self, redis: MockRedis, influx: MockInfluxDB):
        self.redis = redis
        self.influx = influx
        self.user_sessions = {}

    async def process_heartrate(
        self, user_id: str, heart_rate: int, timestamp: datetime = None
    ):
        if timestamp is None:
            timestamp = datetime.now(timezone.utc)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        session_key = f"biometric:{user_id}:current"
        biometric_data = {
            "user_id": user_id,
            "heart_rate": heart_rate,
            "timestamp": timestamp.isoformat(),
            "type": "heartrate",
        }

        await self.redis.set(session_key, json.dumps(biometric_data))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ InfluxDB –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
        await self.influx.write_point(
            measurement="biometrics",
            tags={"user_id": user_id, "type": "heartrate"},
            fields={"value": heart_rate},
            timestamp=timestamp,
        )

        # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        await self._calculate_derived_metrics(user_id, heart_rate, timestamp)

        return biometric_data

    async def _calculate_derived_metrics(
        self, user_id: str, heart_rate: int, timestamp: datetime
    ):
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É–ª—å—Å–∞
        if heart_rate < 60:
            state = "relaxed"
            stress_level = max(0, 40 - heart_rate)
        elif heart_rate > 90:
            state = "excited"
            stress_level = min(100, heart_rate - 60)
        else:
            state = "normal"
            stress_level = abs(heart_rate - 75) * 2

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        await self.influx.write_point(
            measurement="psychological_state",
            tags={"user_id": user_id},
            fields={
                "state": state,
                "stress_level": stress_level,
                "coherence": random.uniform(0.3, 0.9),  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è HRV
            },
            timestamp=timestamp,
        )


class PythiaAI:
    """üß† –ü–∏—Ñ–∏—è AI - –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤"""

    def __init__(self, influx: MockInfluxDB, neo4j: MockNeo4j, datomic: MockDatomic):
        self.influx = influx
        self.neo4j = neo4j
        self.datomic = datomic
        self.pattern_threshold = 3  # –ú–∏–Ω–∏–º—É–º —Ç–æ—á–µ–∫ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞

    async def analyze_biometric_patterns(self, user_id: str) -> List[Dict]:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        recent_bio = await self.influx.query_recent("biometrics", limit=10)
        recent_psych = await self.influx.query_recent("psychological_state", limit=10)

        insights = []

        if len(recent_bio) >= self.pattern_threshold:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã –ø—É–ª—å—Å–∞
            heart_rates = [p["fields"]["value"] for p in recent_bio]
            insight = await self._analyze_heartrate_trend(user_id, heart_rates)
            if insight:
                insights.append(insight)

        if len(recent_psych) >= self.pattern_threshold:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            states = [p["fields"]["state"] for p in recent_psych]
            insight = await self._analyze_state_pattern(user_id, states)
            if insight:
                insights.append(insight)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å–∞–π—Ç—ã –≤ –≥—Ä–∞—Ñ –∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É
        for insight in insights:
            await self._store_insight(user_id, insight)

        return insights

    async def _analyze_heartrate_trend(
        self, user_id: str, heart_rates: List[int]
    ) -> Optional[Dict]:
        if len(heart_rates) < 3:
            return None

        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
        recent_avg = sum(heart_rates[-3:]) / 3
        older_avg = sum(heart_rates[:-3]) / max(1, len(heart_rates) - 3)

        if recent_avg - older_avg > 10:
            return {
                "type": "heartrate_spike",
                "message": "–ó–∞–º–µ—á–µ–Ω —Ä–µ–∑–∫–∏–π —Ä–æ—Å—Ç –ø—É–ª—å—Å–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Å–¥–µ–ª–∞—Ç—å –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö?",
                "confidence": 0.8,
                "data": {"trend": "increasing", "delta": recent_avg - older_avg},
            }
        elif older_avg - recent_avg > 10:
            return {
                "type": "heartrate_calm",
                "message": "–ü—É–ª—å—Å —É—Å–ø–æ–∫–∞–∏–≤–∞–µ—Ç—Å—è. –í—ã –≤—Ö–æ–¥–∏—Ç–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–∫–æ—è.",
                "confidence": 0.9,
                "data": {"trend": "decreasing", "delta": older_avg - recent_avg},
            }

        return None

    async def _analyze_state_pattern(
        self, user_id: str, states: List[str]
    ) -> Optional[Dict]:
        # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if len(states) < 3:
            return None

        # –ò—â–µ–º —Ü–∏–∫–ª—ã –∏–ª–∏ —É—Å—Ç–æ–π—á–∏–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if states[-3:] == ["excited", "normal", "relaxed"]:
            return {
                "type": "natural_cycle",
                "message": "–í—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ ‚Üí –Ω–æ—Ä–º–∞ ‚Üí –ø–æ–∫–æ–π. –û—Ç–ª–∏—á–Ω–∞—è —Å–∞–º–æ—Ä–µ–≥—É–ª—è—Ü–∏—è!",
                "confidence": 0.95,
                "data": {"pattern": "descending_cycle"},
            }

        if all(s == "relaxed" for s in states[-3:]):
            return {
                "type": "deep_relaxation",
                "message": "–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª—É–±–æ–∫–æ–≥–æ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è. –ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏–ª–∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞.",
                "confidence": 0.85,
                "data": {"pattern": "sustained_relaxation"},
            }

        return None

    async def _store_insight(self, user_id: str, insight: Dict):
        # –°–æ–∑–¥–∞–µ–º —É–∑–µ–ª –∏–Ω—Å–∞–π—Ç–∞ –≤ Neo4j
        insight_node = await self.neo4j.create_node(
            "Insight",
            {
                "type": insight["type"],
                "message": insight["message"],
                "confidence": insight["confidence"],
                "timestamp": datetime.now(timezone.utc).isoformat(),
            },
        )

        # –°–≤—è–∑—ã–≤–∞–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        user_node = f"Person_{user_id}"
        await self.neo4j.create_relationship(
            user_node,
            insight_node,
            "HAS_INSIGHT",
            {"created_at": datetime.now(timezone.utc).isoformat()},
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Datomic –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        await self.datomic.transact(
            [
                {
                    "entity": f"insight_{insight_node}",
                    "attribute": "insight/type",
                    "value": insight["type"],
                },
                {
                    "entity": f"insight_{insight_node}",
                    "attribute": "insight/message",
                    "value": insight["message"],
                },
                {
                    "entity": f"insight_{insight_node}",
                    "attribute": "insight/user",
                    "value": user_id,
                },
                {
                    "entity": f"insight_{insight_node}",
                    "attribute": "insight/confidence",
                    "value": insight["confidence"],
                },
            ]
        )


class MorpheusNavigator:
    """üåå –ú–æ—Ä—Ñ–µ—É—Å - –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤"""

    def __init__(self, neo4j: MockNeo4j, datomic: MockDatomic):
        self.neo4j = neo4j
        self.datomic = datomic

    async def suggest_transition(
        self, user_id: str, current_insights: List[Dict]
    ) -> Optional[Dict]:
        if not current_insights:
            return None

        # –ù–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Å–∞–π—Ç–æ–≤ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã
        latest_insight = current_insights[-1]

        transitions = {
            "heartrate_spike": {
                "action": "breathing_exercise",
                "message": "–†–µ–∫–æ–º–µ–Ω–¥—É—é —Ç–µ—Ö–Ω–∏–∫—É 4-7-8: –≤–¥–æ—Ö –Ω–∞ 4, –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 7, –≤—ã–¥–æ—Ö –Ω–∞ 8",
                "duration_minutes": 5,
            },
            "heartrate_calm": {
                "action": "mindful_moment",
                "message": "–û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è mindfulness –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏–ª–∏ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã",
                "duration_minutes": 10,
            },
            "deep_relaxation": {
                "action": "meditation_or_creation",
                "message": "–í—Ö–æ–¥–∏—Ç–µ –≤ –ø–æ—Ç–æ–∫. –í—Ä–µ–º—è –¥–ª—è –≥–ª—É–±–æ–∫–æ–π –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏–ª–∏ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞",
                "duration_minutes": 20,
            },
            "natural_cycle": {
                "action": "observe_and_integrate",
                "message": "–ü–æ–Ω–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ —Å–≤–æ–∏–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ä–∏—Ç–º–æ–º. –ö–∞–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤—ã –∑–∞–º–µ—á–∞–µ—Ç–µ?",
                "duration_minutes": 3,
            },
        }

        transition = transitions.get(latest_insight["type"])
        if transition:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
            await self._store_transition(user_id, transition, latest_insight)

        return transition

    async def _store_transition(
        self, user_id: str, transition: Dict, triggering_insight: Dict
    ):
        # –°–æ–∑–¥–∞–µ–º —É–∑–µ–ª –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ Neo4j
        transition_node = await self.neo4j.create_node(
            "Transition",
            {
                "action": transition["action"],
                "message": transition["message"],
                "duration_minutes": transition["duration_minutes"],
                "timestamp": datetime.now(timezone.utc).isoformat(),
            },
        )

        # –°–≤—è–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –∏–Ω—Å–∞–π—Ç–æ–º
        user_node = f"Person_{user_id}"
        await self.neo4j.create_relationship(
            user_node, transition_node, "SUGGESTED_TRANSITION"
        )


# API Gateway Mock
class LiminalGateway:
    """üåâ API Gateway - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"""

    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        self.redis = MockRedis()
        self.influx = MockInfluxDB()
        self.neo4j = MockNeo4j()
        self.datomic = MockDatomic()

        self.biometric = BiometricService(self.redis, self.influx)
        self.pythia = PythiaAI(self.influx, self.neo4j, self.datomic)
        self.morpheus = MorpheusNavigator(self.neo4j, self.datomic)

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–∫
        self.redis.subscribe("biometric_stream", self._on_biometric_data)

    async def _on_biometric_data(self, message: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        data = json.loads(message)
        user_id = data["user_id"]

        print(f"üîî –ù–æ–≤—ã–µ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {user_id}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã (–∏–º–∏—Ç–∞—Ü–∏—è real-time –æ–±—Ä–∞–±–æ—Ç–∫–∏)
        await asyncio.sleep(2)
        await self._trigger_analysis(user_id)

    async def _trigger_analysis(self, user_id: str):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤"""
        print(f"\nüß† –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –ü–∏—Ñ–∏—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        insights = await self.pythia.analyze_biometric_patterns(user_id)

        if insights:
            print(f"üí° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–Ω—Å–∞–π—Ç–æ–≤: {len(insights)}")
            for insight in insights:
                print(f"   - {insight['message']}")

            # –ú–æ—Ä—Ñ–µ—É—Å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥—ã
            transition = await self.morpheus.suggest_transition(user_id, insights)
            if transition:
                print(f"üöÄ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥: {transition['action']}")
                print(f"   {transition['message']}")
        else:
            print("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

    # Public API methods

    async def submit_heartrate(self, user_id: str, heart_rate: int):
        """–í–Ω–µ—à–Ω–∏–π API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—É–ª—å—Å–∞"""
        print(f"\nüì± –ü–æ–ª—É—á–µ–Ω –ø—É–ª—å—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {heart_rate} BPM")
        return await self.biometric.process_heartrate(user_id, heart_rate)

    async def get_user_insights(self, user_id: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–Ω—Å–∞–π—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self.datomic.query_entity(f"insight_{user_id}")


# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
async def demo_full_flow():
    """üé≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ LIMINAL"""

    print("üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LIMINAL Gateway...")
    gateway = LiminalGateway()

    print("\n" + "=" * 60)
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–õ–ù–û–ì–û –ü–û–¢–û–ö–ê: –ø—É–ª—å—Å -> –∏–Ω—Å–∞–π—Ç -> –ø–µ—Ä–µ—Ö–æ–¥")
    print("=" * 60)

    user_id = "demo_user"

    # –°–æ–∑–¥–∞–µ–º —É–∑–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await gateway.neo4j.create_node("Person", {"user_id": user_id, "name": "Demo User"})

    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–π –ø—É–ª—å—Å–∞
    heartrate_sequence = [
        (85, "–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"),
        (95, "–ù–µ–±–æ–ª—å—à–æ–µ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ"),
        (105, "–ü–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"),
        (90, "–ù–∞—á–∞–ª–æ —É—Å–ø–æ–∫–æ–µ–Ω–∏—è"),
        (75, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–æ—Ä–º–µ"),
        (65, "–ì–ª—É–±–æ–∫–æ–µ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ"),
        (60, "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∫–æ—è"),
    ]

    for i, (hr, description) in enumerate(heartrate_sequence):
        print(f"\nüìç –®–∞–≥ {i+1}: {description}")
        await gateway.submit_heartrate(user_id, hr)

        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
        await asyncio.sleep(3)

        if i >= 2:  # –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞...")
            await asyncio.sleep(2)

    print(f"\nüèÅ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –í—Å–µ–≥–æ —Ç–æ—á–µ–∫ –≤ InfluxDB: {len(gateway.influx.points)}")
    print(f"üß† –£–∑–ª–æ–≤ –≤ Neo4j: {len(gateway.neo4j.nodes)}")
    print(f"üï∞Ô∏è –§–∞–∫—Ç–æ–≤ –≤ Datomic: {len(gateway.datomic.facts)}")


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)

    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    asyncio.run(demo_full_flow())
