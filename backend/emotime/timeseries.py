"""
üåø‚ú® Emotime Time Series ‚Äî –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã —ç–º–æ—Ü–∏–π

–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä—è–¥–∞–º–∏:
- –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ EWMA
- –î–µ—Ç–µ–∫—Ü–∏—è –ø–∏–∫–æ–≤ –∏ —Ç—Ä–µ–Ω–¥–æ–≤
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —à—É–º–æ–≤
- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω–æ–≥–æ —Å–ª–µ–¥–∞

"–í—Ä–µ–º—è —Ç–µ—á–µ—Ç —á–µ—Ä–µ–∑ —ç–º–æ—Ü–∏–∏, –æ—Å—Ç–∞–≤–ª—è—è —Å–ª–µ–¥—ã –Ω–∞ –∫–∞—Ä—Ç–µ –¥—É—à–∏"
"""

import numpy as np
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Any, Tuple
from collections import deque
import asyncio


@dataclass
class EmotionalPoint:
    """–¢–æ—á–∫–∞ –≤ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ä—è–¥—É."""
    timestamp: datetime
    valence: float      # -1.0 to 1.0
    arousal: float      # 0.0 to 1.0  
    dominance: float    # 0.0 to 1.0
    tempo: float        # 0.0 to 1.0
    intensity: float    # 0.0 to 1.0
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    smoothed_valence: float = None
    smoothed_arousal: float = None
    trend: str = None              # "rising", "falling", "stable"
    is_peak: bool = False          # –ø–∏–∫ —ç–º–æ—Ü–∏–π
    confidence: float = 1.0


@dataclass 
class TrendAnalysis:
    """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ä—è–¥—É."""
    direction: str      # "rising", "falling", "stable", "volatile"
    strength: float     # 0.0 to 1.0 - —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞
    duration: int       # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –≤ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–Ω–¥–µ
    volatility: float   # 0.0 to 1.0 - –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å


class EmotionalTimeSeries:
    """
    –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ –¥–ª—è —ç–º–æ—Ü–∏–π.
    
    –†–µ–∞–ª–∏–∑—É–µ—Ç:
    - EWMA —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ (–∞–Ω–∞–ª–æ–≥ Mojo-—è–¥—Ä–∞)
    - –î–µ—Ç–µ–∫—Ü–∏—é –ø–∏–∫–æ–≤ –∏ —Ç—Ä–µ–Ω–¥–æ–≤
    - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—é —à—É–º–æ–≤
    - –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    """
    
    def __init__(
        self,
        max_points: int = 1000,        # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –≤ –ø–∞–º—è—Ç–∏
        ewma_alpha: float = 0.3,       # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç EWMA —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
        peak_threshold: float = 0.15,   # –ø–æ—Ä–æ–≥ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–∏–∫–æ–≤
        trend_window: int = 5          # –æ–∫–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
    ):
        self.max_points = max_points
        self.ewma_alpha = ewma_alpha
        self.peak_threshold = peak_threshold
        self.trend_window = trend_window
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ—á–µ–∫
        self.points: deque[EmotionalPoint] = deque(maxlen=max_points)
        
        # –°–≥–ª–∞–∂–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (EWMA)
        self.smoothed_valence: Optional[float] = None
        self.smoothed_arousal: Optional[float] = None
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        self.current_trend: Optional[TrendAnalysis] = None
        
    def add_point(self, point: EmotionalPoint):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Ç–æ—á–∫—É –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥.
        
        –í—ã–ø–æ–ª–Ω—è–µ—Ç:
        1. EWMA —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
        2. –î–µ—Ç–µ–∫—Ü–∏—é –ø–∏–∫–æ–≤
        3. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        """
        
        # 1. –ü—Ä–∏–º–µ–Ω—è–µ–º EWMA —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
        self._apply_ewma_smoothing(point)
        
        # 2. –î–µ—Ç–µ–∫—Ü–∏—è –ø–∏–∫–æ–≤
        self._detect_peaks(point)
        
        # 3. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        self._analyze_trends(point)
        
        # 4. –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        self.points.append(point)
        
        # 5. –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        self._update_trend_analysis()
    
    def _apply_ewma_smoothing(self, point: EmotionalPoint):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç EWMA —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ (–∞–Ω–∞–ª–æ–≥ Mojo-—è–¥—Ä–∞)."""
        
        alpha = self.ewma_alpha
        
        if self.smoothed_valence is None:
            # –ü–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            self.smoothed_valence = point.valence
            self.smoothed_arousal = point.arousal
        else:
            # EWMA —Ñ–æ—Ä–º—É–ª–∞: S_t = Œ± * X_t + (1-Œ±) * S_{t-1}
            self.smoothed_valence = alpha * point.valence + (1 - alpha) * self.smoothed_valence
            self.smoothed_arousal = alpha * point.arousal + (1 - alpha) * self.smoothed_arousal
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–ª–∞–∂–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–æ—á–∫—É
        point.smoothed_valence = self.smoothed_valence
        point.smoothed_arousal = self.smoothed_arousal
    
    def _detect_peaks(self, point: EmotionalPoint):
        """–î–µ—Ç–µ–∫—Ü–∏—è –ø–∏–∫–æ–≤ —ç–º–æ—Ü–∏–π."""
        
        if len(self.points) < 2:
            return
            
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        recent_points = list(self.points)[-3:] + [point]
        
        if len(recent_points) >= 3:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è —Ç–æ—á–∫–∞ –ø–∏–∫–æ–º
            values = [p.smoothed_valence or p.valence for p in recent_points]
            
            # –ü–∏–∫ = –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—à–µ/–Ω–∏–∂–µ —Å–æ—Å–µ–¥–Ω–∏—Ö –Ω–∞ threshold
            current_idx = len(values) - 1
            if current_idx > 0 and current_idx < len(values) - 1:
                prev_val = values[current_idx - 1]
                curr_val = values[current_idx]
                
                # –ü–∏–∫ –≤–≤–µ—Ä—Ö –∏–ª–∏ –≤–Ω–∏–∑
                if abs(curr_val - prev_val) > self.peak_threshold:
                    point.is_peak = True
    
    def _analyze_trends(self, point: EmotionalPoint):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ –¥–ª—è —Ç–æ—á–∫–∏."""
        
        if len(self.points) < self.trend_window:
            point.trend = "stable"
            return
            
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏
        recent_points = list(self.points)[-(self.trend_window-1):] + [point]
        values = [p.smoothed_valence or p.valence for p in recent_points]
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ —á–µ—Ä–µ–∑ –Ω–∞–∫–ª–æ–Ω
        if len(values) >= 3:
            # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–∫–ª–æ–Ω–∞
            x = np.arange(len(values))
            slope = np.polyfit(x, values, 1)[0]
            
            if slope > 0.05:
                point.trend = "rising"
            elif slope < -0.05:
                point.trend = "falling"
            else:
                point.trend = "stable"
        else:
            point.trend = "stable"
    
    def _update_trend_analysis(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤."""
        
        if len(self.points) < self.trend_window * 2:
            return
            
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        recent_points = list(self.points)[-self.trend_window * 2:]
        valences = [p.smoothed_valence or p.valence for p in recent_points]
        arousals = [p.smoothed_arousal or p.arousal for p in recent_points]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥ –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        x = np.arange(len(valences))
        slope = np.polyfit(x, valences, 1)[0]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if abs(slope) < 0.02:
            direction = "stable"
        elif slope > 0.02:
            direction = "rising"
        else:
            direction = "falling"
            
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
        volatility = min(np.std(valences), 1.0)
        
        # –ï—Å–ª–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ "volatile"
        if volatility > 0.3:
            direction = "volatile"
            
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞
        duration = 1
        if self.current_trend and self.current_trend.direction == direction:
            duration = self.current_trend.duration + 1
            
        # –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ = –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–∫–ª–æ–Ω–∞
        strength = min(abs(slope) * 10, 1.0)
        
        self.current_trend = TrendAnalysis(
            direction=direction,
            strength=strength,
            duration=duration,
            volatility=volatility
        )
    
    def get_recent_points(self, limit: int = None) -> List[EmotionalPoint]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏."""
        points_list = list(self.points)
        if limit:
            return points_list[-limit:]
        return points_list
    
    def get_peaks(self, limit: int = 10) -> List[EmotionalPoint]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–∏–∫–∏ —ç–º–æ—Ü–∏–π."""
        peaks = [p for p in self.points if p.is_peak]
        return peaks[-limit:] if limit else peaks
    
    def get_trend_analysis(self, window: int = None) -> Optional[TrendAnalysis]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞."""
        return self.current_trend
    
    def get_emotional_baseline(self) -> Dict[str, float]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–∑–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        
        if len(self.points) < 10:
            return {
                "baseline_valence": 0.0,
                "baseline_arousal": 0.5,
                "baseline_intensity": 0.3
            }
            
        # –ë–µ—Ä–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –±–∞–∑–∏—Å–∞
        valences = [p.valence for p in self.points]
        arousals = [p.arousal for p in self.points]
        intensities = [p.intensity for p in self.points]
        
        return {
            "baseline_valence": np.mean(valences),
            "baseline_arousal": np.mean(arousals), 
            "baseline_intensity": np.mean(intensities),
            "valence_std": np.std(valences),
            "arousal_std": np.std(arousals),
            "total_points": len(self.points)
        }
    
    def detect_emotional_patterns(self) -> List[Dict[str, Any]]:
        """–î–µ—Ç–µ–∫—Ü–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤."""
        
        patterns = []
        
        if len(self.points) < 20:
            return patterns
            
        # –ü–∞—Ç—Ç–µ—Ä–Ω 1: –¶–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å (–≤–æ–ª–Ω—ã —ç–º–æ—Ü–∏–π)
        valences = [p.valence for p in self.points[-50:]]  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Ç–æ—á–µ–∫
        
        # –ü—Ä–æ—Å—Ç–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è —Ü–∏–∫–ª–æ–≤ —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
        if len(valences) >= 20:
            # –ò—â–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å 
            autocorr = np.correlate(valences, valences, mode='full')
            autocorr = autocorr[autocorr.size // 2:]
            
            # –ò—â–µ–º –ø–∏–∫–∏ –≤ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (—É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å)
            if len(autocorr) > 10:
                peak_indices = []
                for i in range(2, len(autocorr) - 2):
                    if (autocorr[i] > autocorr[i-1] and 
                        autocorr[i] > autocorr[i+1] and 
                        autocorr[i] > 0.3):
                        peak_indices.append(i)
                        
                if peak_indices:
                    patterns.append({
                        "type": "cyclical",
                        "period": peak_indices[0] if peak_indices else None,
                        "strength": max(autocorr[peak_indices]) if peak_indices else 0,
                        "description": "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å –≤ —ç–º–æ—Ü–∏—è—Ö"
                    })
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω 2: –ì—Ä–∞–¥—É–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if self.current_trend and self.current_trend.duration > 10:
            patterns.append({
                "type": "gradual_change",
                "direction": self.current_trend.direction,
                "duration": self.current_trend.duration,
                "strength": self.current_trend.strength,
                "description": f"–î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥: {self.current_trend.direction}"
            })
            
        # –ü–∞—Ç—Ç–µ—Ä–Ω 3: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
        recent_valences = [p.valence for p in self.points[-20:]]
        if len(recent_valences) >= 10:
            stability = 1.0 - min(np.std(recent_valences), 1.0)
            if stability > 0.8:
                patterns.append({
                    "type": "stability",
                    "level": stability,
                    "description": "–í—ã—Å–æ–∫–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å"
                })
        
        return patterns
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è API."""
        
        recent_points = self.get_recent_points(10)
        peaks = self.get_peaks(5)
        baseline = self.get_emotional_baseline()
        patterns = self.detect_emotional_patterns()
        
        return {
            "total_points": len(self.points),
            "recent_points": [
                {
                    "timestamp": p.timestamp.isoformat(),
                    "valence": p.valence,
                    "arousal": p.arousal,
                    "smoothed_valence": p.smoothed_valence,
                    "trend": p.trend,
                    "is_peak": p.is_peak
                }
                for p in recent_points
            ],
            "peaks": [
                {
                    "timestamp": p.timestamp.isoformat(),
                    "valence": p.valence,
                    "arousal": p.arousal,
                    "intensity": p.intensity
                }
                for p in peaks
            ],
            "current_trend": {
                "direction": self.current_trend.direction,
                "strength": self.current_trend.strength,
                "duration": self.current_trend.duration,
                "volatility": self.current_trend.volatility
            } if self.current_trend else None,
            "baseline": baseline,
            "patterns": patterns,
            "smoothed_state": {
                "valence": self.smoothed_valence,
                "arousal": self.smoothed_arousal
            } if self.smoothed_valence is not None else None
        }