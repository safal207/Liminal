#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç WebSocket –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É Python
"""

import asyncio
import json
import time
from concurrent.futures import ThreadPoolExecutor

import websockets


async def test_websocket_connection():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...")

    try:
        async with websockets.connect("ws://localhost:8000/ws/test_user") as websocket:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
            subscribe_msg = {
                "type": "subscribe",
                "user_id": "test_user",
                "channel": "test_channel",
            }
            await websocket.send(json.dumps(subscribe_msg))
            print("üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª")

            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
            response = await asyncio.wait_for(websocket.recv(), timeout=5)
            print(f"üì© –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            chat_msg = {
                "type": "message",
                "user_id": "test_user",
                "channel": "test_channel",
                "message": {"text": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "timestamp": time.time()},
            }
            await websocket.send(json.dumps(chat_msg))
            print("üí¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç")

            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
            response = await asyncio.wait_for(websocket.recv(), timeout=5)
            print(f"üì© –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def test_multiple_users():
    """–¢–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...")

    async def user_session(user_id, message_to_send=None):
        try:
            async with websockets.connect(
                f"ws://localhost:8000/ws/{user_id}"
            ) as websocket:
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
                subscribe_msg = {
                    "type": "subscribe",
                    "user_id": user_id,
                    "channel": "general",
                }
                await websocket.send(json.dumps(subscribe_msg))

                # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
                await asyncio.wait_for(websocket.recv(), timeout=5)
                print(f"‚úÖ {user_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª")

                if message_to_send:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    chat_msg = {
                        "type": "message",
                        "user_id": user_id,
                        "channel": "general",
                        "message": {"text": message_to_send, "timestamp": time.time()},
                    }
                    await websocket.send(json.dumps(chat_msg))
                    print(f"üí¨ {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª: {message_to_send}")

                # –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è 5 —Å–µ–∫—É–Ω–¥
                try:
                    for _ in range(3):
                        response = await asyncio.wait_for(websocket.recv(), timeout=2)
                        data = json.loads(response)
                        if data.get("type") == "message":
                            print(f"üì© {user_id} –ø–æ–ª—É—á–∏–ª: {data}")
                except asyncio.TimeoutError:
                    pass

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {user_id}: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    tasks = [
        user_session("alice", "–ü—Ä–∏–≤–µ—Ç –æ—Ç Alice!"),
        user_session("bob", "–ü—Ä–∏–≤–µ—Ç –æ—Ç Bob!"),
        user_session("charlie"),  # –¢–æ–ª—å–∫–æ —Å–ª—É—à–∞–µ—Ç
    ]

    await asyncio.gather(*tasks)


async def test_metrics():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏"""
    print("\nüîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏...")

    import urllib.request

    try:
        with urllib.request.urlopen("http://localhost:8001/metrics") as response:
            metrics = response.read().decode()

        # –ò—â–µ–º WebSocket –º–µ—Ç—Ä–∏–∫–∏
        lines = metrics.split("\n")
        ws_connections = [
            line
            for line in lines
            if "websocket_connections_total" in line and not line.startswith("#")
        ]
        ws_messages = [
            line
            for line in lines
            if "websocket_messages_total" in line and not line.startswith("#")
        ]

        print("üìä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:")
        for line in ws_connections:
            print(f"  {line}")

        print("üìä WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:")
        for line in ws_messages:
            print(f"  {line}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ WebSocket —Å–µ—Ä–≤–µ—Ä–∞")
    print("=" * 50)

    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await test_websocket_connection()

    # –¢–µ—Å—Ç 2: –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await test_multiple_users()

    # –¢–µ—Å—Ç 3: –ú–µ—Ç—Ä–∏–∫–∏
    await test_metrics()

    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")


if __name__ == "__main__":
    asyncio.run(main())
