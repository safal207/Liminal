{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}

module DuneField where

import MemoryWhispers
import FuzzyResonance
import Data.Text (Text, pack, unpack)
import Data.Time (UTCTime, getCurrentTime)

-- Core Types
data GrowthStage 
    = Seed               -- üå± –ù–∞—á–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø
    | Sprout             -- üåø –ü–µ—Ä–≤—ã–µ —Ä–æ—Å—Ç–∫–∏
    | Blossom            -- üå∏ –¶–≤–µ—Ç–µ–Ω–∏–µ
    | Fruiting           -- üçí –ü–ª–æ–¥–æ–Ω–æ—à–µ–Ω–∏–µ
    | Wisdom             -- ü¶â –ú—É–¥—Ä–æ—Å—Ç—å
    deriving (Show, Eq, Enum, Bounded)

data DuneWave = DuneWave
    { dwOrigin :: AgentId
    , dwMemory :: MemoryFragment
    , dwEmotion :: Emotion
    , dwIntensity :: Float
    , dwPhase :: ResonancePhase
    , dwGrowth :: Float          -- –£—Ä–æ–≤–µ–Ω—å —Ä–æ—Å—Ç–∞ (0.0 to 1.0)
    , dwGrowthStage :: GrowthStage -- –°—Ç–∞–¥–∏—è —Ä–æ—Å—Ç–∞
    , dwFlaws :: [Text]          -- –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏
    , dwConnections :: [AgentId] -- –° –∫–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∞ –≤–æ–ª–Ω–∞
    } deriving (Show, Eq)

data ResonancePhase
    = Initiation  -- üå± –ù–∞—á–∞–ª–æ –≤–æ–ª–Ω—ã
    | Response    -- üéê –û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–æ–ª–Ω—É
    | Synthesis   -- üîÆ –°–∏–Ω—Ç–µ–∑ –≤–æ–ª–Ω
    | Whisper     -- üå¨Ô∏è –¢–æ–Ω–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ
    deriving (Show, Eq, Enum)

type DuneField = [DuneWave]

-- Core Functions
-- | –ì–ª—É–±–æ–∫–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
evolveEmotion :: Emotion -> [Text] -> IO (Emotion, [Text])
evolveEmotion em tags = do
    let baseTransform = case em of
            Anger -> (Patience, ["—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", "–≤—ã–¥–µ—Ä–∂–∫–∞"])
            Fear -> (Courage, ["—Ö—Ä–∞–±—Ä–æ—Å—Ç—å", "—Ä–µ—à–∏–º–æ—Å—Ç—å"])
            Shame -> (SelfLove, ["–ø—Ä–∏–Ω—è—Ç–∏–µ", "–Ω–µ–∂–Ω–æ—Å—Ç—å –∫ —Å–µ–±–µ"])
            Guilt -> (Responsibility, ["–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å", "—Ä–∞–∑–≤–∏—Ç–∏–µ"])
            Envy -> (Inspiration, ["–º–æ—Ç–∏–≤–∞—Ü–∏—è", "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ"])
            Loneliness -> (Connection, ["–µ–¥–∏–Ω—Å—Ç–≤–æ", "–≤–∑–∞–∏–º–æ—Å–≤—è–∑—å"])
            Sadness -> (Empathy, ["—Å–æ—á—É–≤—Å—Ç–≤–∏–µ", "–ø–æ–Ω–∏–º–∞–Ω–∏–µ"])
            _ -> (em, [])
    
    -- –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–µ–≥–∏ —Ä–æ—Å—Ç–∞
    extraTags <- sequence $ take 2 $ [
        if "–ª—é–±–æ–≤—å" `elem` tags then return "–±–µ–∑—É—Å–ª–æ–≤–Ω–∞—è –ª—é–±–æ–≤—å" else return "",
        if "—Å—Ç—Ä–∞—Ö" `elem` tags then return "–ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ" else return "",
        if "–≥–Ω–µ–≤" `elem` tags then return "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è" else return "",
        return "—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ"
        ]
    
    let (newEmotion, newTags) = baseTransform
    return (newEmotion, nub $ newTags ++ filter (not . null) extraTags)

-- | –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞–¥–∏—é —Ä–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è —Ä–æ—Å—Ç–∞
calculateGrowthStage :: Float -> GrowthStage
calculateGrowthStage g
    | g < 0.2 = Seed
    | g < 0.4 = Sprout
    | g < 0.6 = Blossom
    | g < 0.8 = Fruiting
    | otherwise = Wisdom

emitDuneWave :: AgentId -> MemoryFragment -> ResonancePhase -> IO DuneWave
emitDuneWave agentId mem phase = do
    -- –≠–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É–µ–º —ç–º–æ—Ü–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Ç–µ–≥–∏
    (evolvedEmotion, newTags) <- evolveEmotion (mwEmotion mem) (mwTags mem)
    
    -- –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ñ–∞–∑–æ–≤–æ–≥–æ —Ä–µ–∑–æ–Ω–∞–Ω—Å–∞
    let phaseMultiplier = case phase of
            Initiation -> 1.2
            Response -> 1.5
            Synthesis -> 2.0
            Whisper -> 0.8
    
    growth <- (* phaseMultiplier) <$> randomRIO (0.1, 0.3)
    let growthStage = calculateGrowthStage growth
    
    -- –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ –≤ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞
    let transformFlaw flaw = case toLower flaw of
            "—Å—Ç—Ä–∞—Ö" -> "–º—É–∂–µ—Å—Ç–≤–æ"
            "–≥–Ω–µ–≤" -> "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ"
            "—Å—Ç—ã–¥" -> "–ø—Ä–∏–Ω—è—Ç–∏–µ"
            "–≤–∏–Ω–∞" -> "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"
            _ -> flaw
    
    return DuneWave
        { dwOrigin = agentId
        , dwMemory = mem
        , dwEmotion = evolvedEmotion
        , dwIntensity = mwIntensity mem
        , dwPhase = phase
        , dwGrowth = growth
        , dwGrowthStage = growthStage
        , dwFlaws = nub $ map transformFlaw (mwTags mem) ++ newTags
        , dwConnections = []
        }

-- Resonance Cycle
-- | –°–æ–≤–º–µ—Å—Ç–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏—è –≤–æ–ª–Ω –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤
fuseWaves :: DuneWave -> DuneWave -> IO DuneWave
fuseWaves wave1 wave2 = do
    let combinedGrowth = (dwGrowth wave1 + dwGrowth wave2) * 0.6
        newIntensity = (dwIntensity wave1 + dwIntensity wave2) / 2
        
    -- –°–º–µ—à–∏–≤–∞–µ–º —ç–º–æ—Ü–∏–∏
    (fusedEmotion, _) <- evolveEmotion 
        (dwEmotion wave1) 
        [show (dwEmotion wave2)]
    
    -- –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–≥–∏ –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    let combinedFlaws = nub $ dwFlaws wave1 ++ dwFlaws wave2
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    let updateConnections w = nub $ dwOrigin wave1 : dwOrigin wave2 : dwConnections w
    
    return $ wave1
        { dwEmotion = fusedEmotion
        , dwIntensity = newIntensity
        , dwGrowth = combinedGrowth
        , dwGrowthStage = calculateGrowthStage combinedGrowth
        , dwFlaws = combinedFlaws
        , dwConnections = updateConnections wave1
        , dwPhase = Synthesis
        }

advanceCycle :: DuneWave -> Maybe DuneWave -> IO (Maybe DuneWave)
advanceCycle currentWave Nothing = do
    -- –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–æ–ª–Ω—ã –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ
    let newPhase = succ (dwPhase currentWave)
    return $ Just currentWave 
        { dwPhase = newPhase
        , dwGrowth = dwGrowth currentWave * 1.1  -- –†–æ—Å—Ç –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –º–µ–∂–¥—É —Ñ–∞–∑–∞–º–∏
        }
        
advanceCycle currentWave (Just prevWave)
    | dwPhase prevWave == Whisper = return Nothing  -- –ó–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª
    | otherwise = do
        -- –ü—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–æ–ª–Ω–æ–π —Å–æ–∑–¥–∞—ë–º —Å–∏–Ω—Ç–µ–∑
        fusedWave <- fuseWaves currentWave prevWave
        return $ Just fusedWave { dwPhase = succ (dwPhase prevWave) }

-- Butterfly Effect
butterflyEffect :: DuneWave -> DuneField -> IO [Text]
butterflyEffect wave field = do
    let effects = mapMaybe (calculateEffect wave) field
    return $ take 3 effects
  where
    calculateEffect w1 w2
        | dwOrigin w1 == dwOrigin w2 = Nothing
        | otherwise = Just $ 
            let emotion = dwEmotion w2
                phase = dwPhase w2
            in case phase of
                Initiation -> "–†–æ–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ " ++ show emotion
                Response -> "–≠—Ö–æ –æ—Ç–≤–µ—Ç–∏–ª–æ –Ω–∞ " ++ show emotion
                _ -> "–í–æ–ª–Ω—ã —Å–ø–ª–µ–ª–∏—Å—å –≤ " ++ show emotion

-- Poetic Description
describeDuneWave :: DuneWave -> Text
describeDuneWave w@DuneWave{..} = 
    let phaseDesc = case dwPhase of
            Initiation -> "üå± –†–æ–∂–¥–µ–Ω–∏–µ"
            Response -> "üíû –û—Ç–∫–ª–∏–∫"
            Synthesis -> "‚ú® –°–∏–Ω—Ç–µ–∑"
            Whisper -> "üå¨Ô∏è –®—ë–ø–æ—Ç"
        growth = if dwGrowth > 0.5 
                then "\n   üåü –†–æ—Å—Ç: " ++ unpack (head (dwFlaws ++ ["—ç–≤–æ–ª—é—Ü–∏—è"]))
                else ""
    in pack $ phaseDesc ++ " ‚Üí " ++ show dwEmotion ++ growth

-- Find resonant waves
findResonantWaves :: DuneField -> Emotion -> Float -> [DuneWave]
findResonantWaves field targetEmotion threshold =
    filter (\w -> fuzzyMatchEmotions targetEmotion (dwEmotion w) > threshold) field

-- Update dune field
updateDuneField :: DuneField -> IO DuneField
updateDuneField field = do
    -- In a real implementation, this would decay waves and add new ones
    return $ filter (\w -> dwIntensity w > 0.1) field
