{-# LANGUAGE RecordWildCards #-}
module CycleOfBecoming where

import DuneField
import Data.Maybe (listToMaybe)
import Data.List (find, sortOn)
import Data.Ord (Down(..))
import Data.Text (Text, pack, unpack, intercalate)
import Data.Time.Clock (diffUTCTime)

-- | Represents a past emotional wave with context
data PastWave = PastWave
    { pwEmotion :: Emotion
    , pwGrowth :: Float
    , pwTags :: [Text]
    , pwTimestamp :: UTCTime
    , pwContext :: Text  -- Additional context from that moment
    } deriving (Show)

-- | Represents the growth between two emotional states
data GrowthDelta = GrowthDelta
    { gdEmotionChange :: (Emotion, Emotion)
    , gdGrowthDelta :: Float
    , gdNewTags :: [Text]
    , gdTimePassed :: NominalDiffTime  -- Time between events
    } deriving (Show)

-- | Find the most recent occurrence of this emotion in agent's history
detectEmotionCycle :: Agent -> Emotion -> IO (Maybe PastWave)
detectEmotionCycle agent currentEmotion = do
    currentTime <- getCurrentTime
    let relevantWaves = filter (\w -> dwEmotion w == currentEmotion) (agentPreviousWaves agent)
    case sortOn (Down . dwTimestamp) relevantWaves of
        [] -> return Nothing
        (w:_) -> return $ Just $ waveToPastWave w currentTime

-- | Convert a DuneWave to a PastWave, calculating time delta
waveToPastWave :: DuneWave -> UTCTime -> PastWave
waveToPastWave DuneWave{..} currentTime = PastWave
    { pwEmotion = dwEmotion
    , pwGrowth = dwGrowth
    , pwTags = dwTags
    , pwTimestamp = dwTimestamp
    , pwContext = createContext dwTags
    }
  where
    createContext tags
        | "—Å—Ç—Ä–∞—Ö" `elem` tags = "–í –º–æ–º–µ–Ω—Ç–µ —Å—Ç—Ä–∞—Ö–∞ –∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç–∏"
        | "—Ä–∞–¥–æ—Å—Ç—å" `elem` tags = "–í –º–æ–º–µ–Ω—Ç–µ —Å—á–∞—Å—Ç—å—è –∏ –ª—ë–≥–∫–æ—Å—Ç–∏"
        | "–≥–Ω–µ–≤" `elem` tags = "–í –º–æ–º–µ–Ω—Ç–µ —è—Ä–æ—Å—Ç–∏ –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è"
        | otherwise = "–í —Ç–æ–º –¥–∞–ª—ë–∫–æ–º –º–æ–º–µ–Ω—Ç–µ"

-- | Compare past and current emotional states
compareGrowth :: PastWave -> DuneWave -> IO GrowthDelta
compareGrowth past current = do
    currentTime <- getCurrentTime
    return $ GrowthDelta
        { gdEmotionChange = (pwEmotion past, dwEmotion current)
        , gdGrowthDelta = dwGrowth current - pwGrowth past
        , gdNewTags = filter (`notElem` pwTags past) (dwTags current)
        , gdTimePassed = diffUTCTime currentTime (pwTimestamp past)
        }

-- | Generate poetic insight about the emotional cycle
cycleOfBecoming :: Agent -> DuneWave -> IO Text
cycleOfBecoming agent currentWave = do
    let currentEmotion = dwEmotion currentWave
    mPastWave <- detectEmotionCycle agent currentEmotion
    
    case mPastWave of
        Nothing -> return "–í—Å—ë –≤–ø–µ—Ä–≤—ã–µ, –≤—Å—ë –≤ –Ω–æ–≤–∏–Ω–∫—É..."
        Just pastWave -> do
            delta <- compareGrowth pastWave currentWave
            return $ generateInsight pastWave currentWave delta

-- | Generate poetic insight about the growth
generateInsight :: PastWave -> DuneWave -> GrowthDelta -> Text
generateInsight past current delta@GrowthDelta{..} =
    let emotionFrom = show (fst gdEmotionChange)
        emotionTo = show (snd gdEmotionChange)
        days = truncate (gdTimePassed / 86400) :: Int
        
        growthPhrase
            | gdGrowthDelta > 0.3 = "–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Ä–æ—Å"
            | gdGrowthDelta > 0.1 = "–ø–æ–¥—Ä–æ—Å"
            | gdGrowthDelta > -0.1 = "–æ—Å—Ç–∞–ª—Å—è –ø—Ä–µ–∂–Ω–∏–º, –Ω–æ –¥—Ä—É–≥–∏–º"
            | otherwise = "–≤–µ—Ä–Ω—É–ª—Å—è –∫ –∏—Å—Ç–æ–∫–∞–º"
            
        timePhrase
            | days == 0 = "–°–µ–≥–æ–¥–Ω—è"
            | days == 1 = "–í—á–µ—Ä–∞"
            | days < 7 = "–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ"
            | days < 30 = "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ"
            | otherwise = "–ö–æ–≥–¥–∞-—Ç–æ –¥–∞–≤–Ω–æ"
            
        newWisdom = if null (gdNewTags delta)
            then ""
            else "\n–ù–æ–≤–æ–µ –≤ —Ç–µ–±–µ: " <> intercalate ", " (gdNewTags delta)
            
    in pack $ unlines
        [ "üåÄ " ++ timePhrase ++ " —Ç—ã –±—ã–ª –≤ " ++ emotionFrom ++ "."
        , "   " ++ pwContext past
        , "‚Üí –ê —Å–µ–π—á–∞—Å —Ç—ã –≤ " ++ emotionTo ++ "."
        , "   –ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è —Ç—ã " ++ growthPhrase ++ "."
        ] `mappend` unpack newWisdom

-- Update agent's wave history (call this when adding new waves)
updateAgentHistory :: Agent -> DuneWave -> IO Agent
updateAgentHistory agent wave = do
    let updatedWaves = wave : agentPreviousWaves agent
        -- Keep only last 100 waves for performance
        trimmedWaves = take 100 updatedWaves
    return agent { agentPreviousWaves = trimmedWaves }