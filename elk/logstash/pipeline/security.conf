input {
  beats {
    port => 5044
  }
  tcp {
    port => 5000
    codec => json
  }
  udp {
    port => 5000
    codec => json
  }
}

filter {
  if [type] == "security" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} \[%{DATA:service}\] %{GREEDYDATA:message}" }
    }
    
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
    
    if [log_level] == "ERROR" or [log_level] == "CRITICAL" {
      mutate {
        add_field => { "alert_level" => "high" }
      }
    }
  }

  if [type] == "auth" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{WORD:auth_result} login attempt from %{IP:source_ip} for user %{WORD:username}" }
    }
    
    if [auth_result] == "FAILED" {
      mutate {
        add_field => { "alert_type" => "potential_breach" }
      }
    }
  }

  if [type] == "rbac" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} RBAC: %{WORD:action} %{WORD:resource} by user %{WORD:username} with role %{WORD:role}" }
    }
  }
}

output {
  if [type] == "security" or [alert_level] == "high" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "security-logs-%{+YYYY.MM.dd}"
      user => "elastic"
      password => "${ELASTIC_PASSWORD}"
    }
  }
  
  if [alert_type] == "potential_breach" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "security-alerts-%{+YYYY.MM.dd}"
      user => "elastic"
      password => "${ELASTIC_PASSWORD}"
    }
    
    webhook {
      url => "http://alert-manager:9093/api/v1/alerts"
      format => "json"
      http_method => "post"
    }
  }
}
