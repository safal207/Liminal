"""
üöÄüõ°Ô∏è BurnoutGuard Recommendations Engine ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–°–∏—Å—Ç–µ–º–∞ —É–º–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≤—ã–≥–æ—Ä–∞–Ω–∏—è:
- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ML –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

"–ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–≥–æ—Ä–∞–Ω–∏–∏ –≤ –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã" ‚ú®
"""

import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass
from enum import Enum
import random

from .core import BurnoutState, BurnoutRisk
from .modes import BurnoutModeType, BurnoutRiskLevel
from .utils import safe_logger, get_time_of_day_category, is_working_hours


class RecommendationType(Enum):
    """–¢–∏–ø—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
    IMMEDIATE_ACTION = "immediate"     # –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    SHORT_TERM = "short_term"         # –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ (1-4 —á–∞—Å–∞)
    DAILY_ROUTINE = "daily"           # –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
    WEEKLY_PLANNING = "weekly"        # –Ω–µ–¥–µ–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    LIFESTYLE = "lifestyle"           # –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏


@dataclass
class Recommendation:
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    id: str
    type: RecommendationType
    title: str
    description: str
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    priority: int              # 1-5 (5 = —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π)
    estimated_time: int        # –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
    difficulty: str            # easy, medium, hard
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    applicable_risk_levels: List[BurnoutRiskLevel]
    applicable_modes: List[BurnoutModeType]
    time_sensitive: bool = False
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
    user_preferences: List[str] = None
    effectiveness_score: float = 1.0  # 0.0-1.0
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    usage_count: int = 0
    success_rate: float = 0.0
    last_used: Optional[datetime] = None


class RecommendationEngine:
    """
    –î–≤–∏–∂–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
    
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–≥–æ—Ä–∞–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç
    —Ü–µ–ª–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∏.
    """
    
    def __init__(self, user_id: str):
        self.user_id = user_id
        
        # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        self.recommendations_db = self._initialize_recommendations()
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.user_preferences = self._load_user_preferences()
        self.effectiveness_history: Dict[str, List[float]] = {}
        self.context_factors: Dict[str, Any] = {}
        
    def _initialize_recommendations(self) -> List[Recommendation]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
        
        recommendations = []
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —Ä–∏—Å–∫–µ
        recommendations.extend([
            Recommendation(
                id="critical_break_now",
                type=RecommendationType.IMMEDIATE_ACTION,
                title="üö® –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤",
                description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ —Å–¥–µ–ª–∞–π—Ç–µ 15-–º–∏–Ω—É—Ç–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤. –í—ã–π–¥–∏—Ç–µ –∏–∑-–∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.",
                priority=5,
                estimated_time=15,
                difficulty="easy",
                applicable_risk_levels=[BurnoutRiskLevel.CRITICAL, BurnoutRiskLevel.HIGH],
                applicable_modes=[BurnoutModeType.EMOTIONAL_EXHAUSTION, BurnoutModeType.CRISIS],
                time_sensitive=True
            ),
            Recommendation(
                id="breathing_exercise",
                type=RecommendationType.IMMEDIATE_ACTION,
                title="ü´Å –î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞",
                description="4-7-8 –¥—ã—Ö–∞–Ω–∏–µ: –≤–¥–æ—Ö 4 —Å–µ–∫, –∑–∞–¥–µ—Ä–∂–∫–∞ 7 —Å–µ–∫, –≤—ã–¥–æ—Ö 8 —Å–µ–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å 4 —Ä–∞–∑–∞.",
                priority=4,
                estimated_time=5,
                difficulty="easy",
                applicable_risk_levels=[BurnoutRiskLevel.HIGH, BurnoutRiskLevel.CRITICAL],
                applicable_modes=list(BurnoutModeType),
                time_sensitive=True
            )
        ])
        
        # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        recommendations.extend([
            Recommendation(
                id="hydration_reminder",
                type=RecommendationType.SHORT_TERM,
                title="üíß –£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ",
                description="–í—ã–ø–µ–π—Ç–µ —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –∏ —Å—ä–µ—à—å—Ç–µ —á—Ç–æ-—Ç–æ –ª–µ–≥–∫–æ–µ. –û–±–µ–∑–≤–æ–∂–∏–≤–∞–Ω–∏–µ —É—Å–∏–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä–µ—Å—Å.",
                priority=3,
                estimated_time=5,
                difficulty="easy",
                applicable_risk_levels=[BurnoutRiskLevel.MEDIUM, BurnoutRiskLevel.HIGH],
                applicable_modes=[BurnoutModeType.OVERWORK, BurnoutModeType.EMOTIONAL_EXHAUSTION]
            ),
            Recommendation(
                id="task_prioritization",
                type=RecommendationType.SHORT_TERM,
                title="üìù –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á",
                description="–í—ã–±–µ—Ä–∏—Ç–µ 3 —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.",
                priority=4,
                estimated_time=10,
                difficulty="medium",
                applicable_risk_levels=[BurnoutRiskLevel.MEDIUM, BurnoutRiskLevel.HIGH],
                applicable_modes=[BurnoutModeType.OVERWORK, BurnoutModeType.INEFFICACY]
            )
        ])
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
        recommendations.extend([
            Recommendation(
                id="micro_breaks",
                type=RecommendationType.DAILY_ROUTINE,
                title="‚è∞ –ú–∏–∫—Ä–æ-–ø–µ—Ä–µ—Ä—ã–≤—ã",
                description="–ö–∞–∂–¥—ã–µ 25 –º–∏–Ω—É—Ç –¥–µ–ª–∞–π—Ç–µ 5-–º–∏–Ω—É—Ç–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É Pomodoro.",
                priority=3,
                estimated_time=5,
                difficulty="medium",
                applicable_risk_levels=[BurnoutRiskLevel.LOW, BurnoutRiskLevel.MEDIUM],
                applicable_modes=[BurnoutModeType.OVERWORK, BurnoutModeType.HEALTHY]
            ),
            Recommendation(
                id="gratitude_practice",
                type=RecommendationType.DAILY_ROUTINE,
                title="üôè –ü—Ä–∞–∫—Ç–∏–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏",
                description="–ü–µ—Ä–µ–¥ —Å–Ω–æ–º –∑–∞–ø–∏—à–∏—Ç–µ 3 –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã —Å–µ–≥–æ–¥–Ω—è.",
                priority=2,
                estimated_time=5,
                difficulty="easy",
                applicable_risk_levels=[BurnoutRiskLevel.LOW, BurnoutRiskLevel.MEDIUM],
                applicable_modes=[BurnoutModeType.CYNICISM, BurnoutModeType.INEFFICACY]
            )
        ])
        
        return recommendations
    
    def _load_user_preferences(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è."""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        return {
            "preferred_break_activities": ["walk", "meditation", "tea"],
            "work_style": "focused_sessions",
            "notification_frequency": "moderate",
            "exercise_preference": "light",
            "social_preference": "moderate"
        }
    
    async def get_recommendations(
        self, 
        burnout_state: BurnoutState,
        context: Optional[Dict[str, Any]] = None
    ) -> List[Recommendation]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
        
        Args:
            burnout_state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–≥–æ—Ä–∞–Ω–∏—è
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–≤—Ä–µ–º—è, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ç.–¥.)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        """
        
        context = context or {}
        self.context_factors.update(context)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
        applicable = self._filter_applicable_recommendations(burnout_state)
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        personalized = self._personalize_recommendations(applicable, burnout_state)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        sorted_recs = self._sort_recommendations(personalized, burnout_state)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–º–∞–∫—Å–∏–º—É–º 5)
        final_recommendations = sorted_recs[:5]
        
        safe_logger.debug(f"Generated {len(final_recommendations)} recommendations for user {self.user_id}")
        return final_recommendations
    
    def _filter_applicable_recommendations(self, burnout_state: BurnoutState) -> List[Recommendation]:
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –ø—Ä–∏–º–µ–Ω–∏–º—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
        
        applicable = []
        risk_level = burnout_state.risk_assessment.level
        burnout_mode = burnout_state.burnout_mode.type
        
        for rec in self.recommendations_db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å –ø–æ —É—Ä–æ–≤–Ω—é —Ä–∏—Å–∫–∞
            if risk_level in rec.applicable_risk_levels:
                applicable.append(rec)
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å –ø–æ —Ä–µ–∂–∏–º—É –≤—ã–≥–æ—Ä–∞–Ω–∏—è
            if burnout_mode in rec.applicable_modes:
                applicable.append(rec)
        
        return applicable
    
    def _personalize_recommendations(
        self, 
        recommendations: List[Recommendation],
        burnout_state: BurnoutState
    ) -> List[Recommendation]:
        """–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        
        personalized = []
        current_hour = datetime.now().hour
        
        for rec in recommendations:
            # –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            pers_rec = rec
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ –≤—Ä–µ–º—è –¥–Ω—è
            if rec.time_sensitive:
                if not is_working_hours(current_hour) and rec.type == RecommendationType.IMMEDIATE_ACTION:
                    pers_rec.title = f"üåô {rec.title} (–≤–µ—á–µ—Ä–Ω—è—è –≤–µ—Ä—Å–∏—è)"
                    pers_rec.description = self._adapt_for_evening(rec.description)
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            if "meditation" in self.user_preferences.get("preferred_break_activities", []):
                if "breathing" in rec.description.lower():
                    pers_rec.effectiveness_score *= 1.2
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if rec.id in self.effectiveness_history:
                avg_effectiveness = sum(self.effectiveness_history[rec.id]) / len(self.effectiveness_history[rec.id])
                pers_rec.effectiveness_score = avg_effectiveness
            
            personalized.append(pers_rec)
        
        return personalized
    
    def _sort_recommendations(
        self, 
        recommendations: List[Recommendation],
        burnout_state: BurnoutState
    ) -> List[Recommendation]:
        """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏."""
        
        def recommendation_score(rec: Recommendation) -> float:
            score = 0.0
            
            # –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            score += rec.priority * 20
            
            # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            score += rec.effectiveness_score * 15
            
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            if rec.time_sensitive and burnout_state.risk_assessment.level in [BurnoutRiskLevel.HIGH, BurnoutRiskLevel.CRITICAL]:
                score += 25
            
            # –ü—Ä–æ—Å—Ç–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            difficulty_bonus = {"easy": 10, "medium": 5, "hard": 0}
            score += difficulty_bonus.get(rec.difficulty, 0)
            
            # –ß–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ)
            if rec.usage_count > 3:
                score -= 5  # —Å–Ω–∏–∂–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö
            
            # –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if rec.last_used:
                days_since = (datetime.now() - rec.last_used).days
                score += min(days_since * 2, 10)  # –º–∞–∫—Å–∏–º—É–º +10 –∑–∞ –Ω–æ–≤–∏–∑–Ω—É
            
            return score
        
        return sorted(recommendations, key=recommendation_score, reverse=True)
    
    def _adapt_for_evening(self, description: str) -> str:
        """–ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."""
        
        adaptations = {
            "–í—ã–π–¥–∏—Ç–µ –∏–∑-–∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞": "–û—Ç–æ–π–¥–∏—Ç–µ –æ—Ç —ç–∫—Ä–∞–Ω–æ–≤ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫–æ —Å–Ω—É",
            "—Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤": "—Å–¥–µ–ª–∞–π—Ç–µ —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –ø–µ—Ä–µ—Ä—ã–≤",
            "–∑–∞–¥–∞—á–∏": "–∑–∞–≤—Ç—Ä–∞—à–Ω–∏–µ –∑–∞–¥–∞—á–∏"
        }
        
        adapted = description
        for old, new in adaptations.items():
            adapted = adapted.replace(old, new)
        
        return adapted
    
    async def track_recommendation_outcome(
        self, 
        recommendation_id: str, 
        effectiveness_rating: float,
        completed: bool = True
    ):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        for rec in self.recommendations_db:
            if rec.id == recommendation_id:
                rec.usage_count += 1
                rec.last_used = datetime.now()
                
                if completed:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    if recommendation_id not in self.effectiveness_history:
                        self.effectiveness_history[recommendation_id] = []
                    
                    self.effectiveness_history[recommendation_id].append(effectiveness_rating)
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 –∑–∞–ø–∏—Å—è–º–∏
                    if len(self.effectiveness_history[recommendation_id]) > 10:
                        self.effectiveness_history[recommendation_id] = self.effectiveness_history[recommendation_id][-10:]
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π success rate
                    total_ratings = len(self.effectiveness_history[recommendation_id])
                    successful_ratings = sum(1 for r in self.effectiveness_history[recommendation_id] if r >= 0.6)
                    rec.success_rate = successful_ratings / total_ratings
                
                break
        
        safe_logger.debug(f"Tracked outcome for recommendation {recommendation_id}: effectiveness={effectiveness_rating}, completed={completed}")
    
    async def get_daily_recommendations(self, burnout_state: BurnoutState) -> List[Recommendation]:
        """–ü–æ–ª—É—á–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
        
        daily_recs = [rec for rec in self.recommendations_db if rec.type == RecommendationType.DAILY_ROUTINE]
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        personalized = self._personalize_recommendations(daily_recs, burnout_state)
        sorted_recs = self._sort_recommendations(personalized, burnout_state)
        
        return sorted_recs[:3]  # –º–∞–∫—Å–∏–º—É–º 3 –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
    
    async def get_emergency_recommendations(self, burnout_state: BurnoutState) -> List[Recommendation]:
        """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π."""
        
        emergency_recs = [
            rec for rec in self.recommendations_db 
            if (rec.type == RecommendationType.IMMEDIATE_ACTION and 
                rec.time_sensitive and
                BurnoutRiskLevel.CRITICAL in rec.applicable_risk_levels)
        ]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        return sorted(emergency_recs, key=lambda x: x.priority, reverse=True)[:3]