"""
üåø‚ú® Emotime Sensors ‚Äî –≥–ª–∞–∑–∞, —É—à–∏ –∏ –∫–æ–∂–∞ —Å–∏—Å—Ç–µ–º—ã

–°–µ–Ω—Å–æ—Ä–Ω—ã–π —Å–ª–æ–π –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
- TextSensor: –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —ç–º–æ—Ü–∏–∏
- TouchSensor: –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–∞—Å–∞–Ω–∏–π –∏ —Ç–∞–∫—Ç–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ  
- AudioSensor: –∞–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
"""

import time
from dataclasses import dataclass
from datetime import datetime
from typing import Dict, List, Optional, Any, Union
from enum import Enum

import re


class SensorType(Enum):
    """–¢–∏–ø—ã —Å–µ–Ω—Å–æ—Ä–æ–≤."""
    TEXT = "text"
    TOUCH = "touch"
    AUDIO = "audio"


@dataclass
class SensorData:
    """–ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ–Ω—Å–æ—Ä–∞."""
    sensor_type: SensorType
    timestamp: datetime
    raw_data: Any
    metadata: Dict[str, Any]


@dataclass
class TextData:
    """–î–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–µ–Ω—Å–æ—Ä–∞."""
    text: str
    word_count: int
    char_count: int
    typing_speed: Optional[float] = None  # —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
    pause_duration: Optional[float] = None  # —Å–µ–∫—É–Ω–¥—ã –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏


@dataclass 
class TouchData:
    """–î–∞–Ω–Ω—ã–µ —Å–µ–Ω—Å–æ—Ä–∞ –∫–∞—Å–∞–Ω–∏–π."""
    pressure: float  # 0.0-1.0
    duration: float  # —Å–µ–∫—É–Ω–¥—ã
    frequency: float  # –∫–∞—Å–∞–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
    pattern: str  # "tap", "swipe", "hold", "gesture"
    coordinates: Optional[tuple] = None  # (x, y) –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ


@dataclass
class AudioData:
    """–î–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ —Å–µ–Ω—Å–æ—Ä–∞."""
    pitch_mean: float  # —Å—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞ –≥–æ–ª–æ—Å–∞
    pitch_variance: float  # –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ–Ω–∞
    speech_rate: float  # —Å–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É
    volume_level: float  # 0.0-1.0
    pause_ratio: float  # –¥–æ–ª—è –ø–∞—É–∑ –≤ —Ä–µ—á–∏
    emotion_markers: List[str]  # ["stress", "joy", "fatigue"]


class TextSensor:
    """
    –°–µ–Ω—Å–æ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –≤ —Ç–µ–∫—Å—Ç–µ:
    - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã
    - –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–µ—á–∞—Ç–∏ (—Å–∫–æ—Ä–æ—Å—Ç—å, –ø–∞—É–∑—ã)
    - –°—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    """
    
    # –°–ª–æ–≤–∞—Ä–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
    POSITIVE_WORDS = {
        "—Ä–∞–¥–æ—Å—Ç—å", "—Å—á–∞—Å—Ç—å–µ", "–≤–æ—Å—Ç–æ—Ä–≥", "–ª—é–±–æ–≤—å", "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ", "–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å",
        "success", "joy", "happy", "love", "amazing", "wonderful", "great",
        "–æ–≥–æ–Ω—å", "—Å—É–ø–µ—Ä", "–∫–ª–∞—Å—Å", "–∫—Ä—É—Ç–æ", "–æ—Ç–ª–∏—á–Ω–æ", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ"
    }
    
    NEGATIVE_WORDS = {
        "–≥—Ä—É—Å—Ç—å", "–ø–µ—á–∞–ª—å", "–±–æ–ª—å", "—Å—Ç—Ä–∞—Ö", "—Ç—Ä–µ–≤–æ–≥–∞", "—Å—Ç—Ä–µ—Å—Å", "—É—Å—Ç–∞–ª–æ—Å—Ç—å",
        "sad", "pain", "fear", "stress", "tired", "anxious", "worried",
        "–ø–ª–æ—Ö–æ", "—É–∂–∞—Å–Ω–æ", "–∫–æ—à–º–∞—Ä", "–±–µ–¥–∞", "–ø—Ä–æ–±–ª–µ–º–∞", "—Å–ª–æ–∂–Ω–æ"
    }
    
    CALM_WORDS = {
        "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", "–º–∏—Ä", "—Ç–∏—à–∏–Ω–∞", "–±–∞–ª–∞–Ω—Å", "–≥–∞—Ä–º–æ–Ω–∏—è", "–º–µ–¥–∏—Ç–∞—Ü–∏—è",
        "peace", "calm", "quiet", "balance", "meditation", "relax",
        "—Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ", "—Ç–∏—Ö–æ", "—É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–Ω–æ"
    }
    
    INTENSITY_MARKERS = {
        "–æ—á–µ–Ω—å", "–∫—Ä–∞–π–Ω–µ", "–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ", "—Å—É–ø–µ—Ä", "–º–µ–≥–∞", "–æ—Ñ–∏–≥–∏—Ç–µ–ª—å–Ω–æ",
        "extremely", "incredibly", "totally", "absolutely", "fucking",
        "!!!", "???", "CAPS"
    }
    
    def __init__(self):
        self.last_message_time: Optional[datetime] = None
        
    async def process(self, text: str, metadata: Dict = None) -> SensorData:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        if metadata is None:
            metadata = {}
            
        timestamp = datetime.now()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        pause_duration = None
        if self.last_message_time:
            pause_duration = (timestamp - self.last_message_time).total_seconds()
        self.last_message_time = timestamp
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text_data = TextData(
            text=text,
            word_count=len(text.split()),
            char_count=len(text),
            typing_speed=metadata.get("typing_speed"),
            pause_duration=pause_duration
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        emotion_analysis = self._analyze_emotions(text)
        metadata.update(emotion_analysis)
        
        return SensorData(
            sensor_type=SensorType.TEXT,
            timestamp=timestamp,
            raw_data=text_data,
            metadata=metadata
        )
    
    def _analyze_emotions(self, text: str) -> Dict[str, float]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –≤ —Ç–µ–∫—Å—Ç–µ."""
        text_lower = text.lower()
        words = re.findall(r'\b\w+\b', text_lower)
        
        if not words:
            return {"valence": 0.0, "arousal": 0.0, "intensity": 0.0}
            
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        positive_count = sum(1 for word in words if word in self.POSITIVE_WORDS)
        negative_count = sum(1 for word in words if word in self.NEGATIVE_WORDS)  
        calm_count = sum(1 for word in words if word in self.CALM_WORDS)
        intensity_count = sum(1 for word in words if word in self.INTENSITY_MARKERS)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
        if "!" in text:
            intensity_count += text.count("!")
        if text.isupper() and len(text) > 5:
            intensity_count += 2
        if "?" in text:
            intensity_count += text.count("?") * 0.5
            
        total_words = len(words)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å (-1.0 to 1.0)
        if positive_count + negative_count > 0:
            valence = (positive_count - negative_count) / (positive_count + negative_count)
        else:
            valence = 0.0
            
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ
        if calm_count > 0:
            calm_influence = min(calm_count / total_words * 2, 0.5)
            valence = valence * (1 - calm_influence) + 0.3 * calm_influence
            
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ (0.0 to 1.0)
        arousal = min((positive_count + negative_count + intensity_count) / total_words * 2, 1.0)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å (0.0 to 1.0)
        intensity = min(intensity_count / total_words * 3, 1.0)
        
        return {
            "valence": max(-1.0, min(1.0, valence)),
            "arousal": max(0.0, min(1.0, arousal)), 
            "intensity": max(0.0, min(1.0, intensity))
        }


class TouchSensor:
    """
    –°–µ–Ω—Å–æ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∫–∞—Å–∞–Ω–∏–π.
    
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–∫—Ç–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
    - –î–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞—Å–∞–Ω–∏–π
    - –ß–∞—Å—Ç–æ—Ç—É –∏ —Ä–∏—Ç–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    - –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∂–µ—Å—Ç–æ–≤
    """
    
    def __init__(self, baseline_pressure: float = 0.5):
        self.baseline_pressure = baseline_pressure
        self.touch_history: List[TouchData] = []
        
    async def process(
        self, 
        pressure: float,
        duration: float, 
        pattern: str = "tap",
        coordinates: tuple = None,
        metadata: Dict = None
    ) -> SensorData:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Å–∞–Ω–∏—è."""
        if metadata is None:
            metadata = {}
            
        timestamp = datetime.now()
        
        # –í—ã—á–∏—Å–ª—è–µ–º —á–∞—Å—Ç–æ—Ç—É –∫–∞—Å–∞–Ω–∏–π (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É)
        one_minute_ago = timestamp.timestamp() - 60
        recent_touches = [
            touch for touch in self.touch_history
            if touch.duration > one_minute_ago
        ]
        frequency = len(recent_touches)
        
        touch_data = TouchData(
            pressure=pressure,
            duration=duration,
            frequency=frequency,
            pattern=pattern,
            coordinates=coordinates
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä)
        self.touch_history.append(touch_data)
        if len(self.touch_history) > 100:
            self.touch_history = self.touch_history[-50:]
            
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—Å–∞–Ω–∏—è
        emotion_analysis = self._analyze_touch_emotions(touch_data)
        metadata.update(emotion_analysis)
        
        return SensorData(
            sensor_type=SensorType.TOUCH,
            timestamp=timestamp,
            raw_data=touch_data,
            metadata=metadata
        )
    
    def _analyze_touch_emotions(self, touch: TouchData) -> Dict[str, float]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—Å–∞–Ω–∏—è."""
        
        # –í–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å: –º—è–≥–∫–∏–µ –∫–∞—Å–∞–Ω–∏—è = –ø–æ–∑–∏—Ç–∏–≤, —Ä–µ–∑–∫–∏–µ = –Ω–µ–≥–∞—Ç–∏–≤
        if touch.pressure < self.baseline_pressure * 0.7:
            valence = 0.3  # –º—è–≥–∫–∏–µ –∫–∞—Å–∞–Ω–∏—è
        elif touch.pressure > self.baseline_pressure * 1.5:
            valence = -0.2  # —Ä–µ–∑–∫–∏–µ –∫–∞—Å–∞–Ω–∏—è
        else:
            valence = 0.0
            
        # –í–æ–∑–±—É–∂–¥–µ–Ω–∏–µ: —á–∞—Å—Ç–æ—Ç–∞ –∫–∞—Å–∞–Ω–∏–π –∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
        arousal = min(touch.frequency / 30.0, 1.0)  # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 30 –∫–∞—Å–∞–Ω–∏—è–º –≤ –º–∏–Ω—É—Ç—É
        arousal += min(touch.pressure, 1.0) * 0.3
        
        # –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: –¥–∞–≤–ª–µ–Ω–∏–µ + –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        intensity = (touch.pressure + min(touch.duration, 5.0) / 5.0) / 2.0
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –∫–∞—Å–∞–Ω–∏–π –≤–ª–∏—è–µ—Ç –Ω–∞ —ç–º–æ—Ü–∏–∏
        pattern_modifiers = {
            "tap": {"valence": 0.1, "arousal": 0.1},
            "swipe": {"valence": 0.0, "arousal": 0.3}, 
            "hold": {"valence": 0.2, "arousal": -0.1},
            "gesture": {"valence": 0.3, "arousal": 0.2}
        }
        
        if touch.pattern in pattern_modifiers:
            mod = pattern_modifiers[touch.pattern]
            valence += mod["valence"]
            arousal += mod["arousal"]
            
        return {
            "valence": max(-1.0, min(1.0, valence)),
            "arousal": max(0.0, min(1.0, arousal)),
            "intensity": max(0.0, min(1.0, intensity))
        }


class AudioSensor:
    """
    –°–µ–Ω—Å–æ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.
    
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ:
    - –¢–æ–Ω –∏ –∏–Ω—Ç–æ–Ω–∞—Ü–∏—é
    - –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏
    - –ü–∞—É–∑—ã –∏ —Ä–∏—Ç–º
    - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –≤ –≥–æ–ª–æ—Å–µ
    """
    
    def __init__(self):
        self.baseline_pitch = 150.0  # Hz
        self.baseline_rate = 150.0   # —Å–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É
        
    async def process(
        self,
        pitch_mean: float,
        pitch_variance: float,
        speech_rate: float, 
        volume_level: float,
        pause_ratio: float,
        emotion_markers: List[str] = None,
        metadata: Dict = None
    ) -> SensorData:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ."""
        if metadata is None:
            metadata = {}
        if emotion_markers is None:
            emotion_markers = []
            
        timestamp = datetime.now()
        
        audio_data = AudioData(
            pitch_mean=pitch_mean,
            pitch_variance=pitch_variance, 
            speech_rate=speech_rate,
            volume_level=volume_level,
            pause_ratio=pause_ratio,
            emotion_markers=emotion_markers
        )
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–æ–ª–æ—Å–∞
        emotion_analysis = self._analyze_voice_emotions(audio_data)
        metadata.update(emotion_analysis)
        
        return SensorData(
            sensor_type=SensorType.AUDIO,
            timestamp=timestamp,
            raw_data=audio_data,
            metadata=metadata
        )
    
    def _analyze_voice_emotions(self, audio: AudioData) -> Dict[str, float]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≥–æ–ª–æ—Å–∞."""
        
        # –í–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–Ω–∞ –∏ –º–∞—Ä–∫–µ—Ä–æ–≤
        valence = 0.0
        if audio.pitch_mean > self.baseline_pitch * 1.1:
            valence += 0.2  # –≤—ã—Å–æ–∫–∏–π —Ç–æ–Ω = –ø–æ–∑–∏—Ç–∏–≤
        elif audio.pitch_mean < self.baseline_pitch * 0.9:
            valence -= 0.1  # –Ω–∏–∑–∫–∏–π —Ç–æ–Ω = –Ω–µ–≥–∞—Ç–∏–≤
            
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        positive_markers = {"joy", "happiness", "excitement", "confidence"}
        negative_markers = {"stress", "sadness", "anger", "fatigue"}
        
        for marker in audio.emotion_markers:
            if marker in positive_markers:
                valence += 0.3
            elif marker in negative_markers:
                valence -= 0.3
                
        # –í–æ–∑–±—É–∂–¥–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–µ—á–∏ –∏ –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ–Ω–∞
        arousal = 0.0
        if audio.speech_rate > self.baseline_rate * 1.2:
            arousal += 0.4  # –±—ã—Å—Ç—Ä–∞—è —Ä–µ—á—å = –≤—ã—Å–æ–∫–æ–µ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ
        elif audio.speech_rate < self.baseline_rate * 0.8:
            arousal -= 0.2  # –º–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ—á—å = –Ω–∏–∑–∫–æ–µ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ
            
        # –í–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ–Ω–∞
        arousal += min(audio.pitch_variance / 50.0, 0.5)
        
        # –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∏ –ø–∞—É–∑
        intensity = audio.volume_level
        if audio.pause_ratio < 0.1:
            intensity += 0.2  # –º–∞–ª–æ –ø–∞—É–∑ = –≤—ã—Å–æ–∫–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
        elif audio.pause_ratio > 0.3:
            intensity -= 0.1  # –º–Ω–æ–≥–æ –ø–∞—É–∑ = –Ω–∏–∑–∫–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
            
        return {
            "valence": max(-1.0, min(1.0, valence)),
            "arousal": max(0.0, min(1.0, arousal)),
            "intensity": max(0.0, min(1.0, intensity))
        }