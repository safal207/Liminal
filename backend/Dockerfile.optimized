# Используем кеширование между сборками
FROM python:3.11-slim as builder

# Устанавливаем сразу все необходимые инструменты для компиляции
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    wget \
    git \
    # Добавляем библиотеки разработки для ускорения компиляции numpy, pandas и scikit-learn
    libopenblas-dev \
    liblapack-dev \
    # Для быстрой компиляции
    make \
    && rm -rf /var/lib/apt/lists/*

# Создаем и активируем виртуальное окружение
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Копируем только requirements и pip.conf для кеширования
WORKDIR /app
COPY requirements.txt .
COPY pip.conf /etc/pip.conf

# Максимальная оптимизация установки Python-пакетов
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir wheel pip-tools && \
    # Явно устанавливаем критические пакеты, необходимые для ML-компонентов
    pip install --no-cache-dir pyyaml prometheus-client redis && \
    # Разбиваем тяжелые ML-зависимости и устанавливаем отдельно для лучшего кеширования
    grep -v "scikit\|numpy\|pandas\|shap\|lime\|onnx" requirements.txt > light_reqs.txt && \
    grep "scikit\|numpy\|pandas\|shap\|lime\|onnx" requirements.txt > heavy_reqs.txt && \
    # Устанавливаем сначала легкие зависимости
    pip install --no-cache-dir -r light_reqs.txt && \
    # Устанавливаем тяжелые ML-библиотеки с оптимизацией
    OPENBLAS_NUM_THREADS=1 pip install --no-cache-dir --prefer-binary -r heavy_reqs.txt && \
    # Очистка кешей pip для уменьшения размера образа
    rm -rf /root/.cache/pip/*

# Создаем список установленных пакетов для проверки при запуске
RUN pip freeze > /opt/venv/installed-packages.txt

# Многоэтапная сборка - финальный легкий образ
FROM python:3.11-slim

# Устанавливаем только необходимые runtime зависимости
RUN apt-get update && apt-get install -y --no-install-recommends \
    libopenblas-base \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Копируем готовое виртуальное окружение с установленными пакетами
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Копируем код приложения
WORKDIR /app
COPY . .

# Устанавливаем переменные для оптимизации работы ML-библиотек
ENV OPENBLAS_NUM_THREADS=1 \
    OMP_NUM_THREADS=1 \
    MKL_NUM_THREADS=1

# Проверяем наличие всех конфигов и подготавливаем среду
RUN mkdir -p /app/logs

# Добавляем healthcheck для проверки работоспособности
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8000/health || exit 1

# Запускаем приложение с поддержкой ML
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4", "--log-config", "logging.yaml"]
