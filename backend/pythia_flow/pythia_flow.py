from neo4j import GraphDatabase


class FlowCoordinator:
    def __init__(self, uri="bolt://localhost:7687", user="neo4j", password="test1234"):
        self.driver = GraphDatabase.driver(uri, auth=(user, password))

    def close(self):
        self.driver.close()

    def find_path(self, start, goal, max_depth=4):
        query = f"""
        MATCH path = shortestPath((a:Concept {{name: $start}})-[*..{max_depth}]-(b:Concept {{name: $goal}}))
        RETURN nodes(path) AS concepts
        """
        with self.driver.session() as session:
            result = session.run(query, start=start, goal=goal)
            record = result.single()
            return [node["name"] for node in record["concepts"]] if record else []

    def translate_concept(self, concept_name, from_lang="ru", to_lang="en"):
        with self.driver.session() as session:
            result = session.run(
                """
                MATCH (c:Concept {name: $concept_name, lang: $from_lang})-[:TRANSLATES_TO]->(t:Concept {lang: $to_lang})
                RETURN t.name AS translated_name
            """,
                concept_name=concept_name,
                from_lang=from_lang,
                to_lang=to_lang,
            )
            record = result.single()
            return record["translated_name"] if record else None

    def get_chakra_color(self, emotion):
        chakra_map = {
            "—Å—Ç—Ä–∞—Ö": "üî¥ (–ú—É–ª–∞–¥—Ö–∞—Ä–∞ / –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞–∫—Ä–∞)",
            "–∂–µ–ª–∞–Ω–∏–µ": "üü† (–°–≤–∞–¥—Ö–∏—Å—Ç–∞–Ω–∞ / –°–∞–∫—Ä–∞–ª—å–Ω–∞—è —á–∞–∫—Ä–∞)",
            "—Å–∏–ª–∞": "üü° (–ú–∞–Ω–∏–ø—É—Ä–∞ / –ß–∞–∫—Ä–∞ —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ —Å–ø–ª–µ—Ç–µ–Ω–∏—è)",
            "–ª—é–±–æ–≤—å": "üíö (–ê–Ω–∞—Ö–∞—Ç–∞ / –°–µ—Ä–¥–µ—á–Ω–∞—è —á–∞–∫—Ä–∞)",
            "–≤—ã—Ä–∞–∂–µ–Ω–∏–µ": "üîµ (–í–∏—à—É–¥–¥—Ö–∞ / –ì–æ—Ä–ª–æ–≤–∞—è —á–∞–∫—Ä–∞)",
            "–∏–Ω—Ç—É–∏—Ü–∏—è": "üü£ (–ê–¥–∂–Ω–∞ / –¢—Ä–µ—Ç–∏–π –≥–ª–∞–∑)",
            "—Ç–∏—à–∏–Ω–∞": "‚ö™ (–°–∞—Ö–∞—Å—Ä–∞—Ä–∞ / –ö–æ—Ä–æ–Ω–Ω–∞—è —á–∞–∫—Ä–∞)",
        }
        return chakra_map.get(emotion.lower(), "‚ö´ (–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–æ–Ω–∞ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è)")

    def pre_emotion_prompt(self, user_input):
        print("üîÅ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞—Ç—å —à–∞–≥ –Ω–∞–∑–∞–¥.")
        print("üõë –®–∞–≥ –Ω–∞–∑–∞–¥: –û—Å—Ç–∞–Ω–æ–≤–∏—Å—å. –ü–æ–±—É–¥—å –≤ —Ç–∏—à–∏–Ω–µ.")
        print("üåå –ü–æ—á—É–≤—Å—Ç–≤—É–π: –Ω–µ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –æ—Ç–≤–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π —Å–µ–±–µ –≤–æ–ø—Ä–æ—Å:")
        print("üí≠ ¬´–ß—Ç–æ —è —á—É–≤—Å—Ç–≤—É—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?¬ª")
        emotion = input("üë§ –í—ã (–ø–æ—Å–ª–µ –ø–∞—É–∑—ã): ").strip().lower()
        print(f"üì• –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –æ—â—É—â–µ–Ω–∏–µ: '{emotion}'")
        return emotion

    def generate_response(self, user_input, concept="—Å—Ç—Ä–∞—Ö", target="–Ω–∞–¥–µ–∂–¥–∞"):
        emotion = self.pre_emotion_prompt(user_input)
        chakra_info = self.get_chakra_color(emotion)

        translated_concept = (
            self.translate_concept(concept, from_lang="ru", to_lang="en") or concept
        )
        translated_target = self.translate_concept(target, from_lang="ru", to_lang="en") or target

        path = self.find_path(translated_concept, translated_target)

        if not path:
            return f"üß† –¢–≤–æ—è —ç–º–æ—Ü–∏—è: {emotion} {chakra_info}\n–ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω –æ—Ç '{concept}' –∫ '{target}'. –ü–æ–ø—Ä–æ–±—É–µ–º —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã."

        steps = " ‚Üí ".join(path)
        return (
            f"üß† –¢–≤–æ—è —ç–º–æ—Ü–∏—è: {emotion} {chakra_info}\n"
            f"üåå –Ø —Å–ª—ã—à—É –≤ —Ç–µ–±–µ '{concept}'.\n"
            f"üîó –í–æ—Ç –ø—É—Ç—å, –∫–æ—Ç–æ—Ä—ã–π —è –≤–∏–∂—É: {steps}.\n"
            f"‚ú® –ö–∞–∂–¥—ã–π —à–∞–≥ ‚Äî —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è. –ò —Ç—ã –¥–≤–∏–∂–µ—à—å—Å—è –∫ '{target}'."
        )
