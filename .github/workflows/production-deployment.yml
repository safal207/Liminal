name: LIMINAL Production Deployment

on:
  push:
    branches:
      - main
      - production
  pull_request:
    branches:
      - main
      - production
  release:
    types:
      - published

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: liminal-backend
  PYTHON_VERSION: "3.11"

jobs:
  # Code Quality and Security Checks
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r test-requirements.txt

      - name: Code formatting check (Black)
        run: black --check --diff .

      - name: Import sorting check (isort)
        run: isort --check-only --diff .

      - name: Linting (flake8)
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Type checking (mypy)
        run: mypy . --ignore-missing-imports

      - name: Security scan (bandit)
        run: bandit -r . -x tests/ -f json -o bandit-report.json

      - name: Dependency vulnerability scan
        run: safety check --json --output safety-report.json

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Comprehensive Testing
  testing:
    runs-on: ubuntu-latest
    needs: quality-checks
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_liminal
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      neo4j:
        image: neo4j:5.15-community
        env:
          NEO4J_AUTH: neo4j/testpassword
        ports:
          - 7687:7687

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r test-requirements.txt

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_liminal
          REDIS_URL: redis://localhost:6379
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: testpassword
        run: |
          pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_liminal
          REDIS_URL: redis://localhost:6379
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: testpassword
        run: |
          pytest tests/integration/ -v --tb=short

      - name: Run API tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_liminal
          REDIS_URL: redis://localhost:6379
        run: |
          uvicorn main:app --host 0.0.0.0 --port 8000 &
          sleep 10
          pytest tests/api/ -v --tb=short

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            htmlcov/
            pytest-report.xml

  # Build and Push Docker Image
  build-and-push:
    runs-on: ubuntu-latest
    needs: [quality-checks, testing]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production')
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Performance Testing
  performance-testing:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 60  # Wait for services to be ready

      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run load tests
        run: |
          k6 run --out json=load-test-results.json tests/performance/load-test.js

      - name: Run stress tests
        run: |
          k6 run --out json=stress-test-results.json tests/performance/stress-test.js

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            load-test-results.json
            stress-test-results.json

      - name: Cleanup
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  # Security Scanning
  security-scanning:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Container security scanning with Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./backend/Dockerfile
          format: sarif
          output-file: hadolint-results.sarif

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push, performance-testing, security-scanning]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        env:
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          STAGING_USER: ${{ secrets.STAGING_USER }}
          STAGING_SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
        run: |
          echo "$STAGING_SSH_KEY" > staging_key
          chmod 600 staging_key
          
          # Copy deployment files
          scp -i staging_key -o StrictHostKeyChecking=no \
            docker-compose.yml \
            $STAGING_USER@$STAGING_HOST:/opt/liminal/
          
          # Deploy to staging
          ssh -i staging_key -o StrictHostKeyChecking=no \
            $STAGING_USER@$STAGING_HOST \
            "cd /opt/liminal && \
             docker-compose pull && \
             docker-compose up -d --remove-orphans"

      - name: Wait for staging deployment
        run: |
          sleep 60  # Wait for services to start
          curl -f http://${{ secrets.STAGING_HOST }}/health || exit 1

      - name: Run smoke tests on staging
        run: |
          pytest tests/smoke/ --staging-url=http://${{ secrets.STAGING_HOST }}

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/production'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        env:
          PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
          PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
          PRODUCTION_SSH_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}
        run: |
          echo "$PRODUCTION_SSH_KEY" > production_key
          chmod 600 production_key
          
          # Blue-green deployment strategy
          ssh -i production_key -o StrictHostKeyChecking=no \
            $PRODUCTION_USER@$PRODUCTION_HOST \
            "cd /opt/liminal && \
             ./scripts/blue-green-deploy.sh"

      - name: Run production health checks
        run: |
          sleep 120  # Wait for production deployment
          curl -f https://${{ secrets.PRODUCTION_HOST }}/health || exit 1

      - name: Run production smoke tests
        run: |
          pytest tests/smoke/ --production-url=https://${{ secrets.PRODUCTION_HOST }}

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "✅ LIMINAL production deployment successful!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "❌ LIMINAL production deployment failed!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Cleanup old images
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ env.IMAGE_NAME }}
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: true