#!/usr/bin/env python
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API –∫–ª—é—á–µ–π OpenAI, Anthropic –∏ XAI
"""

import asyncio
import os
import sys
import traceback
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
BASE_DIR = Path(__file__).parent.parent
sys.path.append(str(BASE_DIR))

# –ò–º–ø–æ—Ä—Ç dotenv –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv

    load_dotenv(BASE_DIR / ".env")
    print("üü¢ .env —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
except ImportError:
    print("üü† WARNING: dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
api_keys = {
    "OPENAI_API_KEY": os.getenv("OPENAI_API_KEY"),
    "ANTHROPIC_API_KEY": os.getenv("ANTHROPIC_API_KEY"),
    "XAI_API_KEY": os.getenv("XAI_API_KEY"),
}

print("\n=== –ü–†–û–í–ï–†–ö–ê API –ö–õ–Æ–ß–ï–ô ===\n")
for key_name, key_value in api_keys.items():
    if key_value:
        masked_key = f"{key_value[:5]}...{key_value[-5:]}" if len(key_value) > 10 else "[—Å–∫—Ä—ã—Ç]"
        print(f"üü¢ {key_name} –Ω–∞–π–¥–µ–Ω: {masked_key}")
    else:
        print(f"üî¥ {key_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OpenAI API
async def test_openai_api():
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï OPENAI API ===\n")

    try:
        api_key = os.getenv("OPENAI_API_KEY")

        if not api_key:
            print("üî¥ OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        try:
            print("üü† –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ OpenAI...")
            import openai
            from openai import AsyncOpenAI

            print(f"üü¢ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ OpenAI —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ (–≤–µ—Ä—Å–∏—è: {openai.__version__})")
        except ImportError as e:
            print(f"üî¥ –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ OpenAI: {e}")
            print("üü† –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ OpenAI...")

            try:
                import subprocess

                subprocess.run(
                    [sys.executable, "-m", "pip", "install", "openai"],
                    capture_output=True,
                    text=True,
                    check=True,
                )
                print("üü¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ OpenAI –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
                import openai
                from openai import AsyncOpenAI

                print(
                    f"üü¢ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ OpenAI —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–≤–µ—Ä—Å–∏—è: {openai.__version__})"
                )
            except Exception as install_error:
                print(f"üî¥ –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ OpenAI: {install_error}")
                print("üü† –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–∫-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è")
                return False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
        print(f"üü† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI —Å –∫–ª—é—á–æ–º {api_key[:5]}...")
        client = AsyncOpenAI(api_key=api_key)

        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å –ø—Ä–æ—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        print("üü† –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI API...")
        response = await client.chat.completions.create(
            model="gpt-4-turbo-preview",
            messages=[
                {
                    "role": "user",
                    "content": "Say hello to Resonance Liminal ML backend!",
                }
            ],
            max_tokens=10,
        )

        response_text = response.choices[0].message.content.strip()
        print(f'üü¢ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API: "{response_text}"')
        return True

    except Exception as e:
        print(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ OpenAI API: {e}")
        traceback.print_exc()
        return False


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    print("\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò API –ö–õ–Æ–ß–ï–ô ===\n")
    print("–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: " + Path(__file__).name)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenAI API
    openai_success = await test_openai_api()

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===\n")
    print(f"OpenAI API: {'üü¢ –£–°–ü–ï–•' if openai_success else 'üî¥ –û–®–ò–ë–ö–ê'}")

    if openai_success:
        print("\nüü¢ OpenAI API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("üü¢ –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã –≤–º–µ—Å—Ç–æ –º–æ–∫-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏")
    else:
        print("\nüî¥ –ü—Ä–æ–±–ª–µ–º—ã —Å OpenAI API")
        print("üü† –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        print("  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞")
        print("  2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ OpenAI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: pip install openai")
        print("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏")
        print("  4. –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–∫-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")


# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if __name__ == "__main__":
    asyncio.run(main())
