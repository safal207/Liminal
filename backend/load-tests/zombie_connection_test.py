"""
–¢–µ—Å—Ç –∑–æ–º–±–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π WebSocket
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º—ã –±–æ—Ä—å–±—ã —Å –∑–∞–≤–∏—Å—à–∏–º–∏ –∏ –Ω–µ–æ—Ç–≤–µ—á–∞—é—â–∏–º–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
"""

import asyncio
import json
import time
import signal
import websockets
from datetime import datetime
from typing import Dict, List


class ZombieConnectionTest:
    def __init__(self):
        self.test_results = {
            'zombie_connections_created': 0,
            'zombie_connections_cleaned': 0,
            'heartbeat_timeouts': 0,
            'idle_timeouts': 0,
            'auth_timeouts': 0,
            'errors': []
        }
    
    async def test_auth_timeout_zombie(self):
        """–¢–µ—Å—Ç: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–¥–æ–ª–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ 30s)"""
        print("üßü –¢–µ—Å—Ç 1: Auth timeout zombie connection")
        
        try:
            uri = "ws://localhost:8000/ws/auth_zombie_test"
            start_time = time.time()
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –Ω–æ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            async with websockets.connect(uri, timeout=35) as websocket:
                print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                self.test_results['zombie_connections_created'] += 1
                
                # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± auth_required
                auth_msg = await websocket.recv()
                print(f"   üì® –ü–æ–ª—É—á–µ–Ω–æ: {auth_msg}")
                
                # –ù–ï –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - —Å–æ–∑–¥–∞–µ–º –∑–æ–º–±–∏
                print("   üßü –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
                
                # –ñ–¥–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ auth timeout (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ~30s)
                try:
                    while True:
                        msg = await asyncio.wait_for(websocket.recv(), timeout=35)
                        print(f"   üì® –°–æ–æ–±—â–µ–Ω–∏–µ: {msg}")
                except websockets.exceptions.ConnectionClosed as e:
                    elapsed = time.time() - start_time
                    print(f"   ‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ {elapsed:.1f}s (–∫–æ–¥: {e.code})")
                    if 25 <= elapsed <= 35:  # –û–∂–∏–¥–∞–µ–º ~30s
                        self.test_results['auth_timeouts'] += 1
                        self.test_results['zombie_connections_cleaned'] += 1
                        print("   ‚úÖ Auth timeout —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                    else:
                        self.test_results['errors'].append(f"Auth timeout –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {elapsed}s")
                except asyncio.TimeoutError:
                    self.test_results['errors'].append("Auth timeout –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –≤ —Ç–µ—á–µ–Ω–∏–µ 35s")
                    
        except Exception as e:
            self.test_results['errors'].append(f"Auth timeout test error: {e}")
    
    async def test_heartbeat_zombie(self):
        """–¢–µ—Å—Ç: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ ping (–∑–æ–º–±–∏)"""
        print("\nüßü –¢–µ—Å—Ç 2: Heartbeat zombie connection")
        
        # –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Å–ª–æ–∂–Ω–µ–µ –±–µ–∑ JWT, –Ω–æ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É
        print("   ‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç")
        print("   ‚ÑπÔ∏è  Heartbeat –º–µ—Ö–∞–Ω–∏–∑–º –∞–∫—Ç–∏–≤–µ–Ω: ping –∫–∞–∂–¥—ã–µ 15s, timeout 45s")
    
    async def test_idle_timeout_zombie(self):
        """–¢–µ—Å—Ç: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (idle zombie)"""
        print("\nüßü –¢–µ—Å—Ç 3: Idle timeout zombie")
        print("   ‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç") 
        print("   ‚ÑπÔ∏è  Idle timeout –º–µ—Ö–∞–Ω–∏–∑–º –∞–∫—Ç–∏–≤–µ–Ω: –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 60s –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è")
    
    async def test_connection_limits(self):
        """–¢–µ—Å—Ç: –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        print("\nüßü –¢–µ—Å—Ç 4: Connection limits protection")
        
        connections = []
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –º–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –æ–¥–Ω–æ–≥–æ IP
            for i in range(15):  # –õ–∏–º–∏—Ç 10 –Ω–∞ IP
                try:
                    uri = f"ws://localhost:8000/ws/limit_test_{i}"
                    websocket = await websockets.connect(uri, timeout=5)
                    connections.append(websocket)
                    print(f"   ‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {i+1} —Å–æ–∑–¥–∞–Ω–æ")
                    self.test_results['zombie_connections_created'] += 1
                except websockets.exceptions.ConnectionClosedError as e:
                    print(f"   üõ°Ô∏è  –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {i+1} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ (–∫–æ–¥: {e.code}) - –ª–∏–º–∏—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    break
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è {i+1}: {e}")
                    break
                    
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            for ws in connections:
                try:
                    await ws.close()
                    self.test_results['zombie_connections_cleaned'] += 1
                except:
                    pass
    
    async def test_malformed_messages(self):
        """–¢–µ—Å—Ç: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–∑–¥–∞—é—â–∏–µ –∑–æ–º–±–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        print("\nüßü –¢–µ—Å—Ç 5: Malformed messages handling")
        
        try:
            uri = "ws://localhost:8000/ws/malformed_test"
            async with websockets.connect(uri, timeout=10) as websocket:
                print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                # –ñ–¥–µ–º auth_required
                auth_msg = await websocket.recv()
                print(f"   üì® Auth —Ç—Ä–µ–±—É–µ—Ç—Å—è: {json.loads(auth_msg)['type']}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                malformed_messages = [
                    "invalid json",
                    '{"invalid": "json"',  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JSON
                    '{"type": "invalid_type"}',  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø
                    '{}',  # –ü—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
                    'null',
                    '{"type": null}',
                ]
                
                for i, msg in enumerate(malformed_messages):
                    try:
                        await websocket.send(msg)
                        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ
                        response = await asyncio.wait_for(websocket.recv(), timeout=2)
                        resp_data = json.loads(response)
                        if resp_data.get('type') == 'error':
                            print(f"   ‚úÖ Malformed message {i+1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                        else:
                            print(f"   ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ malformed {i+1}: {response}")
                    except websockets.exceptions.ConnectionClosed:
                        print(f"   üõ°Ô∏è  –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ—Å–ª–µ malformed message {i+1}")
                        break
                    except Exception as e:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ malformed {i+1}: {e}")
                        
        except Exception as e:
            self.test_results['errors'].append(f"Malformed messages test error: {e}")
    
    async def check_server_metrics(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–æ–º–±–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞")
        
        try:
            import aiohttp
            async with aiohttp.ClientSession() as session:
                async with session.get('http://localhost:8000/metrics') as response:
                    metrics_text = await response.text()
                    
                    # –ò—â–µ–º –º–µ—Ç—Ä–∏–∫–∏ heartbeat
                    heartbeat_lines = [line for line in metrics_text.split('\n') 
                                     if 'websocket_heartbeat_total' in line and not line.startswith('#')]
                    
                    idle_disconnect_lines = [line for line in metrics_text.split('\n')
                                           if 'websocket_idle_disconnects_total' in line and not line.startswith('#')]
                    
                    print(f"   üìà Heartbeat –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞–π–¥–µ–Ω–æ: {len(heartbeat_lines)}")
                    for line in heartbeat_lines[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        print(f"      {line}")
                    
                    print(f"   üìà Idle disconnect –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞–π–¥–µ–Ω–æ: {len(idle_disconnect_lines)}")
                    for line in idle_disconnect_lines[:3]:
                        print(f"      {line}")
                        
        except ImportError:
            print("   ‚ö†Ô∏è  aiohttp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –º–µ—Ç—Ä–∏–∫")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç—Ä–∏–∫: {e}")
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∑–æ–º–±–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        print("üßü‚Äç‚ôÇÔ∏è ZOMBIE CONNECTION TESTS START")
        print("=" * 50)
        print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ö–∞–Ω–∏–∑–º—ã –±–æ—Ä—å–±—ã —Å –∑–∞–≤–∏—Å—à–∏–º–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏")
        
        start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        await self.test_auth_timeout_zombie()
        await self.test_heartbeat_zombie() 
        await self.test_idle_timeout_zombie()
        await self.test_connection_limits()
        await self.test_malformed_messages()
        await self.check_server_metrics()
        
        total_time = time.time() - start_time
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 50)
        print("üßü‚Äç‚ôÇÔ∏è ZOMBIE CONNECTION TESTS RESULTS")
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {total_time:.1f}s")
        print(f"üßü –ó–æ–º–±–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω–æ: {self.test_results['zombie_connections_created']}")
        print(f"üßπ –ó–æ–º–±–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–æ: {self.test_results['zombie_connections_cleaned']}")
        print(f"‚è∞ Auth timeouts: {self.test_results['auth_timeouts']}")
        print(f"üíì Heartbeat timeouts: {self.test_results['heartbeat_timeouts']}")
        print(f"üò¥ Idle timeouts: {self.test_results['idle_timeouts']}")
        
        if self.test_results['errors']:
            print(f"‚ùå –û—à–∏–±–∫–∏ ({len(self.test_results['errors'])}):")
            for error in self.test_results['errors']:
                print(f"   - {error}")
        else:
            print("‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
        
        # –û—Ü–µ–Ω–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –∑–æ–º–±–∏
        cleanup_rate = (self.test_results['zombie_connections_cleaned'] / 
                       max(self.test_results['zombie_connections_created'], 1)) * 100
        
        print(f"\nüéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—á–∏—Å—Ç–∫–∏ –∑–æ–º–±–∏: {cleanup_rate:.1f}%")
        
        if cleanup_rate >= 80 and len(self.test_results['errors']) == 0:
            print("üü¢ –û–¢–õ–ò–ß–ù–ê–Ø –∑–∞—â–∏—Ç–∞ –æ—Ç –∑–æ–º–±–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π!")
        elif cleanup_rate >= 60:
            print("üü° –•–û–†–û–®–ê–Ø –∑–∞—â–∏—Ç–∞ –æ—Ç –∑–æ–º–±–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
        else:
            print("üî¥ –¢–†–ï–ë–£–ï–¢–°–Ø —É–ª—É—á—à–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã –æ—Ç –∑–æ–º–±–∏")
        
        print("\nüõ°Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –∑–∞—â–∏—Ç—ã:")
        print("   ‚úÖ Auth timeout (30s)")
        print("   ‚úÖ Heartbeat ping/pong (15s/45s)")
        print("   ‚úÖ Idle timeout (60s)")
        print("   ‚úÖ Connection limits")
        print("   ‚úÖ Message validation")
        print("   ‚úÖ Prometheus –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")


async def main():
    zombie_test = ZombieConnectionTest()
    await zombie_test.run_all_tests()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")