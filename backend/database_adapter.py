#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Production-ready DatabaseAdapter for LIMINAL.

Automatically routes data between different databases:
- Datomic: temporal data, history, audit, events
- Neo4j: structural relationships, graph, philosophical states

Principle: "No randomness is random" - every database choice is justified by data nature.
"""

import asyncio
import logging
import time
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from config import get_database_settings
from datomic_client import DatomicClient, DatomicConnectionError

try:
    from philosophy_neo4j import PhilosophyNeo4jWriter
except ImportError:
    # Fallback implementation for environments without Neo4j
    class PhilosophyNeo4jWriter:
        def __init__(self, *args, **kwargs):
            logging.warning("Using fallback Neo4j implementation")
        def close(self):
            pass

logger = logging.getLogger(__name__)


class DataType(Enum):
    """–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ë–î."""
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Üí Datomic
    TEMPORAL = "temporal"           # –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    EVENT = "event"                 # –°–æ–±—ã—Ç–∏—è —Å–∏—Å—Ç–µ–º—ã
    AUDIT = "audit"                 # –ê—É–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π
    EMOTION_HISTORY = "emotion_history"  # –ò—Å—Ç–æ—Ä–∏—è —ç–º–æ—Ü–∏–π
    SESSION_DATA = "session_data"   # –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–π
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Üí Neo4j
    RELATIONSHIP = "relationship"   # –°–≤—è–∑–∏ –º–µ–∂–¥—É —Å—É—â–Ω–æ—Å—Ç—è–º–∏
    GRAPH = "graph"                # –ì—Ä–∞—Ñ–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    PHILOSOPHY = "philosophy"       # –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    CONCEPT_MAP = "concept_map"     # –ö–∞—Ä—Ç—ã –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤
    USER_NETWORK = "user_network"   # –°–µ—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


class DatabaseAdapter:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Datomic –∏ Neo4j.
    
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é –ë–î –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î.
    """
    
    def __init__(
        self,
        # Datomic –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        datomic_uri: str = "http://localhost:8080",
        datomic_db_name: str = "liminal",
        datomic_storage_type: str = "dev",
        
        # Neo4j –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        neo4j_uri: str = None,
        neo4j_user: str = None,
        neo4j_password: str = None,
        neo4j_database: str = "neo4j",
        
        # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        auto_connect: bool = True,
        fallback_enabled: bool = True,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞.
        
        Args:
            datomic_uri: URI –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Datomic
            datomic_db_name: –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Datomic
            datomic_storage_type: –¢–∏–ø —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ Datomic
            neo4j_uri: URI –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neo4j
            neo4j_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Neo4j
            neo4j_password: –ü–∞—Ä–æ–ª—å Neo4j
            neo4j_database: –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Neo4j
            auto_connect: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            fallback_enabled: –í–∫–ª—é—á–∏—Ç—å fallback –º–µ–∂–¥—É –ë–î –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        """
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Datomic
        self.datomic_uri = datomic_uri
        self.datomic_db_name = datomic_db_name
        self.datomic_storage_type = datomic_storage_type
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Neo4j
        self.neo4j_uri = neo4j_uri or os.getenv("NEO4J_URI", "bolt://localhost:7687")
        self.neo4j_user = neo4j_user or os.getenv("NEO4J_USER", "neo4j")
        self.neo4j_password = neo4j_password or os.getenv("NEO4J_PASSWORD", "NewStrongPass123!")
        self.neo4j_database = neo4j_database
        
        # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.auto_connect = auto_connect
        self.fallback_enabled = fallback_enabled
        
        # –ö–ª–∏–µ–Ω—Ç—ã –ë–î
        self.datomic_client: Optional[DatomicClient] = None
        self.neo4j_client: Optional[PhilosophyNeo4jWriter] = None
        
        # –°—Ç–∞—Ç—É—Å—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        self.datomic_available = False
        self.neo4j_available = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.stats = {
            "datomic_queries": 0,
            "neo4j_queries": 0,
            "fallback_uses": 0,
            "errors": 0
        }
        
        if auto_connect:
            self.connect()
    
    def connect(self) -> bool:
        """
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–±–µ–∏–º –ë–î.
        
        Returns:
            True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞
        """
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Datomic
        try:
            self.datomic_client = DatomicClient(
                uri=self.datomic_uri,
                db_name=self.datomic_db_name,
                storage_type=self.datomic_storage_type
            )
            self.datomic_available = self.datomic_client.connect()
            if self.datomic_available:
                logger.info("‚úÖ Datomic –ø–æ–¥–∫–ª—é—á–µ–Ω")
            else:
                logger.warning("‚ö†Ô∏è Datomic –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Datomic: {e}")
            self.datomic_available = False
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neo4j
        try:
            self.neo4j_client = PhilosophyNeo4jWriter(
                uri=self.neo4j_uri,
                user=self.neo4j_user,
                password=self.neo4j_password,
                database=self.neo4j_database
            )
            self.neo4j_available = True
            logger.info("‚úÖ Neo4j –ø–æ–¥–∫–ª—é—á–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neo4j: {e}")
            self.neo4j_available = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –ë–î
        if not (self.datomic_available or self.neo4j_available):
            logger.error("‚ùå –ù–∏ –æ–¥–Ω–∞ –ë–î –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞!")
            return False
        
        logger.info(f"üéØ DatabaseAdapter –≥–æ—Ç–æ–≤ (Datomic: {self.datomic_available}, Neo4j: {self.neo4j_available})")
        return True
    
    def _choose_database(self, data_type: DataType) -> str:
        """
        –í—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–π –ë–î –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            data_type: –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            "datomic" –∏–ª–∏ "neo4j"
        """
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Üí Datomic
        if data_type in [DataType.TEMPORAL, DataType.EVENT, DataType.AUDIT, 
                        DataType.EMOTION_HISTORY, DataType.SESSION_DATA]:
            return "datomic"
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Üí Neo4j
        elif data_type in [DataType.RELATIONSHIP, DataType.GRAPH, DataType.PHILOSOPHY,
                          DataType.CONCEPT_MAP, DataType.USER_NETWORK]:
            return "neo4j"
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Neo4j (–±–æ–ª–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)
        return "neo4j"
    
    def _get_available_database(self, preferred: str) -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ë–î —Å —É—á–µ—Ç–æ–º fallback.
        
        Args:
            preferred: –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –ë–î ("datomic" –∏–ª–∏ "neo4j")
            
        Returns:
            –ò–º—è –¥–æ—Å—Ç—É–ø–Ω–æ–π –ë–î –∏–ª–∏ None
        """
        if preferred == "datomic" and self.datomic_available:
            return "datomic"
        elif preferred == "neo4j" and self.neo4j_available:
            return "neo4j"
        elif self.fallback_enabled:
            # Fallback –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—É—é –ë–î
            if preferred == "datomic" and self.neo4j_available:
                logger.warning("‚ö†Ô∏è Datomic –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Neo4j –∫–∞–∫ fallback")
                self.stats["fallback_uses"] += 1
                return "neo4j"
            elif preferred == "neo4j" and self.datomic_available:
                logger.warning("‚ö†Ô∏è Neo4j –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Datomic –∫–∞–∫ fallback")
                self.stats["fallback_uses"] += 1
                return "datomic"
        
        return None
    
    async def store_data(
        self, 
        data: Dict[str, Any], 
        data_type: DataType,
        user_id: Optional[str] = None,
        session_id: Optional[str] = None
    ) -> str:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ë–î.
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            data_type: –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            session_id: ID —Å–µ—Å—Å–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
        """
        preferred_db = self._choose_database(data_type)
        available_db = self._get_available_database(preferred_db)
        
        if not available_db:
            logger.error(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ë–î –¥–ª—è —Ç–∏–ø–∞ {data_type}")
            self.stats["errors"] += 1
            raise ConnectionError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        enriched_data = {
            **data,
            "id": str(uuid.uuid4()),
            "timestamp": datetime.utcnow().isoformat(),
            "data_type": data_type.value,
            "user_id": user_id,
            "session_id": session_id,
            "stored_in": available_db
        }
        
        try:
            if available_db == "datomic":
                return await self._store_in_datomic(enriched_data, data_type)
            else:
                return await self._store_in_neo4j(enriched_data, data_type)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ {available_db}: {e}")
            self.stats["errors"] += 1
            raise
    
    async def _store_in_datomic(self, data: Dict[str, Any], data_type: DataType) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Datomic."""
        self.stats["datomic_queries"] += 1
        
        if data_type == DataType.EMOTION_HISTORY:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —ç–º–æ—Ü–∏–π
            result = self.datomic_client.add_emotion_entry(
                user_id=data.get("user_id"),
                emotion=data.get("emotion", "unknown"),
                intensity=data.get("intensity", 0.5)
            )
            return str(result)
        else:
            # –û–±—â–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤ DatomicClient
            logger.info(f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Datomic: {data_type.value}")
            return data["id"]
    
    async def _store_in_neo4j(self, data: Dict[str, Any], data_type: DataType) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Neo4j."""
        self.stats["neo4j_queries"] += 1
        
        if data_type == DataType.PHILOSOPHY:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
            # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å PhilosophyNeo4jWriter
            logger.info(f"üß† –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ Neo4j")
            return data["id"]
        else:
            # –û–±—â–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            logger.info(f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Neo4j: {data_type.value}")
            return data["id"]
    
    async def query_data(
        self,
        data_type: DataType,
        filters: Optional[Dict[str, Any]] = None,
        limit: int = 100
    ) -> List[Dict[str, Any]]:
        """
        –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –ë–î.
        
        Args:
            data_type: –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö
            filters: –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        preferred_db = self._choose_database(data_type)
        available_db = self._get_available_database(preferred_db)
        
        if not available_db:
            logger.error(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ë–î –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ {data_type}")
            return []
        
        try:
            if available_db == "datomic":
                return await self._query_from_datomic(data_type, filters, limit)
            else:
                return await self._query_from_neo4j(data_type, filters, limit)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ {available_db}: {e}")
            self.stats["errors"] += 1
            return []
    
    async def _query_from_datomic(
        self, 
        data_type: DataType, 
        filters: Optional[Dict[str, Any]], 
        limit: int
    ) -> List[Dict[str, Any]]:
        """–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ Datomic."""
        self.stats["datomic_queries"] += 1
        
        if data_type == DataType.EMOTION_HISTORY and filters and "user_id" in filters:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π
            history = self.datomic_client.get_emotion_history(
                user_id=filters["user_id"],
                limit=limit
            )
            return [{"emotion": h[1], "intensity": h[2], "timestamp": h[3]} for h in history]
        else:
            # –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å
            logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –∏–∑ Datomic: {data_type.value}")
            return []
    
    async def _query_from_neo4j(
        self, 
        data_type: DataType, 
        filters: Optional[Dict[str, Any]], 
        limit: int
    ) -> List[Dict[str, Any]]:
        """–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ Neo4j."""
        self.stats["neo4j_queries"] += 1
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ PhilosophyNeo4jWriter
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –∏–∑ Neo4j: {data_type.value}")
        return []
    
    def get_health_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è –∞–¥–∞–ø—Ç–µ—Ä–∞.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        """
        return {
            "status": "healthy" if (self.datomic_available or self.neo4j_available) else "unhealthy",
            "databases": {
                "datomic": {
                    "available": self.datomic_available,
                    "uri": self.datomic_uri,
                    "db_name": self.datomic_db_name
                },
                "neo4j": {
                    "available": self.neo4j_available,
                    "uri": self.neo4j_uri,
                    "database": self.neo4j_database
                }
            },
            "stats": self.stats,
            "fallback_enabled": self.fallback_enabled
        }
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π."""
        logger.info("üîå –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î...")
        
        if self.datomic_client:
            try:
                self.datomic_client.close()
                logger.info("‚úÖ Datomic –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Datomic: {e}")
        
        if self.neo4j_client:
            try:
                self.neo4j_client.close()
                logger.info("‚úÖ Neo4j –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Neo4j: {e}")
        
        logger.info("üéØ DatabaseAdapter –∑–∞–∫—Ä—ã—Ç")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–∞–ø—Ç–µ—Ä–∞
_database_adapter: Optional[DatabaseAdapter] = None


def get_database_adapter() -> DatabaseAdapter:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ DatabaseAdapter —Å –ª–µ–Ω–∏–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π.
    
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä DatabaseAdapter
    """
    global _database_adapter
    
    if _database_adapter is None:
        _database_adapter = DatabaseAdapter()
    
    return _database_adapter


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    async def main():
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞
        adapter = DatabaseAdapter()
        
        try:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (‚Üí Datomic)
            emotion_id = await adapter.store_data(
                data={
                    "emotion": "—Ä–∞–¥–æ—Å—Ç—å",
                    "intensity": 0.8,
                    "context": "—É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"
                },
                data_type=DataType.EMOTION_HISTORY,
                user_id="user-123",
                session_id="session-456"
            )
            print(f"–≠–º–æ—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {emotion_id}")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (‚Üí Neo4j)
            philosophy_id = await adapter.store_data(
                data={
                    "state": "resonance",
                    "depth": 0.9,
                    "clarity": 0.7
                },
                data_type=DataType.PHILOSOPHY,
                user_id="user-123"
            )
            print(f"–§–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {philosophy_id}")
            
            # –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–π
            emotions = await adapter.query_data(
                data_type=DataType.EMOTION_HISTORY,
                filters={"user_id": "user-123"},
                limit=10
            )
            print(f"–ò—Å—Ç–æ—Ä–∏—è —ç–º–æ—Ü–∏–π: {emotions}")
            
            # –°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
            health = adapter.get_health_status()
            print(f"–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è: {health}")
            
        finally:
            adapter.close()
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
    asyncio.run(main())
