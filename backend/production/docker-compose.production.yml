version: '3.8'

services:
  # RGL Core Service
  rgl-core:
    build:
      context: ..
      dockerfile: production/Dockerfile.rgl-core
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=rgl_production_password
      - LOG_LEVEL=INFO
      - WORKERS=4
    depends_on:
      - redis
      - neo4j
      - prometheus
    networks:
      - rgl-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Neural Analytics Service
  neural-analytics:
    build:
      context: ..
      dockerfile: production/Dockerfile.analytics
    ports:
      - "8001:8001"
    environment:
      - RGL_CORE_URL=http://rgl-core:8000
      - REDIS_URL=redis://redis:6379
    depends_on:
      - rgl-core
      - redis
    networks:
      - rgl-network
    restart: unless-stopped

  # Real-time WebSocket Gateway
  websocket-gateway:
    build:
      context: ..
      dockerfile: production/Dockerfile.websocket
    ports:
      - "8002:8002"
    environment:
      - RGL_CORE_URL=http://rgl-core:8000
      - REDIS_URL=redis://redis:6379
      - MAX_CONNECTIONS=10000
    depends_on:
      - rgl-core
      - redis
    networks:
      - rgl-network
    restart: unless-stopped

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - rgl-network
    restart: unless-stopped

  # Neo4j Memory Graph Database
  neo4j:
    image: neo4j:5.15-community
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
    environment:
      - NEO4J_AUTH=neo4j/rgl_production_password
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_db_memory_pagecache_size=512M
      - NEO4J_db_memory_heap_initial_size=512M
      - NEO4J_db_memory_heap_max_size=1G
    networks:
      - rgl-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - rgl-network
    restart: unless-stopped

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=rgl_admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - rgl-network
    restart: unless-stopped

  # Nginx Load Balancer & Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - rgl-core
      - neural-analytics
      - websocket-gateway
    networks:
      - rgl-network
    restart: unless-stopped

  # ELK Stack for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - rgl-network
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    volumes:
      - ./monitoring/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch
    networks:
      - rgl-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - rgl-network
    restart: unless-stopped

volumes:
  redis-data:
  neo4j-data:
  neo4j-logs:
  prometheus-data:
  grafana-data:
  elasticsearch-data:

networks:
  rgl-network:
    driver: bridge