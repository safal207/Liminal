# ML-COMPONENT TEST SCRIPT
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ—ç—Ç–∞–ø–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ML-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã

param(
    [switch]$CleanEnv,          # –û—á–∏—Å—Ç–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    [switch]$SkipRedis,         # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis
    [switch]$SkipPrometheus,    # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Prometheus
    [switch]$SkipBackend,       # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Backend
    [switch]$SkipKenning        # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Kenning ML
)

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
$Green = [System.ConsoleColor]::Green
$Cyan = [System.ConsoleColor]::Cyan
$Yellow = [System.ConsoleColor]::Yellow
$Red = [System.ConsoleColor]::Red

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
function Write-Status($message, $color = $Cyan) {
    Write-Host $message -ForegroundColor $color
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function Test-Container {
    param(
        [string]$Name,
        [string]$Command,
        [string]$HealthCheck,
        [int]$WaitTime = 10
    )

    Write-Status "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ $Name" $Cyan
    Write-Status "> $Command" $Yellow
    
    try {
        Invoke-Expression $Command | Out-Null
        Start-Sleep -Seconds $WaitTime
        
        $status = docker ps --filter "name=$Name" --format "{{.Status}}"
        
        if ($status -like "*healthy*" -or $status -like "*Up*") {
            Write-Status "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $Name —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω" $Green
            return $true
        } else {
            Write-Status "‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $Name –∑–∞–ø—É—â–µ–Ω, –Ω–æ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –ø—Ä–æ–±–ª–µ–º—ã: $status" $Yellow
            
            Write-Status "üìù –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $Name:" $Yellow
            docker logs --tail 20 $Name
            
            return $false
        }
    }
    catch {
        Write-Status "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ $Name: $_" $Red
        return $false
    }
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker
try {
    $dockerVersion = docker --version
    Write-Status "‚úÖ Docker –æ–±–Ω–∞—Ä—É–∂–µ–Ω: $dockerVersion" $Green
} catch {
    Write-Status "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Desktop." $Red
    exit 1
}

# –û—á–∏—â–∞–µ–º —Å—Ä–µ–¥—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
if ($CleanEnv) {
    Write-Status "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ä–µ–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..." $Yellow
    docker rm -f ml-redis ml-prometheus ml-backend ml-kenning 2>$null
}

$testResults = @()

# 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis
if (-not $SkipRedis) {
    Write-Status "`nüìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï REDIS" $Green
    $redisSuccess = Test-Container -Name "ml-redis" `
                               -Command "docker run -d --name ml-redis -p 6379:6379 redis:latest" `
                               -HealthCheck "redis-cli ping" `
                               -WaitTime 5
    
    if ($redisSuccess) {
        Write-Status "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis CLI" $Cyan
        docker exec ml-redis redis-cli ping
    }
    
    $testResults += @{
        Component = "Redis"
        Status = if ($redisSuccess) { "‚úÖ –£–°–ü–ï–®–ù–û" } else { "‚ùå –û–®–ò–ë–ö–ê" }
    }
}

# 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Prometheus
if (-not $SkipPrometheus) {
    Write-Status "`nüìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PROMETHEUS" $Green
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (-not (Test-Path -Path "c:/Users/safal/OneDrive/Documente/GitHub/resonance-liminal/prometheus/prometheus.yml")) {
        Write-Status "üìù –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è Prometheus..." $Yellow
        $prometheusConfig = @"
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
  
  - job_name: 'backend'
    static_configs:
      - targets: ['ml-backend:8000']
"@
        New-Item -Path "c:/Users/safal/OneDrive/Documente/GitHub/resonance-liminal/prometheus" -ItemType Directory -Force | Out-Null
        $prometheusConfig | Out-File -FilePath "c:/Users/safal/OneDrive/Documente/GitHub/resonance-liminal/prometheus/prometheus.yml" -Encoding utf8
    }
    
    $prometheusSuccess = Test-Container -Name "ml-prometheus" `
                                    -Command "docker run -d --name ml-prometheus -p 9090:9090 -v c:/Users/safal/OneDrive/Documente/GitHub/resonance-liminal/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus:latest" `
                                    -HealthCheck "curl http://localhost:9090/-/healthy" `
                                    -WaitTime 10
                                    
    if ($prometheusSuccess) {
        Write-Status "üîç Prometheus –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:9090" $Cyan
    }
    
    $testResults += @{
        Component = "Prometheus"
        Status = if ($prometheusSuccess) { "‚úÖ –£–°–ü–ï–®–ù–û" } else { "‚ùå –û–®–ò–ë–ö–ê" }
    }
}

# 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Backend —Å ML-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
if (-not $SkipBackend) {
    Write-Status "`nüìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BACKEND –° ML-–ü–û–î–î–ï–†–ñ–ö–û–ô" $Green
    
    $backendSuccess = Test-Container -Name "ml-backend" `
                                 -Command "docker run -d --name ml-backend -p 8000:8000 --link ml-redis:redis --link ml-prometheus:prometheus -e REDIS_HOST=ml-redis -e PROMETHEUS_URL=http://ml-prometheus:9090 -e TEST_MODE=true -e ML_ENABLED=true -e OPENAI_API_KEY=demo_key -e ANTHROPIC_API_KEY=demo_key resonance-liminal-backend:latest" `
                                 -HealthCheck "curl http://localhost:8000/health" `
                                 -WaitTime 15
    
    if ($backendSuccess) {
        Write-Status "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API" $Cyan
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:8000/docs" -UseBasicParsing
            if ($response.StatusCode -eq 200) {
                Write-Status "‚úÖ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞" $Green
            }
        } catch {
            Write-Status "‚ö†Ô∏è API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: $_" $Yellow
        }
        
        Write-Status "üìù –õ–æ–≥–∏ Backend:" $Yellow
        docker logs --tail 20 ml-backend
    }
    
    $testResults += @{
        Component = "Backend ML"
        Status = if ($backendSuccess) { "‚úÖ –£–°–ü–ï–®–ù–û" } else { "‚ùå –û–®–ò–ë–ö–ê" }
    }
}

# 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Kenning ML-—Å–µ—Ä–≤–∏—Å–∞
if (-not $SkipKenning) {
    Write-Status "`nüìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï KENNING ML-–°–ï–†–í–ò–°–ê" $Green
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–∑–∞
    $kenningImageExists = docker images kenning/kenning:latest -q
    
    if (-not $kenningImageExists) {
        Write-Status "‚ö†Ô∏è –û–±—Ä–∞–∑ kenning/kenning:latest –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞..." $Yellow
        $kenningImageExists = docker images kenning/kenning-serving:latest -q
        
        if (-not $kenningImageExists) {
            Write-Status "‚ùå –ù–∏ –æ–¥–∏–Ω –∏–∑ –æ–±—Ä–∞–∑–æ–≤ Kenning –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Kenning." $Red
            $kenningSuccess = $false
        }
        else {
            $kenningImage = "kenning/kenning-serving:latest"
        }
    }
    else {
        $kenningImage = "kenning/kenning:latest"
    }
    
    if ($kenningImageExists) {
        $kenningSuccess = Test-Container -Name "ml-kenning" `
                                     -Command "docker run -d --name ml-kenning -p 8001:8000 --link ml-redis:redis --link ml-prometheus:prometheus -e PROMETHEUS_URL=http://ml-prometheus:9090 -e REDIS_HOST=ml-redis -v c:/Users/safal/OneDrive/Documente/GitHub/resonance-liminal/models:/app/models $kenningImage" `
                                     -HealthCheck "curl http://localhost:8001/health" `
                                     -WaitTime 20
        
        if ($kenningSuccess) {
            Write-Status "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Kenning API" $Cyan
            try {
                $response = Invoke-WebRequest -Uri "http://localhost:8001/docs" -UseBasicParsing
                if ($response.StatusCode -eq 200) {
                    Write-Status "‚úÖ Kenning API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞" $Green
                }
            } catch {
                Write-Status "‚ö†Ô∏è Kenning API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: $_" $Yellow
            }
            
            Write-Status "üìù –õ–æ–≥–∏ Kenning:" $Yellow
            docker logs --tail 20 ml-kenning
        }
    }
    
    $testResults += @{
        Component = "Kenning ML"
        Status = if ($kenningSuccess) { "‚úÖ –£–°–ü–ï–®–ù–û" } else { "‚ùå –û–®–ò–ë–ö–ê" }
    }
}

# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
Write-Status "`nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ML-–ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–´" $Green
$testResults | ForEach-Object {
    $statusColor = if ($_.Status -like "*–£–°–ü–ï–®–ù–û*") { $Green } else { $Red }
    Write-Status ("  ‚Ä¢ {0,-15}: {1}" -f $_.Component, $_.Status) $statusColor
}

# –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
$successCount = ($testResults | Where-Object { $_.Status -like "*–£–°–ü–ï–®–ù–û*" }).Count
$totalCount = $testResults.Count

Write-Status "`nüéØ –ò–¢–û–ì: $successCount –∏–∑ $totalCount –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" $(if ($successCount -eq $totalCount) { $Green } else { $Yellow })

if ($successCount -eq $totalCount) {
    Write-Status "`nüéâ ML-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!" $Green
    Write-Status "   –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:" $Cyan
    Write-Status "   ‚Ä¢ Backend API:    http://localhost:8000/docs" $Green
    Write-Status "   ‚Ä¢ Prometheus:     http://localhost:9090" $Green
    if (-not $SkipKenning) {
        Write-Status "   ‚Ä¢ Kenning ML API: http://localhost:8001/docs" $Green
    }
} else {
    Write-Status "`n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ML-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ." $Yellow
    Write-Status "   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º." $Yellow
}

Write-Status "`nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:" $Cyan
Write-Status "   docker rm -f ml-redis ml-prometheus ml-backend ml-kenning" $Yellow
