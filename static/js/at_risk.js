// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã /at-risk

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ—Ç–ª–∞–¥–∫–∞
console.log('At-Risk JS loaded');

// Simple Mode toggle
function toggleSimpleMode() {
    try {
        const body = document.body;
        const sw = document.getElementById('simpleSwitch');
        const on = !body.classList.contains('simple');
        console.log('Toggling Simple Mode:', on ? 'ON' : 'OFF');
        if (on) { 
            body.classList.add('simple'); 
            sw.classList.add('on'); 
        } else { 
            body.classList.remove('simple'); 
            sw.classList.remove('on'); 
        }
    } catch (error) {
        console.error('Error toggling mode:', error);
    }
}

// –î–æ–±–∞–≤–∏—Ç—å —É–∑–µ–ª –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞ #traits (–≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
async function addNodeFromInput() {
    try {
        var input = document.getElementById('traits');
        var traits = parseTraitsInput(input ? input.value : '');
        await addNode('module_state', traits);
    } catch (e) {
        console.error('addNodeFromInput error:', e);
    }
}

// –†–∞–∑–±–æ—Ä —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∞ "–ª—é–±–æ–≤—å:0.8, —Å—Ç—Ä–∞—Ö:0.2"
function parseTraitsInput(str) {
    var traits = {};
    if (!str) return traits;
    try {
        // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º/—Ç–æ—á–∫–∞–º —Å –∑–∞–ø—è—Ç–æ–π
        var parts = str.split(/[,;]+/);
        for (var i = 0; i < parts.length; i++) {
            var p = parts[i].trim();
            if (!p) continue;
            var kv = p.split(/[:=]+/);
            if (kv.length >= 2) {
                var key = kv[0].trim();
                var valRaw = kv.slice(1).join(':').trim();
                var val = parseFloat(valRaw.replace(',', '.'));
                if (isNaN(val)) val = 0.5;
                traits[key] = val;
            }
        }
    } catch (e) {
        console.warn('parseTraitsInput error:', e);
    }
    return traits;
}

// Sales Triggers logic (idempotent init to avoid double-load SyntaxError)
// –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
var SALES_TRIGGERS = window.SALES_TRIGGERS || [
    { id:'urgency',   label:'–°—Ä–æ—á–Ω–æ—Å—Ç—å ‚è≥' },
    { id:'scarcity',  label:'–î–µ—Ñ–∏—Ü–∏—Ç üìâ' },
    { id:'social',    label:'–°–æ—Ü.–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ üë•' },
    { id:'guarantee', label:'–ì–∞—Ä–∞–Ω—Ç–∏—è ‚úÖ' },
    { id:'bonus',     label:'–ë–æ–Ω—É—Å üéÅ' },
    { id:'discount',  label:'–°–∫–∏–¥–∫–∞ üí∏' },
];
window.SALES_TRIGGERS = SALES_TRIGGERS;

function getSelectedTriggers() {
    const activeChips = document.querySelectorAll('.chip-toggle.active');
    return Array.from(activeChips).map(chip => chip.dataset.id);
}

function saveSelectedTriggers(list) {
    localStorage.setItem('offline_at_risk_triggers', JSON.stringify(list));
}

function renderTriggerChips(selected) {
    const container = document.getElementById('triggerChips');
    if (!container) return;
    
    container.innerHTML = '';
    SALES_TRIGGERS.forEach(trigger => {
        const chip = document.createElement('div');
        chip.className = 'chip-toggle' + (selected.includes(trigger.id) ? ' active' : '');
        chip.textContent = trigger.label;
        chip.dataset.id = trigger.id;
        chip.addEventListener('click', () => {
            chip.classList.toggle('active');
            saveSelectedTriggers(getSelectedTriggers());
            refresh();
        });
        container.appendChild(chip);
    });
}

// API Functions
async function seedDemo() {
    try {
        const response = await fetch('/api/seed-demo', { method: 'POST' });
        const data = await response.json();
        console.log('Demo seeded:', data);
        refresh();
    } catch (error) {
        console.error('Seed demo error:', error);
    }
}

async function refresh() {
    try {
        const limitInput = document.getElementById('limit');
        const limit = limitInput ? limitInput.value || 5 : 5;
        
        const response = await fetch('/api/top-at-risk?limit=' + limit);
        const data = await response.json();
        renderTable(data);
    } catch (error) {
        console.error('Refresh error:', error);
    }
}

function renderTable(data) {
    const tbody = document.getElementById('tbody');
    if (!tbody) return;

    if (!data.topAtRiskEdges || !data.topAtRiskEdges.length) {
        tbody.innerHTML = '<tr><td colspan="5" class="empty">üîç –ü–æ–∫–∞ —Å–≤—è–∑–µ–π –Ω–µ—Ç</td></tr>';
        return;
    }

    // –≠–º–æ—Ü–∏–∏ –∏–∑ –ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∏
    const EMOTION_MAP = {
        '—Ä–∞–¥–æ—Å—Ç—å': 'üòä',
        '–≥—Ä—É—Å—Ç—å': 'üò¢', 
        '–≥–Ω–µ–≤': 'üò†',
        '—Å—Ç—Ä–∞—Ö': 'üò®',
        '–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ': 'ü§¢'
    };

    tbody.innerHTML = data.topAtRiskEdges.map(edge => {
        const isRisk = edge.score < 0.4;
        const emotionIcon = EMOTION_MAP[edge.emotion] || '‚ùì';
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–≤–µ—Ç—ã —Å–æ —Å–º–∞–π–ª–∞–º–∏
        const advice = (edge.advice || []).map(function(a) {
            if (a.includes('–¥—ã—à–∏')) return a + ' üå¨Ô∏è';
            if (a.includes('—Ä–æ–¥–∏—Ç–µ–ª')) return a + ' üë™';
            if (a.includes('–ø–æ—Ö–æ–∂')) return a + ' üîÑ';
            return a + ' üí°';
        }).join(' ');
        
        return '<tr class="' + (isRisk ? 'risk' : '') + '">' +
               '<td>' + advice + '</td>' +  // –°–æ–≤–µ—Ç—ã –≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ
               '<td>' + edge.sourceId + '</td>' +
               '<td>' + edge.targetId + '</td>' +
               '<td class="score">' + edge.score.toFixed(3) + '</td>' +
               '<td class="emotion">' + emotionIcon + ' ' + (edge.emotion || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') + '</td></tr>';
    }).join('');
}

// Glossary Popup Component
class GlossaryPopup {
  constructor() {
    this.terms = {
      '—Å–æ—Å—Ç–æ—è–Ω–∏–µ': '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –º–æ–¥—É–ª—è (0-1)',
      '—Å–≤—è–∑—å': '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≤–µ—Å–æ–º (score)'
    };
    this.initPopup();
  }

  initPopup() {
    this.popup = document.createElement('div');
    this.popup.className = 'glossary-popup';
    document.body.appendChild(this.popup);
  }

  showTerm(term) {
    this.popup.innerHTML = `<h3>${term}</h3><p>${this.terms[term]}</p>`;
    this.popup.style.display = 'block';
  }
}

// Initialize on first hover
const glossary = new GlossaryPopup();

// Add tooltips for key terms
const TOOLTIPS = {
  '—Å–æ—Å—Ç–æ—è–Ω–∏–µ': '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ/–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥—É–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ª—é–±–æ–≤—å, —Å—Ç—Ä–∞—Ö)',
  '—Å–≤—è–∑—å': '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏, —Ç—Ä–µ–±—É—é—â–µ–µ –≤–Ω–∏–º–∞–Ω–∏—è'
};

function showTooltip(term) {
  return TOOLTIPS[term] || '';
}

// Human-readable use cases
const USE_CASES = [
  {
    title: "–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
    steps: [
      "1. –í–≤–µ–¥–∏—Ç–µ —ç–º–æ—Ü–∏—é –∏ —Å–∏–ª—É (0-1) –≤ –ø–æ–ª–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤",
      "2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å'"
    ]
  },
  {
    title: "–ù–∞–π—Ç–∏ —Å–ª–∞–±—ã–µ —Å–≤—è–∑–∏",
    steps: [
      "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–±–Ω–æ–≤–∏—Ç—å'",
      "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∞–±–ª–∏—Ü—É '–¢–æ–ø —Ä–∏—Å–∫–æ–≤'"
    ]
  }
];

function renderUseCases() {
  const container = document.createElement('div');
  container.className = 'use-cases';
  
  USE_CASES.forEach(uc => {
    const card = document.createElement('div');
    card.innerHTML = `
      <h4>${uc.title}</h4>
      <ul>
        ${uc.steps.map(s => `<li>${s}</li>`).join('')}
      </ul>
    `;
    container.appendChild(card);
  });
  
  document.body.appendChild(container);
}

// Remove advanced controls and simplify to core flow
function initSimplifiedUI() {
  document.querySelector('.advanced-controls').style.display = 'none';
  
  // Keep only essential buttons
  const essentialBtns = ['seedDemo', 'refresh'];
  document.querySelectorAll('button').forEach(btn => {
    if (!essentialBtns.includes(btn.id)) {
      btn.remove();
    }
  });
}

// Initialize
function init() {
    // Load saved triggers
    const savedTriggers = JSON.parse(localStorage.getItem('offline_at_risk_triggers') || '[]');
    renderTriggerChips(savedTriggers);
    renderUseCases();
    initSimplifiedUI();
}

// Start when DOM is ready
if (document.readyState !== 'loading') {
    init();
} else {
    document.addEventListener('DOMContentLoaded', init);
}

// --- Missing functions implemented ---
// Add a node via API with given kind and traits
async function addNode(kind, traits) {
    try {
        var payload = { kind: kind || 'module_state', traits: traits || {} };
        var resp = await fetch('/api/add-node', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });
        var data = await resp.json();
        console.log('Node added:', data);
        await refresh();
    } catch (e) {
        console.error('addNode error:', e);
    }
}

// Add a simple node based on selected triggers or defaults
async function addNodeSimple() {
    try {
        var selected = getSelectedTriggers();
        var traits = {};
        // Map triggers to simple numeric traits [0..1]
        for (var i = 0; i < selected.length; i++) {
            var key = selected[i];
            traits[key] = 0.8; // simple default weight
        }
        if (selected.length === 0) {
            // fallback trait
            traits['neutral'] = 0.5;
        }
        await addNode('module_state', traits);
    } catch (e) {
        console.error('addNodeSimple error:', e);
    }
}

// Minimal UI self-test to verify functions are bound and API reachable
async function runUiSelfTest() {
    try {
        console.log('[SELFTEST] start');
        if (typeof toggleSimpleMode !== 'function') throw new Error('toggleSimpleMode missing');
        if (typeof seedDemo !== 'function') throw new Error('seedDemo missing');
        if (typeof refresh !== 'function') throw new Error('refresh missing');
        if (typeof addNode !== 'function') throw new Error('addNode missing');
        if (typeof addNodeSimple !== 'function') throw new Error('addNodeSimple missing');
        console.log('[SELFTEST] functions present');
        await refresh();
        console.log('[SELFTEST] refresh ok');
    } catch (e) {
        console.error('[SELFTEST] error', e);
    }
}

// Explicitly export functions to window
window.toggleSimpleMode = toggleSimpleMode;
window.seedDemo = seedDemo;
window.refresh = refresh;
window.addNode = addNode;
window.addNodeSimple = addNodeSimple;
window.runUiSelfTest = runUiSelfTest;
window.addNodeFromInput = addNodeFromInput;

// Enhanced preview display
function showPreview(value) {
  const preview = document.getElementById('preview');
  preview.innerHTML = value ? 
    `<div class="preview-box">
      ${renderPreviewContent(value)}
    </div>` : '';
}

function renderPreviewContent(value) {
  const [emotion, strength] = value.split(' ');
  const icon = EMOTION_MAP[emotion] || '‚ùì';
  
  if (!strength || isNaN(strength)) 
    return '–§–æ—Ä–º–∞—Ç: —ç–º–æ—Ü–∏—è —á–∏—Å–ª–æ (0-1)';
    
  const num = parseFloat(strength);
  const strengthColor = 
    num < 0.3 ? 'red' : num < 0.6 ? 'orange' : 'green';
    
  return `
    <div>${icon} –≠–º–æ—Ü–∏—è: <strong>${emotion || '?'}</strong></div>
    <div>–°–∏–ª–∞: <span style="color:${strengthColor}">${num.toFixed(2)}</span></div>
  `;
}
