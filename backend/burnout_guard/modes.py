"""
üöÄüõ°Ô∏è BurnoutGuard Modes ‚Äî —Ä–µ–∂–∏–º—ã –≤—ã–≥–æ—Ä–∞–Ω–∏—è

–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ Emotime –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –≤—ã–≥–æ—Ä–∞–Ω–∏—è:
- –ú–∞–ø–ø–∏–Ω–≥ 6 –±–∞–∑–æ–≤—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤—ã–≥–æ—Ä–∞–Ω–∏—è
- –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤—ã–≥–æ—Ä–∞–Ω–∏—è
- –°–∫–æ—Ä–∏–Ω–≥ —Ä–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Ä–µ–∂–∏–º–æ–≤

–ë–∞–∑–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã Emotime ‚Üí –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤—ã–≥–æ—Ä–∞–Ω–∏—è:
‚Ä¢ Stress ‚Üí –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –≤—ã–≥–æ—Ä–∞–Ω–∏—è
‚Ä¢ Calm ‚Üí –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ)  
‚Ä¢ Focus ‚Üí –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ (–µ—Å–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π)
‚Ä¢ Joy ‚Üí –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫ (–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
‚Ä¢ Contemplation ‚Üí –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ (—Ä–µ—Ñ–ª–µ–∫—Å–∏—è –ø—Ä–æ–±–ª–µ–º)
‚Ä¢ Neutral ‚Üí –ë–∞–∑–æ–≤—ã–π —Ä–∏—Å–∫
"""

import numpy as np
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple
from enum import Enum

from ..emotime.modes import EmotionalMode, ModeType as EmotionalModeType


class BurnoutRiskLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ —Ä–∏—Å–∫–∞ –≤—ã–≥–æ—Ä–∞–Ω–∏—è."""
    VERY_LOW = "very_low"      # 0-20%
    LOW = "low"                # 21-40%
    MEDIUM = "medium"          # 41-60%
    HIGH = "high"              # 61-80% 
    CRITICAL = "critical"      # 81-100%


class BurnoutModeType(Enum):
    """–¢–∏–ø—ã —Ä–µ–∂–∏–º–æ–≤ –≤—ã–≥–æ—Ä–∞–Ω–∏—è."""
    HEALTHY = "healthy"                    # –ó–¥–æ—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    OVERWORK = "overwork"                  # –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞
    EMOTIONAL_EXHAUSTION = "exhaustion"    # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏—Å—Ç–æ—â–µ–Ω–∏–µ
    CYNICISM = "cynicism"                  # –¶–∏–Ω–∏–∑–º/–æ—Ç—Å—Ç—Ä–∞–Ω–µ–Ω–Ω–æ—Å—Ç—å
    INEFFICACY = "inefficacy"             # –°–Ω–∏–∂–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    CRISIS = "crisis"                      # –ö—Ä–∏–∑–∏—Å –≤—ã–≥–æ—Ä–∞–Ω–∏—è


@dataclass
class BurnoutMode:
    """–†–µ–∂–∏–º –≤—ã–≥–æ—Ä–∞–Ω–∏—è."""
    type: BurnoutModeType
    risk_level: BurnoutRiskLevel
    risk_score: float              # 0.0-1.0
    primary_indicators: List[str]  # –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    emotional_pattern: str         # –ø–∞—Ç—Ç–µ—Ä–Ω —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
    duration_hours: float = 0.0    # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö
    confidence: float = 0.0        # —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –¥–µ—Ç–µ–∫—Ü–∏–∏
    
    
class BurnoutModeMapper:
    """
    –°–∏—Å—Ç–µ–º–∞ –º–∞–ø–ø–∏–Ω–≥–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –≤ —Ä–µ–∂–∏–º—ã –≤—ã–≥–æ—Ä–∞–Ω–∏—è.
    
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
    –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤—ã–≥–æ—Ä–∞–Ω–∏—è.
    """
    
    # –ú–∞–ø–ø–∏–Ω–≥ –±–∞–∑–æ–≤—ã—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –≤ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞
    EMOTIONAL_TO_RISK_MAPPING = {
        EmotionalModeType.STRESS: {
            "base_risk": 0.8,
            "risk_multiplier": 1.5,     # —Å—Ç—Ä–µ—Å—Å —É—Å–∏–ª–∏–≤–∞–µ—Ç —Ä–∏—Å–∫
            "burnout_indicators": ["high_arousal", "negative_valence", "tension"]
        },
        EmotionalModeType.CALM: {
            "base_risk": 0.1,
            "risk_multiplier": 0.3,     # —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ —Å–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫
            "burnout_indicators": ["recovery", "balance", "restoration"]
        },
        EmotionalModeType.FOCUS: {
            "base_risk": 0.3,
            "risk_multiplier": 1.2,     # –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∏—Å–∫–æ–º
            "burnout_indicators": ["concentration", "potential_overwork"]
        },
        EmotionalModeType.JOY: {
            "base_risk": 0.05,
            "risk_multiplier": 0.2,     # —Ä–∞–¥–æ—Å—Ç—å –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –≤—ã–≥–æ—Ä–∞–Ω–∏—è
            "burnout_indicators": ["positive_engagement", "fulfillment"]
        },
        EmotionalModeType.CONTEMPLATION: {
            "base_risk": 0.4,
            "risk_multiplier": 0.8,     # —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
            "burnout_indicators": ["reflection", "potential_rumination"]
        },
        EmotionalModeType.NEUTRAL: {
            "base_risk": 0.25,
            "risk_multiplier": 1.0,     # –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
            "burnout_indicators": ["baseline"]
        }
    }
    
    # –û–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Ä–µ–∂–∏–º–æ–≤
    DANGEROUS_PATTERNS = {
        "chronic_stress": {
            "pattern": [EmotionalModeType.STRESS] * 3,  # 3+ —Ü–∏–∫–ª–æ–≤ —Å—Ç—Ä–µ—Å—Å–∞ –ø–æ–¥—Ä—è–¥
            "risk_score": 0.9,
            "burnout_mode": BurnoutModeType.EMOTIONAL_EXHAUSTION
        },
        "stress_contemplation_cycle": {
            "pattern": [EmotionalModeType.STRESS, EmotionalModeType.CONTEMPLATION],
            "risk_score": 0.7,
            "burnout_mode": BurnoutModeType.CYNICISM
        },
        "prolonged_focus": {
            "pattern": [EmotionalModeType.FOCUS] * 4,  # 4+ —Ü–∏–∫–ª–æ–≤ —Ñ–æ–∫—É—Å–∞
            "risk_score": 0.6,
            "burnout_mode": BurnoutModeType.OVERWORK
        },
        "emotional_flatness": {
            "pattern": [EmotionalModeType.NEUTRAL] * 5,  # 5+ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
            "risk_score": 0.5,
            "burnout_mode": BurnoutModeType.INEFFICACY
        },
        "joy_deficit": {
            "pattern": "no_joy_24h",  # –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–∞–¥–æ—Å—Ç–∏ 24 —á–∞—Å–∞
            "risk_score": 0.8,
            "burnout_mode": BurnoutModeType.EMOTIONAL_EXHAUSTION
        }
    }
    
    def __init__(self, lookback_hours: int = 24):
        self.lookback_hours = lookback_hours
        self.mode_history: List[Tuple[EmotionalMode, datetime]] = []
        
    async def analyze_burnout_risk(
        self, 
        emotional_modes: List[Tuple[EmotionalMode, datetime]]
    ) -> BurnoutMode:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∏—Å–∫ –≤—ã–≥–æ—Ä–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤.
        
        Args:
            emotional_modes: –ò—Å—Ç–æ—Ä–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ —Å timestamps
            
        Returns:
            –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–≥–æ—Ä–∞–Ω–∏—è
        """
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        cutoff_time = datetime.now() - timedelta(hours=self.lookback_hours)
        recent_modes = [
            (mode, ts) for mode, ts in emotional_modes 
            if ts >= cutoff_time
        ]
        
        if not recent_modes:
            return self._create_default_mode()
        
        # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π —Ä–∏—Å–∫
        base_risk = await self._calculate_base_risk(recent_modes)
        
        # 2. –ò—â–µ–º –æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        pattern_risk, detected_pattern = await self._detect_dangerous_patterns(recent_modes)
        
        # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
        trend_risk = await self._analyze_trends(recent_modes)
        
        # 4. –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–∏—Å–∫–∏
        total_risk = min(1.0, base_risk * 0.4 + pattern_risk * 0.4 + trend_risk * 0.2)
        
        # 5. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –≤—ã–≥–æ—Ä–∞–Ω–∏—è
        burnout_mode = await self._determine_burnout_mode(
            total_risk, detected_pattern, recent_modes
        )
        
        return burnout_mode
    
    async def _calculate_base_risk(
        self, 
        recent_modes: List[Tuple[EmotionalMode, datetime]]
    ) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–π —Ä–∏—Å–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤."""
        
        total_risk = 0.0
        total_duration = 0.0
        
        for mode, timestamp in recent_modes:
            mode_mapping = self.EMOTIONAL_TO_RISK_MAPPING.get(mode.type, {})
            base_risk = mode_mapping.get("base_risk", 0.25)
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∂–∏–º–∞
            duration_weight = mode.duration if hasattr(mode, "duration") else 1.0
            intensity_weight = mode.intensity if hasattr(mode, "intensity") else 1.0
            
            weighted_risk = base_risk * intensity_weight * duration_weight
            total_risk += weighted_risk
            total_duration += duration_weight
            
        return total_risk / max(total_duration, 1.0)
    
    async def _detect_dangerous_patterns(
        self, 
        recent_modes: List[Tuple[EmotionalMode, datetime]]
    ) -> Tuple[float, Optional[str]]:
        """–î–µ—Ç–µ–∫—Ç–∏—Ç –æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∂–∏–º–æ–≤."""
        
        if len(recent_modes) < 2:
            return 0.0, None
            
        mode_sequence = [mode.type for mode, _ in recent_modes]
        max_risk = 0.0
        detected_pattern = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –æ–ø–∞—Å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        for pattern_name, pattern_config in self.DANGEROUS_PATTERNS.items():
            if pattern_name == "joy_deficit":
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä–∞–¥–æ—Å—Ç–∏
                has_joy = any(mode == EmotionalModeType.JOY for mode in mode_sequence)
                if not has_joy and len(recent_modes) >= 12:  # 12 —Ü–∏–∫–ª–æ–≤ = –ø—Ä–∏–º–µ—Ä–Ω–æ 12 —á–∞—Å–æ–≤
                    risk = pattern_config["risk_score"]
                    if risk > max_risk:
                        max_risk = risk
                        detected_pattern = pattern_name
            else:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
                pattern = pattern_config["pattern"]
                if self._sequence_contains_pattern(mode_sequence, pattern):
                    risk = pattern_config["risk_score"]
                    if risk > max_risk:
                        max_risk = risk
                        detected_pattern = pattern_name
        
        return max_risk, detected_pattern
    
    def _sequence_contains_pattern(
        self, 
        sequence: List[EmotionalModeType], 
        pattern: List[EmotionalModeType]
    ) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–∞—Å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω."""
        
        if len(pattern) > len(sequence):
            return False
            
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        for i in range(len(sequence) - len(pattern) + 1):
            if sequence[i:i+len(pattern)] == pattern:
                return True
                
        return False
    
    async def _analyze_trends(
        self, 
        recent_modes: List[Tuple[EmotionalMode, datetime]]
    ) -> float:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã —É—Ö—É–¥—à–µ–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        
        if len(recent_modes) < 4:
            return 0.0
            
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞
        window_size = len(recent_modes) // 4
        windows = [
            recent_modes[i:i+window_size] 
            for i in range(0, len(recent_modes), window_size)
        ]
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–∫–Ω–∞
        window_risks = []
        for window in windows:
            if window:
                avg_risk = sum(
                    self.EMOTIONAL_TO_RISK_MAPPING.get(mode.type, {}).get("base_risk", 0.25)
                    for mode, _ in window
                ) / len(window)
                window_risks.append(avg_risk)
        
        if len(window_risks) < 2:
            return 0.0
            
        # –í—ã—á–∏—Å–ª—è–µ–º —Ç—Ä–µ–Ω–¥ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ä–∏—Å–∫?)
        trend = np.polyfit(range(len(window_risks)), window_risks, 1)[0]
        
        # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ = —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∏—Å–∫–∞
        return max(0.0, min(1.0, trend * 2.0))  # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ [0, 1]
    
    async def _determine_burnout_mode(
        self, 
        total_risk: float,
        detected_pattern: Optional[str],
        recent_modes: List[Tuple[EmotionalMode, datetime]]
    ) -> BurnoutMode:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–≥–æ—Ä–∞–Ω–∏—è."""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
        if total_risk <= 0.2:
            risk_level = BurnoutRiskLevel.VERY_LOW
        elif total_risk <= 0.4:
            risk_level = BurnoutRiskLevel.LOW
        elif total_risk <= 0.6:
            risk_level = BurnoutRiskLevel.MEDIUM
        elif total_risk <= 0.8:
            risk_level = BurnoutRiskLevel.HIGH
        else:
            risk_level = BurnoutRiskLevel.CRITICAL
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤—ã–≥–æ—Ä–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        if detected_pattern:
            pattern_config = self.DANGEROUS_PATTERNS[detected_pattern]
            burnout_type = pattern_config.get("burnout_mode", BurnoutModeType.OVERWORK)
        else:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–º—É —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Ä–µ–∂–∏–º—É
            mode_counts = {}
            for mode, _ in recent_modes:
                mode_counts[mode.type] = mode_counts.get(mode.type, 0) + 1
                
            dominant_mode = max(mode_counts, key=mode_counts.get)
            burnout_type = self._map_emotional_to_burnout_type(dominant_mode, total_risk)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        indicators = self._generate_indicators(recent_modes, detected_pattern)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –æ–ø–∏—Å–∞–Ω–∏—è
        pattern_desc = self._generate_pattern_description(recent_modes, detected_pattern)
        
        return BurnoutMode(
            type=burnout_type,
            risk_level=risk_level,
            risk_score=total_risk,
            primary_indicators=indicators,
            emotional_pattern=pattern_desc,
            duration_hours=self.lookback_hours,
            confidence=min(0.95, 0.5 + total_risk * 0.5)  # –≤—ã—à–µ —Ä–∏—Å–∫ = –≤—ã—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        )
    
    def _map_emotional_to_burnout_type(
        self, 
        dominant_mode: EmotionalModeType, 
        risk_score: float
    ) -> BurnoutModeType:
        """–ú–∞–ø–ø–∏—Ç –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –≤ —Ç–∏–ø –≤—ã–≥–æ—Ä–∞–Ω–∏—è."""
        
        if risk_score < 0.3:
            return BurnoutModeType.HEALTHY
        elif dominant_mode == EmotionalModeType.STRESS:
            return BurnoutModeType.EMOTIONAL_EXHAUSTION
        elif dominant_mode == EmotionalModeType.FOCUS:
            return BurnoutModeType.OVERWORK
        elif dominant_mode == EmotionalModeType.CONTEMPLATION:
            return BurnoutModeType.CYNICISM
        elif dominant_mode == EmotionalModeType.NEUTRAL:
            return BurnoutModeType.INEFFICACY
        else:
            return BurnoutModeType.OVERWORK
    
    def _generate_indicators(
        self, 
        recent_modes: List[Tuple[EmotionalMode, datetime]],
        detected_pattern: Optional[str]
    ) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤—ã–≥–æ—Ä–∞–Ω–∏—è."""
        
        indicators = []
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∂–∏–º–æ–≤
        mode_counts = {}
        for mode, _ in recent_modes:
            mode_counts[mode.type] = mode_counts.get(mode.type, 0) + 1
            
        total_modes = len(recent_modes)
        
        if mode_counts.get(EmotionalModeType.STRESS, 0) / total_modes > 0.3:
            indicators.append("–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞")
            
        if mode_counts.get(EmotionalModeType.JOY, 0) / total_modes < 0.1:
            indicators.append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π")
            
        if mode_counts.get(EmotionalModeType.FOCUS, 0) / total_modes > 0.5:
            indicators.append("–ß—Ä–µ–∑–º–µ—Ä–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ä–∞–±–æ—Ç–µ")
            
        if mode_counts.get(EmotionalModeType.NEUTRAL, 0) / total_modes > 0.4:
            indicators.append("–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏—Ç—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å")
            
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        if detected_pattern:
            pattern_indicators = {
                "chronic_stress": "–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å",
                "stress_contemplation_cycle": "–¶–∏–∫–ª—ã —Å—Ç—Ä–µ—Å—Å–∞ –∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π",
                "prolonged_focus": "–î–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞",
                "emotional_flatness": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —É–ø–ª–æ—â–µ–Ω–Ω–æ—Å—Ç—å", 
                "joy_deficit": "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–∞–¥–æ—Å—Ç–∏"
            }
            indicator = pattern_indicators.get(detected_pattern)
            if indicator:
                indicators.append(indicator)
        
        return indicators if indicators else ["–ë–∞–∑–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"]
    
    def _generate_pattern_description(
        self, 
        recent_modes: List[Tuple[EmotionalMode, datetime]],
        detected_pattern: Optional[str]
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞."""
        
        if detected_pattern:
            descriptions = {
                "chronic_stress": "–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ü–∏–∫–ª—ã —Å—Ç—Ä–µ—Å—Å–∞",
                "stress_contemplation_cycle": "–ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–∞ –∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π",
                "prolonged_focus": "–î–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏",
                "emotional_flatness": "–ü—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
                "joy_deficit": "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–º–æ—Ü–∏–π"
            }
            return descriptions.get(detected_pattern, "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —Ä–µ–∂–∏–º–æ–≤
        mode_counts = {}
        for mode, _ in recent_modes:
            mode_counts[mode.type] = mode_counts.get(mode.type, 0) + 1
            
        if not mode_counts:
            return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
            
        dominant_mode = max(mode_counts, key=mode_counts.get)
        mode_names = {
            EmotionalModeType.CALM: "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ",
            EmotionalModeType.FOCUS: "–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è", 
            EmotionalModeType.STRESS: "—Å—Ç—Ä–µ—Å—Å",
            EmotionalModeType.JOY: "—Ä–∞–¥–æ—Å—Ç—å",
            EmotionalModeType.CONTEMPLATION: "—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è",
            EmotionalModeType.NEUTRAL: "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å"
        }
        
        dominant_name = mode_names.get(dominant_mode, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        return f"–ü—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏–µ: {dominant_name}"
    
    def _create_default_mode(self) -> BurnoutMode:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö."""
        
        return BurnoutMode(
            type=BurnoutModeType.HEALTHY,
            risk_level=BurnoutRiskLevel.LOW,
            risk_score=0.2,
            primary_indicators=["–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"],
            emotional_pattern="–ë–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
            duration_hours=0.0,
            confidence=0.3
        )