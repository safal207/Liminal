{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE LambdaCase #-}

module Main where

import qualified –¢—ã–ò–Ø–û–¥–Ω–æ–π–ö—Ä–æ–≤–∏ as TYOK
import qualified OneBloodEmpathyTraining as OBET
import MusicOfTransition (EmotionalState(..))
import Data.Aeson (FromJSON, eitherDecode, decode, encode)
import qualified Data.ByteString.Lazy as BL
import Data.Map (Map)
import qualified Data.Map as M
import Data.Text (Text, pack, unpack)
import qualified Data.Text.IO as T
import Data.List (intercalate)
import System.Environment (getArgs, getProgName)
import System.Exit (exitSuccess, exitFailure, ExitCode(..))
import System.FilePath (takeExtension)
import Data.Maybe (fromMaybe, listToMaybe)
import Data.Time (getCurrentTime)
import Control.Monad (when, unless)
import Control.Exception (try, SomeException)
import GHC.Generics (Generic)
import Data.Aeson.Types (FromJSON(..), ToJSON(..), withObject, (.:), (.:?))
import Data.Scientific (toRealFloat)

-- | Command line commands
data Command 
    = Train { logFile :: FilePath, userId :: String }
    | Suggest { mapFile :: FilePath, emotion :: String }
    | Save { inputMap :: FilePath, outputMap :: FilePath }
    | Load { mapFile :: FilePath }
    | Help
    deriving (Show, Eq)

-- | Parse command line arguments
parseArgs :: [String] -> IO Command
parseArgs [] = return Help
parseArgs ("help" : _) = return Help
parseArgs ("train" : logFile : userId : _) = return $ Train logFile userId
parseArgs ("suggest" : mapFile : emotion : _) = return $ Suggest mapFile emotion
parseArgs ("save" : input : output : _) = return $ Save input output
parseArgs ("load" : mapFile : _) = return $ Load mapFile
parseArgs _ = do
    putStrLn "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
    exitFailure

-- | Display help message
showHelp :: IO ()
showHelp = do
    progName <- getProgName
    putStrLn $ unlines
        [ "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: " ++ progName ++ " –ö–û–ú–ê–ù–î–ê [–ê–†–ì–£–ú–ï–ù–¢–´...]"
        , ""
        , "–ö–æ–º–∞–Ω–¥—ã:"
        , "  train <–ª–æ–≥.jsonl> <userId>  –û–±—É—á–∏—Ç—å SharedResonanceMap –∏–∑ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤"
        , "  suggest <map.json> <emotion>  –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ —ç–º–æ—Ü–∏—é"
        , "  save <–≤—Ö–æ–¥–Ω–∞—è_–∫–∞—Ä—Ç–∞> <–≤—ã—Ö–æ–¥–Ω–∞—è_–∫–∞—Ä—Ç–∞>  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—É—á–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É"
        , "  load <map.json>  –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—Ä—Ç—É"
        , "  help  –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        ]

-- | Load a resonance map from file
loadResonanceMap :: FilePath -> IO (Either String TYOK.SharedResonanceMap)
loadResonanceMap filePath = do
    putStrLn $ "üîç –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω–æ–π –∫–∞—Ä—Ç—ã –∏–∑ " ++ filePath
    content <- BL.readFile filePath
    return $ eitherDecode content

-- | Save a resonance map to file
saveResonanceMap :: FilePath -> TYOK.SharedResonanceMap -> IO ()
saveResonanceMap filePath srm = do
    putStrLn $ "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω–æ–π –∫–∞—Ä—Ç—ã –≤ " ++ filePath
    BL.writeFile filePath (encode srm)

-- | Train a resonance map from log file
trainFromLogs :: FilePath -> String -> IO ()
trainFromLogs logFile userId' = do
    putStrLn $ "üéì –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –ª–æ–≥–∞—Ö –∏–∑ " ++ logFile
    
    -- Check file extension
    unless (takeExtension logFile == ".jsonl") $
        putStrLn "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .jsonl"
    
    -- Load and parse logs
    logContent <- BL.readFile logFile
    let logs = map (eitherDecode . BL.fromStrict) $ BL.split (fromIntegral (fromEnum '\n')) logContent
    
    case sequence logs of
        Left err -> do
            putStrLn $ "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –ª–æ–≥–æ–≤: " ++ err
            exitFailure
        Right transitions -> do
            putStrLn $ "üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ " ++ show (length transitions) ++ " –ø–µ—Ä–µ—Ö–æ–¥–æ–≤"
            
            -- Create or load existing map
            currentTime <- getCurrentTime
            let initialMap = TYOK.emptyResonanceMap (pack userId')
            
            -- Train the model
            putStrLn "üß† –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏..."
            trainedMap <- TYOK.learnFromTransitions transitions initialMap
            
            -- Save the trained map
            let outputFile = "trained_map_" ++ userId' ++ ".json"
            saveResonanceMap outputFile trainedMap
            putStrLn $ "‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ " ++ outputFile

-- | Suggest responses for an emotion
suggestResponses :: FilePath -> String -> IO ()
suggestResponses mapFile' emotion' = do
    result <- loadResonanceMap mapFile'
    case result of
        Left err -> do
            putStrLn $ "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã: " ++ err
            exitFailure
        Right srm -> do
            -- Create a test emotional state with the given emotion
            currentTime <- getCurrentTime
            let testState = EmotionalState
                    { esEmotions = M.singleton (pack emotion') 0.8
                    , esText = pack $ "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç–º–æ—Ü–∏–∏: " ++ emotion'
                    , esLinguisticCues = []
                    , esTimestamp = currentTime
                    }
            
            -- Get suggested responses
            let responses = TYOK.matchUserState testState srm
            
            -- Display results
            if null responses
                then putStrLn "ü§∑ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π —ç–º–æ—Ü–∏–∏."
                else do
                    putStrLn "üîç –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏:"
                    mapM_ (T.putStrLn . ("- " <>) . TYOK.srText) (take 3 responses)  -- Show top 3 responses

-- | Main function
main :: IO ()
main = do
    args <- getArgs
    cmd <- parseArgs args
    
    case cmd of
        Train logFile' userId' -> do
            trainFromLogs logFile' userId'
            
        Suggest mapFile' emotion' -> do
            suggestResponses mapFile' emotion'
            
        Save inputMap' outputMap' -> do
            result <- loadResonanceMap inputMap'
            case result of
                Left err -> do
                    putStrLn $ "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã: " ++ err
                    exitFailure
                Right srm -> do
                    saveResonanceMap outputMap' srm
                    putStrLn $ "‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ " ++ outputMap'
                    
        Load mapFile' -> do
            result <- loadResonanceMap mapFile'
            case result of
                Left err -> do
                    putStrLn $ "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã: " ++ err
                    exitFailure
                Right srm -> do
                    let nodeCount = M.size (TYOK.srmNodes srm)
                        respCount = M.size (TYOK.srmResponses srm)
                    putStrLn $ "‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:"
                    putStrLn $ "   - –£–∑–ª–æ–≤: " ++ show nodeCount
                    putStrLn $ "   - –û—Ç–≤–µ—Ç–æ–≤: " ++ show respCount
                    putStrLn $ "   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " ++ unpack (TYOK.srmUserId srm)
                    
        Help -> showHelp

-- | Helper function to convert a list to a non-empty list
toNonEmpty :: [a] -> Maybe (NonEmpty a)
toNonEmpty [] = Nothing
toNonEmpty (x:xs) = Just (x :| xs)

-- | Helper function to convert a non-empty list to a list
fromNonEmpty :: NonEmpty a -> [a]
fromNonEmpty (x :| xs) = x : xs

-- | JSON instance for EmotionalTransition
instance FromJSON TYOK.EmotionalTransition where
    parseJSON = withObject "EmotionalTransition" $ \v -> do
        states <- v .: "states"
        timestamp <- v .: "timestamp"
        effectiveness <- v .:? "effectiveness" .!= 0.5
        case toNonEmpty states of
            Nothing -> fail "states cannot be empty"
            Just neStates -> return TYOK.EmotionalTransition
                { TYOK.etStates = neStates
                , TYOK.etTimestamp = timestamp
                , TYOK.etEffectiveness = effectiveness
                }
