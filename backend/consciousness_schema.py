"""
üåå Consciousness Schema for Neo4j Temporal Data Lake
–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–∑–Ω–∞–Ω–∏—è
"""

import json
from dataclasses import dataclass
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional


class ConsciousnessState(Enum):
    """–û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–Ω–∞–Ω–∏—è"""

    # –ë–∞–∑–æ–≤—ã–µ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    HOME_AUTHENTIC = "home_authentic"  # –î–æ–º - –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å —Å–æ–±–æ–π
    RESONANCE_FLOW = "resonance_flow"  # –ü–æ—Ç–æ–∫ —Ä–µ–∑–æ–Ω–∞–Ω—Å–∞ —Å –¥—Ä—É–≥–∏–º–∏
    PRESENCE_NOW = "presence_now"  # –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å
    QUESTION_SPACE = "question_space"  # –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    HARMONY_BALANCE = "harmony_balance"  # –ì–∞—Ä–º–æ–Ω–∏—è –æ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–µ–±—è
    TRANSITION_LIMINAL = "transition_liminal"  # –ü–µ—Ä–µ—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –Ω–µ–ª–∏–Ω–µ–π–Ω—ã–µ –ø—É—Ç–∏
    DOUBT_CREATIVE = "doubt_creative"  # –¢–≤–æ—Ä—á–µ—Å–∫–æ–µ —Å–æ–º–Ω–µ–Ω–∏–µ –∫–∞–∫ —Ä–µ—Å—É—Ä—Å
    CURIOUS_FLOW = "curious_flow"  # –ü–æ—Ç–æ–∫ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–∞
    ANGER_PROTECTION = "anger_protection"  # –ó–∞—â–∏—Ç–Ω—ã–π –≥–Ω–µ–≤ –∫–∞–∫ –≥—Ä–∞–Ω–∏—Ü–∞
    BOUNDARY_INTEGRITY = "boundary_integrity"  # –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ª–∏—á–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü
    WITHDRAWAL_PROTECTION = "withdrawal_protection"  # –£—Ö–æ–¥ –¥–ª—è —Å–∞–º–æ–∑–∞—â–∏—Ç—ã
    GRIEF_TRANSFORMATION = "grief_transformation"  # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è —á–µ—Ä–µ–∑ –≥–æ—Ä–µ
    GRATITUDE_PRESENCE = "gratitude_presence"  # –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –≤ –Ω–∞—Å—Ç–æ—è—â–µ–º


class TransitionTrigger(Enum):
    """–¢—Ä–∏–≥–≥–µ—Ä—ã –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏"""

    # –ë–∞–∑–æ–≤—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
    THYROID_INSIGHT = "thyroid_insight_release"
    SELF_HONESTY = "moment_of_self_honesty"
    RESONANCE_MATCH = "resonance_with_other"
    QUESTION_EMERGENCE = "right_question_asked"
    HARMONY_RECOGNITION = "harmony_recognized"
    PRESENCE_ANCHOR = "presence_anchored"
    DEEP_BREATH = "deep_breathing_meditation"
    MEDITATION = "meditation_practice"
    AUTHENTICITY_INSIGHT = "authenticity_insight"

    # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏ –Ω–µ–ª–∏–Ω–µ–π–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
    CREATIVE_DOUBT = "allowing_creative_doubt"  # –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ —Å–æ–º–Ω–µ–Ω–∏—è
    CURIOSITY_SPARK = "curiosity_sparked"  # –í—Å–ø—ã—à–∫–∞ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–∞
    BOUNDARY_VIOLATION = "boundary_violation_detected"  # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü
    ANGER_RELEASE = "healthy_anger_released"  # –ó–¥–æ—Ä–æ–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≥–Ω–µ–≤–∞
    BOUNDARY_SETTING = "boundary_consciously_set"  # –û—Å–æ–∑–Ω–∞–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–∞–Ω–∏—Ü
    OVERWHELM_DETECTED = "emotional_overwhelm_detected"  # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
    GRIEF_ACKNOWLEDGED = "grief_consciously_felt"  # –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ –≥–æ—Ä—è
    GRATITUDE_PRACTICE = "gratitude_practice_engaged"  # –ü—Ä–∞–∫—Ç–∏–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏


@dataclass
class ConsciousnessNode:
    """–£–∑–µ–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–Ω–∞–Ω–∏—è –≤ Neo4j"""

    id: str
    state: ConsciousnessState
    timestamp: datetime

    # –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ (0.0 - 1.0)
    home_resonance: float  # –ù–∞—Å–∫–æ–ª—å–∫–æ "–¥–æ–º–∞" —Å —Å–æ–±–æ–π
    presence_level: float  # –£—Ä–æ–≤–µ–Ω—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –≤ –º–æ–º–µ–Ω—Ç–µ
    harmony_index: float  # –ò–Ω–¥–µ–∫—Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≥–∞—Ä–º–æ–Ω–∏–∏
    authenticity_score: float  # –û—Ü–µ–Ω–∫–∞ –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç–∏

    # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    emotional_charge: float  # –û—Ç —â–∏—Ç–æ–≤–∏–¥–∫–∏
    stress_level: float  # –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞

    # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    location: Optional[str] = None
    activity: Optional[str] = None
    companions: Optional[List[str]] = None

    def to_neo4j_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Neo4j"""
        return {
            "id": self.id,
            "state": self.state.value,
            "timestamp": self.timestamp.isoformat(),
            "home_resonance": self.home_resonance,
            "presence_level": self.presence_level,
            "harmony_index": self.harmony_index,
            "authenticity_score": self.authenticity_score,
            "emotional_charge": self.emotional_charge,
            "stress_level": self.stress_level,
            "location": self.location,
            "activity": self.activity,
            "companions": self.companions or [],
        }


@dataclass
class StateTransition:
    """–ü–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ —Å–æ–∑–Ω–∞–Ω–∏—è"""

    id: str
    from_state: ConsciousnessState
    to_state: ConsciousnessState
    trigger: TransitionTrigger
    timestamp: datetime
    duration_seconds: float

    # –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö
    home_resonance_delta: float
    presence_delta: float
    harmony_delta: float
    authenticity_delta: float

    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞
    trigger_data: Dict[str, Any]

    def to_neo4j_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Neo4j"""
        return {
            "id": self.id,
            "from_state": self.from_state.value,
            "to_state": self.to_state.value,
            "trigger": self.trigger.value,
            "timestamp": self.timestamp.isoformat(),
            "duration_seconds": self.duration_seconds,
            "home_resonance_delta": self.home_resonance_delta,
            "presence_delta": self.presence_delta,
            "harmony_delta": self.harmony_delta,
            "authenticity_delta": self.authenticity_delta,
            "trigger_data": json.dumps(self.trigger_data),
        }


class ConsciousnessQueries:
    """Cypher –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–∑–Ω–∞–Ω–∏—è"""

    @staticmethod
    def create_consciousness_node() -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–∑–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–Ω–∞–Ω–∏—è"""
        return """
        CREATE (c:ConsciousnessState {
            id: $id,
            state: $state,
            timestamp: datetime($timestamp),
            home_resonance: $home_resonance,
            presence_level: $presence_level,
            harmony_index: $harmony_index,
            authenticity_score: $authenticity_score,
            emotional_charge: $emotional_charge,
            stress_level: $stress_level,
            location: $location,
            activity: $activity,
            companions: $companions
        })
        RETURN c
        """

    @staticmethod
    def create_state_transition() -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏"""
        return """
        MATCH (from:ConsciousnessState {id: $from_id})
        MATCH (to:ConsciousnessState {id: $to_id})
        CREATE (from)-[t:TRANSITIONS_TO {
            id: $transition_id,
            trigger: $trigger,
            timestamp: datetime($timestamp),
            duration_seconds: $duration_seconds,
            home_resonance_delta: $home_resonance_delta,
            presence_delta: $presence_delta,
            harmony_delta: $harmony_delta,
            authenticity_delta: $authenticity_delta,
            trigger_data: $trigger_data
        }]->(to)
        RETURN t
        """

    @staticmethod
    def find_home_states() -> str:
        """–ü–æ–∏—Å–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π '–¥–æ–º–∞' (–≤—ã—Å–æ–∫–∞—è –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å)"""
        return """
        MATCH (c:ConsciousnessState)
        WHERE c.state = 'home_authentic' 
        AND c.home_resonance > 0.8
        AND c.authenticity_score > 0.8
        RETURN c
        ORDER BY c.timestamp DESC
        LIMIT 10
        """

    @staticmethod
    def analyze_temporal_patterns() -> str:
        """–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤"""
        return """
        MATCH (from:ConsciousnessState)-[t:TRANSITIONS_TO]->(to:ConsciousnessState)
        WHERE t.timestamp > datetime() - duration('P7D')  // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        RETURN 
            from.state as from_state,
            to.state as to_state,
            t.trigger as trigger,
            count(*) as frequency,
            avg(t.duration_seconds) as avg_duration,
            avg(t.harmony_delta) as avg_harmony_change
        ORDER BY frequency DESC
        """

    @staticmethod
    def find_resonance_moments() -> str:
        """–ü–æ–∏—Å–∫ –º–æ–º–µ–Ω—Ç–æ–≤ —Ä–µ–∑–æ–Ω–∞–Ω—Å–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        return """
        MATCH (c1:ConsciousnessState), (c2:ConsciousnessState)
        WHERE c1.id <> c2.id
        AND abs(duration.between(c1.timestamp, c2.timestamp).seconds) < 60  // –í –ø—Ä–µ–¥–µ–ª–∞—Ö –º–∏–Ω—É—Ç—ã
        AND c1.state = c2.state
        AND c1.home_resonance > 0.7 AND c2.home_resonance > 0.7
        RETURN c1, c2, 
               abs(c1.home_resonance - c2.home_resonance) as resonance_similarity
        ORDER BY resonance_similarity ASC
        LIMIT 10
        """

    @staticmethod
    def consciousness_timeline() -> str:
        """–í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–∑–Ω–∞–Ω–∏—è"""
        return """
        MATCH (c:ConsciousnessState)
        WHERE c.timestamp > datetime() - duration('P1D')  // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        OPTIONAL MATCH (c)-[t:TRANSITIONS_TO]->(next:ConsciousnessState)
        RETURN c, t, next
        ORDER BY c.timestamp ASC
        """


# –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
PHILOSOPHICAL_THRESHOLDS = {
    "HOME_RESONANCE_HIGH": 0.8,  # –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å "–¥–æ–º–∞"
    "PRESENCE_DEEP": 0.9,  # –ì–ª—É–±–æ–∫–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ
    "HARMONY_BALANCED": 0.75,  # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏—è
    "AUTHENTICITY_HONEST": 0.85,  # –í—ã—Å–æ–∫–∞—è –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å
    "RESONANCE_SYNC_WINDOW": 60,  # –û–∫–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑–æ–Ω–∞–Ω—Å–∞ (—Å–µ–∫)
}

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è Question-Driven Architecture
CONSCIOUSNESS_QUESTIONS = [
    "–ö—Ç–æ —è –µ—Å—Ç—å –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ?",
    "–ß—Ç–æ —Å–µ–π—á–∞—Å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ –º–µ–Ω—è?",
    "–ì–¥–µ —è —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –¥–æ–º–∞?",
    "–° –∫–µ–º —è —Ä–µ–∑–æ–Ω–∏—Ä—É—é?",
    "–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å —Ö–æ—á–µ—Ç –±—ã—Ç—å –∑–∞–¥–∞–Ω–Ω—ã–º?",
    "–ß—Ç–æ –ø—Ä–∏–Ω–æ—Å–∏—Ç –º–Ω–µ –≥–∞—Ä–º–æ–Ω–∏—é?",
    "–ö–∞–∫ —è –º–æ–≥—É –±—ã—Ç—å –±–æ–ª–µ–µ –∏—Å–∫—Ä–µ–Ω–Ω–∏–º —Å —Å–æ–±–æ–π?",
]
