"""
üåø‚ú® Emotime Metrics Integration ‚Äî –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –º–µ—Ç—Ä–∏–∫ LIMINAL

–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Emotime —Å Prometheus –º–µ—Ç—Ä–∏–∫–∞–º–∏ LIMINAL.
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã —Ä–∞–±–æ—Ç—ã —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤.
"""

import time
from datetime import datetime
from typing import Dict, List, Optional, Any

try:
    from metrics.collectors import (
        emotime_sensor_data_total,
        emotime_emotional_features,
        emotime_mode_duration_seconds,
        emotime_mode_transitions_total,
        emotime_fusion_confidence,
        emotime_heartbeat_total,
        emotime_timeseries_points,
        emotime_peak_detection_total
    )
    METRICS_AVAILABLE = True
except ImportError:
    try:
        from .utils import safe_logger
        safe_logger.warning("Prometheus metrics not available")
    except:
        print("WARNING: Emotime - Prometheus metrics not available")
    METRICS_AVAILABLE = False

from .sensors import SensorData, SensorType
from .fusion import EmotionalFeatures
from .modes import EmotionalMode, ModeType
from .timeseries import EmotionalPoint


class EmotimeMetrics:
    """
    –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –¥–ª—è Emotime.
    
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å Prometheus –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:
    - –î–∞–Ω–Ω—ã—Ö —Å —Å–µ–Ω—Å–æ—Ä–æ–≤
    - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤  
    - –†–µ–∂–∏–º–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
    """
    
    def __init__(self):
        self.metrics_enabled = METRICS_AVAILABLE
        self.last_mode: Optional[str] = None
        self.mode_start_time: Optional[float] = None
        
        try:
            from .utils import safe_logger
            if not self.metrics_enabled:
                safe_logger.warning("Metrics disabled - Prometheus not available")
            else:
                safe_logger.info("Metrics enabled")
        except:
            if not self.metrics_enabled:
                print("Emotime metrics disabled")
            else:
                print("Emotime metrics enabled")
    
    def record_sensor_data(self, sensor_data: SensorData):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ–Ω—Å–æ—Ä–æ–≤."""
        if not self.metrics_enabled:
            return
            
        sensor_type = sensor_data.sensor_type.value
        emotime_sensor_data_total.labels(sensor_type=sensor_type).inc()
    
    def record_emotional_features(self, features: EmotionalFeatures):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤."""
        if not self.metrics_enabled:
            return
            
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        emotime_emotional_features.labels(feature_type="valence").observe(features.valence)
        emotime_emotional_features.labels(feature_type="arousal").observe(features.arousal)
        emotime_emotional_features.labels(feature_type="dominance").observe(features.dominance)
        emotime_emotional_features.labels(feature_type="tempo").observe(features.tempo)
        emotime_emotional_features.labels(feature_type="intensity").observe(features.intensity)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ñ—å—é–∂–Ω —Å–∏—Å—Ç–µ–º—ã
        if features.confidence:
            emotime_fusion_confidence.observe(features.confidence)
    
    def record_mode_transition(self, new_mode: EmotionalMode):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏."""
        if not self.metrics_enabled:
            return
            
        current_time = time.time()
        current_mode = new_mode.type.value
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
        if self.last_mode and self.last_mode != current_mode:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
            if self.mode_start_time:
                duration = current_time - self.mode_start_time
                emotime_mode_duration_seconds.labels(mode_type=self.last_mode).observe(duration)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥
            emotime_mode_transitions_total.labels(
                from_mode=self.last_mode,
                to_mode=current_mode
            ).inc()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
        if self.last_mode != current_mode:
            self.last_mode = current_mode
            self.mode_start_time = current_time
    
    def record_heartbeat(self, status: str = "success"):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ Emotime."""
        if not self.metrics_enabled:
            return
            
        emotime_heartbeat_total.labels(status=status).inc()
    
    def record_timeseries_points(self, point_count: int):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–∞—Ö."""
        if not self.metrics_enabled:
            return
            
        emotime_timeseries_points.set(point_count)
    
    def record_peak_detection(self, point: EmotionalPoint):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏–∫–∞."""
        if not self.metrics_enabled or not point.is_peak:
            return
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        peak_type = "positive" if point.valence > 0 else "negative"
        emotime_peak_detection_total.labels(peak_type=peak_type).inc()
    
    def record_batch_processing(self, sensor_data_list: List[SensorData], features: Optional[EmotionalFeatures]):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
        if not self.metrics_enabled:
            return
            
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ—Ö —Å–µ–Ω—Å–æ—Ä–æ–≤ –≤ –±–∞—Ç—á–µ
        for sensor_data in sensor_data_list:
            self.record_sensor_data(sensor_data)
            
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        if features:
            self.record_emotional_features(features)
            self.record_heartbeat("success")
        else:
            self.record_heartbeat("no_data")
    
    def get_metrics_summary(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º Emotime."""
        if not self.metrics_enabled:
            return {"status": "metrics_disabled"}
            
        return {
            "status": "active",
            "metrics_enabled": True,
            "current_mode": self.last_mode,
            "mode_duration": time.time() - self.mode_start_time if self.mode_start_time else 0,
            "available_metrics": [
                "sensor_data_total",
                "emotional_features", 
                "mode_duration_seconds",
                "mode_transitions_total",
                "fusion_confidence",
                "heartbeat_total",
                "timeseries_points", 
                "peak_detection_total"
            ]
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ—Ç—Ä–∏–∫
emotime_metrics = EmotimeMetrics()