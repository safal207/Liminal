"""
üåå Neo4j Writer for Consciousness Temporal Data Lake
–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–∑–Ω–∞–Ω–∏—è —Å Neo4j
"""

import json
import os
import uuid
from datetime import datetime
from typing import Any, Dict, List, Optional

import requests
from consciousness_schema import (PHILOSOPHICAL_THRESHOLDS, ConsciousnessNode,
                                  ConsciousnessQueries, ConsciousnessState,
                                  StateTransition, TransitionTrigger)

from neo4j import GraphDatabase


class ConsciousnessNeo4jWriter:
    """Writer –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–∑–Ω–∞–Ω–∏—è –≤ Neo4j"""

    def __init__(self, uri: str = None, user: str = None, password: str = None):
        self.uri = uri or os.getenv("NEO4J_URI", "bolt://localhost:7687")
        self.user = user or os.getenv("NEO4J_USER", "neo4j")
        self.password = password or os.getenv("NEO4J_PASSWORD", "password")
        self.driver = GraphDatabase.driver(self.uri, auth=(self.user, self.password))
        self.queries = ConsciousnessQueries()

        # URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞ WebSocket relay
        self.ws_relay_url = os.getenv("WS_RELAY_URL", "http://localhost:8080/events")

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è Neo4j"""
        if self.driver:
            self.driver.close()

    def create_consciousness_state(self, node: ConsciousnessNode) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–∑–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–Ω–∞–Ω–∏—è"""
        with self.driver.session() as session:
            result = session.run(
                self.queries.create_consciousness_node(), **node.to_neo4j_dict()
            )
            return result.single()["c"]

    def create_state_transition(
        self, transition: StateTransition, from_node_id: str, to_node_id: str
    ) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ Redis"""
        with self.driver.session() as session:
            params = transition.to_neo4j_dict()
            params.update(
                {
                    "from_id": from_node_id,
                    "to_id": to_node_id,
                    "transition_id": transition.id,
                }
            )
            result = session.run(self.queries.create_state_transition(), **params)
            created_transition = result.single()["t"]

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ WebSocket relay —á–µ—Ä–µ–∑ HTTP
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è WebSocket –∫–ª–∏–µ–Ω—Ç–æ–≤
                event = {
                    "type": "state_transition",
                    "from_state": transition.from_state.value,
                    "to_state": transition.to_state.value,
                    "transition_id": transition.id,
                    "timestamp": transition.timestamp.isoformat(),
                    "trigger": transition.trigger.value,
                    "presence_delta": transition.presence_delta,
                    "harmony_delta": transition.harmony_delta,
                    "authenticity_delta": transition.authenticity_delta,
                    "trigger_data": transition.trigger_data,
                }
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ HTTP POST
                headers = {"Content-Type": "application/json"}
                response = requests.post(self.ws_relay_url, json=event, headers=headers)
                if response.status_code == 200 or response.status_code == 202:
                    print(
                        f"üåê WebSocket event sent: {transition.from_state.value} -> {transition.to_state.value}"
                    )
                else:
                    print(
                        f"‚ö†Ô∏è Error sending WebSocket event: HTTP {response.status_code}"
                    )
            except Exception as e:
                print(f"‚ö†Ô∏è Error sending WebSocket event: {str(e)}")

            return created_transition

    def find_home_states(self) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π '–¥–æ–º–∞' —Å –≤—ã—Å–æ–∫–æ–π –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å—é"""
        with self.driver.session() as session:
            result = session.run(self.queries.find_home_states())
            return [record["c"] for record in result]

    def analyze_temporal_patterns(self, days: int = 7) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π

        –ù–∞—Ö–æ–¥–∏—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–∑–Ω–∞–Ω–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏,
        –≤–∫–ª—é—á–∞—è —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏ —Ç–µ–º–ø–æ—Ä–∞–ª—å–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
        –≠—Ç–æ –æ—Å–Ω–æ–≤–∞ –¥–ª—è '–ª–µ—Ç–æ–ø–∏—Å–∏ —Å–æ–∑–Ω–∞–Ω–∏—è' –≤ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–º —Å–º—ã—Å–ª–µ.
        """
        with self.driver.session() as session:
            # –ó–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å Cypher
            query = """
            MATCH (source:ConsciousnessState)<-[:FROM]-(t:StateTransition)-[:TO]->(target:ConsciousnessState)
            WHERE t.timestamp > datetime() - duration({days: $days})
            WITH source.state as source_state, target.state as target_state, 
                 count(t) as frequency, collect(t.timestamp) as timestamps
            WITH source_state, target_state, frequency, timestamps, 
                 [ts in timestamps | duration.inSeconds(ts, datetime()).hours % 24] as hours_of_day
            RETURN source_state, target_state, frequency, 
                   apoc.agg.median(hours_of_day) as median_hour,
                   apoc.coll.frequencyDistribution(hours_of_day) as hour_distribution,
                   timestamps[0] as first_occurrence,
                   timestamps[-1] as last_occurrence,
                   CASE
                     WHEN source_state = 'HOME_AUTHENTIC' AND target_state = 'QUESTION_SPACE' 
                     THEN 'philosophical_insight'
                     WHEN source_state = 'PRESENCE_NOW' AND target_state = 'HARMONY_BALANCE' 
                     THEN 'deepening_practice'
                     ELSE 'standard_transition'
                   END as pattern_type
            ORDER BY frequency DESC
            """

            result = session.run(query, days=days)
            patterns = [
                {
                    "source": record["source_state"],
                    "target": record["target_state"],
                    "frequency": record["frequency"],
                    "median_hour": record["median_hour"],
                    "hour_distribution": record["hour_distribution"],
                    "first_occurrence": record["first_occurrence"],
                    "last_occurrence": record["last_occurrence"],
                    "pattern_type": record["pattern_type"],
                    "philosophical_significance": self._get_philosophical_significance(
                        record["source_state"], record["target_state"]
                    ),
                }
                for record in result
            ]

            return patterns

    def _get_philosophical_significance(self, source: str, target: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏"""
        # –ú–∞—Ç—Ä–∏—Ü–∞ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        significance_matrix = {
            "HOME_AUTHENTIC": {
                "QUESTION_SPACE": "'–î–æ–º - —ç—Ç–æ —Ç—ã, –∫–æ–≥–¥–∞ –∏—Å–∫—Ä–µ–Ω–µ–Ω —Å —Å–æ–±–æ–π' ‚Üí '–ú—ã –Ω–∞—É—á–∏–ª–∏—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã'",
                "PRESENCE_NOW": "–í–æ–∑–≤—Ä–∞—Ç –∫ —Ü–µ–Ω—Ç—Ä—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏",
                "HARMONY_BALANCE": "–û—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∫ –≤–Ω–µ—à–Ω–µ–π –≥–∞—Ä–º–æ–Ω–∏–∏",
                "TRANSITION_LIMINAL": "–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –¥–æ–º–∞",
            },
            "QUESTION_SPACE": {
                "HOME_AUTHENTIC": "–û—Ç –≤–æ–ø—Ä–æ—Å–∞ –∫ –æ—Ç–≤–µ—Ç—É, –æ–±—Ä–µ—Ç–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏",
                "PRESENCE_NOW": "–û—Ç –≤–æ–ø—Ä–æ—à–∞–Ω–∏—è –∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—é –≤ –º–æ–º–µ–Ω—Ç–µ",
                "HARMONY_BALANCE": "–û–±—Ä–µ—Ç–µ–Ω–∏–µ –≥–∞—Ä–º–æ–Ω–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
                "TRANSITION_LIMINAL": "–í–æ–ø—Ä–æ—Å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É –º–∏—Ä–∞–º–∏",
            },
            "PRESENCE_NOW": {
                "HOME_AUTHENTIC": "–ù–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –≤–µ–¥—ë—Ç –∫ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏",
                "QUESTION_SPACE": "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ—Ä–æ–∂–¥–∞–µ—Ç –≥–ª—É–±–æ–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã",
                "HARMONY_BALANCE": "–û—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –∫ –≥–∞—Ä–º–æ–Ω–∏–∏ —á–µ—Ä–µ–∑ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å",
                "TRANSITION_LIMINAL": "–†–∞–∑—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è, –≤—Ö–æ–¥ –≤ –ø–µ—Ä–µ—Ö–æ–¥",
            },
            "HARMONY_BALANCE": {
                "HOME_AUTHENTIC": "–û—Ç –±–∞–ª–∞–Ω—Å–∞ –∫ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é",
                "QUESTION_SPACE": "–ò–∑ –≥–∞—Ä–º–æ–Ω–∏–∏ —Ä–æ–∂–¥–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å",
                "PRESENCE_NOW": "–ì–∞—Ä–º–æ–Ω–∏—è —É—Å–∏–ª–∏–≤–∞–µ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ",
                "TRANSITION_LIMINAL": "–û—Ç –≥–∞—Ä–º–æ–Ω–∏–∏ –∫ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            },
            "TRANSITION_LIMINAL": {
                "HOME_AUTHENTIC": "–ü–µ—Ä–µ—Ö–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –¥–æ–º–æ–π",
                "QUESTION_SPACE": "–õ–∏–º–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ—Ä–æ–∂–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—à–∞–Ω–∏–µ",
                "PRESENCE_NOW": "–í—ã—Ö–æ–¥ –∏–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å",
                "HARMONY_BALANCE": "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–µ–¥—ë—Ç –∫ –Ω–æ–≤–æ–º—É —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—é",
            },
        }

        try:
            return significance_matrix[source][target]
        except KeyError:
            return "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏"

    def find_resonance_moments(self, hours: int = 24) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –º–æ–º–µ–Ω—Ç–æ–≤ —Ä–µ–∑–æ–Ω–∞–Ω—Å–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

        –ù–∞—Ö–æ–¥–∏—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∏–ª–∏ –±–ª–∏–∑–∫–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ—Ö–æ–¥—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏,
        —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–π "—Ä–µ–∑–æ–Ω–∞–Ω—Å —Å–æ–∑–Ω–∞–Ω–∏—è" —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–π –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏.
        """
        with self.driver.session() as session:
            query = """
            MATCH (u1:User)-[:EXPERIENCED]->(t1:StateTransition)
            MATCH (u2:User)-[:EXPERIENCED]->(t2:StateTransition)
            WHERE u1 <> u2 
              AND t1.timestamp > datetime() - duration({hours: $hours})
              AND t2.timestamp > datetime() - duration({hours: $hours})
              AND abs(duration.inSeconds(t1.timestamp, t2.timestamp).seconds) < 300 // 5 –º–∏–Ω—É—Ç
              AND t1.to_state = t2.to_state
            WITH u1.name as user1, u2.name as user2, 
                 t1.from_state as from_state1, t1.to_state as to_state,
                 t1.timestamp as timestamp1, t2.timestamp as timestamp2,
                 abs(duration.inSeconds(t1.timestamp, t2.timestamp).seconds) as time_diff
            RETURN user1, user2, from_state1, to_state, 
                   timestamp1, timestamp2, time_diff,
                   CASE 
                     WHEN to_state = 'HOME_AUTHENTIC' THEN 'home_resonance'
                     WHEN to_state = 'PRESENCE_NOW' THEN 'presence_resonance'
                     WHEN to_state = 'QUESTION_SPACE' THEN 'question_resonance'
                     ELSE 'standard_resonance'
                   END as resonance_type
            ORDER BY time_diff
            """

            result = session.run(query, hours=hours)
            resonance_moments = [
                {
                    "user1": record["user1"],
                    "user2": record["user2"],
                    "to_state": record["to_state"],
                    "from_state1": record["from_state1"],
                    "timestamp1": record["timestamp1"],
                    "timestamp2": record["timestamp2"],
                    "time_diff_seconds": record["time_diff"],
                    "resonance_type": record["resonance_type"],
                    "philosophical_meaning": self._get_resonance_meaning(
                        record["to_state"]
                    ),
                }
                for record in result
            ]

            return resonance_moments

    def _get_resonance_meaning(self, state: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–∑–æ–Ω–∞–Ω—Å–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
        meanings = {
            "HOME_AUTHENTIC": "–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å –≤ –æ–±—Ä–µ—Ç–µ–Ω–∏–∏ –¥–æ–º–∞ –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è ‚Äî –º–µ–∂–ª–∏—á–Ω–æ—Å—Ç–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å",
            "PRESENCE_NOW": "–ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ –º–æ–º–µ–Ω—Ç–µ ‚Äî —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–µ –æ—Å–æ–∑–Ω–∞–≤–∞–Ω–∏–µ",
            "HARMONY_BALANCE": "–°–∏–º—Ñ–æ–Ω–∏—è —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è ‚Äî –≥–∞—Ä–º–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—è",
            "QUESTION_SPACE": "–û–±—â–∏–π –ø–æ–∏—Å–∫ —Å–º—ã—Å–ª–∞ ‚Äî —Ä–µ–∑–æ–Ω–∞–Ω—Å –≤–æ–ø—Ä–æ—à–∞–Ω–∏—è",
            "TRANSITION_LIMINAL": "–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ ‚Äî –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è",
        }

        return meanings.get(state, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∑–æ–Ω–∞–Ω—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π")

    def get_consciousness_timeline(
        self, hours: int = 24, user_id: Optional[str] = None
    ) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥

        –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é "–ª–µ—Ç–æ–ø–∏—Å—å —Å–æ–∑–Ω–∞–Ω–∏—è" ‚Äî –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
        –∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π –∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
        """
        with self.driver.session() as session:
            params = {"hours": hours}
            user_filter = ""

            if user_id:
                user_filter = (
                    "AND exists((u:User)-[:EXPERIENCED]->(t) WHERE u.id = $user_id)"
                )
                params["user_id"] = user_id

            query = f"""
            MATCH path = (start:ConsciousnessState)<-[:FROM]-(t:StateTransition)-[:TO]->(end:ConsciousnessState)
            WHERE t.timestamp > datetime() - duration({{hours: $hours}})
            {user_filter}
            WITH t, start, end
            ORDER BY t.timestamp
            WITH collect({{transition: t, from: start, to: end}}) as timeline_items
            
            UNWIND timeline_items as item
            WITH item.transition as transition,
                 item.from as source,
                 item.to as target
            
            RETURN {{  
                nodes: collect(DISTINCT {{  
                    id: source.id,  
                    label: source.label,  
                    state: source.state,
                    timestamp: source.timestamp,
                    presenceLevel: source.presence_level,
                    harmonyIndex: source.harmony_index,
                    authenticityScore: source.authenticity_score,
                    colorClass: CASE 
                                WHEN source.state = 'HOME_AUTHENTIC' THEN 'node-home'
                                WHEN source.state = 'PRESENCE_NOW' THEN 'node-presence'
                                WHEN source.state = 'HARMONY_BALANCE' THEN 'node-harmony'
                                WHEN source.state = 'QUESTION_SPACE' THEN 'node-question'
                                ELSE 'node-liminal'
                                END
                }}) + collect(DISTINCT {{  
                    id: target.id,  
                    label: target.label,  
                    state: target.state,
                    timestamp: target.timestamp,
                    presenceLevel: target.presence_level,
                    harmonyIndex: target.harmony_index,
                    authenticityScore: target.authenticity_score,
                    colorClass: CASE 
                                WHEN target.state = 'HOME_AUTHENTIC' THEN 'node-home'
                                WHEN target.state = 'PRESENCE_NOW' THEN 'node-presence'
                                WHEN target.state = 'HARMONY_BALANCE' THEN 'node-harmony'
                                WHEN target.state = 'QUESTION_SPACE' THEN 'node-question'
                                ELSE 'node-liminal'
                                END
                }}),
                links: collect({{  
                    source: source.id,  
                    target: target.id,  
                    id: transition.id,
                    type: 'CONSCIOUSNESS_TRANSITION',
                    timestamp: transition.timestamp,
                    trigger: transition.trigger,
                    duration_seconds: transition.duration_seconds,
                    presence_delta: transition.presence_delta,
                    harmony_delta: transition.harmony_delta,
                    authenticity_delta: transition.authenticity_delta,
                    philosophical_significance: CASE
                        WHEN source.state = 'HOME_AUTHENTIC' AND target.state = 'QUESTION_SPACE'
                        THEN '–ò–∑ –¥–æ–º–∞ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤'
                        WHEN source.state = 'PRESENCE_NOW' AND target.state = 'HARMONY_BALANCE'
                        THEN '–û—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –∫ –≥–∞—Ä–º–æ–Ω–∏–∏'
                        ELSE '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥'
                        END
                }})  
            }} as graph
            """

            result = session.run(query, **params)
            timeline = result.single()["graph"]

            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏
            meta_info = self._analyze_timeline_meta(timeline)
            timeline["meta"] = meta_info

            return timeline

    def _analyze_timeline_meta(
        self, timeline: Dict[str, List[Dict[str, Any]]]
    ) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏ —Å–æ–∑–Ω–∞–Ω–∏—è"""
        nodes = timeline["nodes"]
        links = timeline["links"]

        state_counts = {}
        transition_types = {}
        presence_trend = 0
        harmony_trend = 0
        authenticity_trend = 0

        for node in nodes:
            state = node.get("state")
            if state:
                state_counts[state] = state_counts.get(state, 0) + 1

        for link in links:
            if "trigger" in link:
                trigger = link["trigger"]
                transition_types[trigger] = transition_types.get(trigger, 0) + 1
                presence_trend += link.get("presence_delta", 0)
                harmony_trend += link.get("harmony_delta", 0)
                authenticity_trend += link.get("authenticity_delta", 0)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        dominant_state = (
            max(state_counts.items(), key=lambda x: x[1])[0] if state_counts else None
        )

        # –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏
        philosophical_interpretations = {
            "HOME_AUTHENTIC": "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å: –≥–ª—É–±–æ–∫–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –ø–æ–¥–ª–∏–Ω–Ω–æ–µ –Ø",
            "PRESENCE_NOW": "–†–µ–∫–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ: –ø–æ—Ç–æ–∫ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è",
            "HARMONY_BALANCE": "–°–∏–º—Ñ–æ–Ω–∏—è —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è: —Ç–∞–Ω–µ—Ü –≥–∞—Ä–º–æ–Ω–∏–∏ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è",
            "QUESTION_SPACE": "–í–æ–ø—Ä–æ—à–∞—é—â–∏–π —Ä–∞–∑—É–º: –ø—É—Ç—å –æ—Ç –≤–æ–ø—Ä–æ—Å–∞ –∫ –≤–æ–ø—Ä–æ—Å—É",
            "TRANSITION_LIMINAL": "–ê–ª—Ö–∏–º–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞: —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ª–∏–º–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å",
        }

        interpretation = philosophical_interpretations.get(
            dominant_state, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–æ–∑–Ω–∞–Ω–∏—è"
        )

        return {
            "total_states": len(nodes),
            "total_transitions": len(links),
            "state_distribution": state_counts,
            "transition_types": transition_types,
            "dominant_state": dominant_state,
            "presence_trend": presence_trend,
            "harmony_trend": harmony_trend,
            "authenticity_trend": authenticity_trend,
            "philosophical_interpretation": interpretation,
        }

    def detect_home_state_entry(self, current_metrics: Dict[str, float]) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ '–¥–æ–º–∞'"""
        return (
            current_metrics.get("home_resonance", 0)
            > PHILOSOPHICAL_THRESHOLDS["HOME_RESONANCE_HIGH"]
            and current_metrics.get("authenticity_score", 0)
            > PHILOSOPHICAL_THRESHOLDS["AUTHENTICITY_HONEST"]
        )

    def detect_deep_presence(self, current_metrics: Dict[str, float]) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–ª—É–±–æ–∫–æ–≥–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è"""
        return (
            current_metrics.get("presence_level", 0)
            > PHILOSOPHICAL_THRESHOLDS["PRESENCE_DEEP"]
        )

    def detect_harmony_balance(self, current_metrics: Dict[str, float]) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–∞—Ä–º–æ–Ω–∏–∏"""
        return (
            current_metrics.get("harmony_index", 0)
            > PHILOSOPHICAL_THRESHOLDS["HARMONY_BALANCED"]
        )


class ConsciousnessEventProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Å–æ–∑–Ω–∞–Ω–∏—è –¥–ª—è WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""

    def __init__(self, neo4j_writer: ConsciousnessNeo4jWriter):
        self.writer = neo4j_writer
        self.current_state: Optional[ConsciousnessNode] = None

    def process_thyroid_insight(
        self, thyroid_data: Dict[str, Any]
    ) -> Optional[StateTransition]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Å–∞–π—Ç–∞ –æ—Ç —â–∏—Ç–æ–≤–∏–¥–∫–∏"""
        if not self.current_state:
            return None

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏–Ω—Å–∞–π—Ç–∞
        new_state = ConsciousnessNode(
            id=str(uuid.uuid4()),
            state=ConsciousnessState.HARMONY_BALANCE,  # –ò–Ω—Å–∞–π—Ç –≤–µ–¥—ë—Ç –∫ –≥–∞—Ä–º–æ–Ω–∏–∏
            timestamp=datetime.now(),
            home_resonance=min(1.0, self.current_state.home_resonance + 0.1),
            presence_level=min(1.0, self.current_state.presence_level + 0.05),
            harmony_index=min(1.0, self.current_state.harmony_index + 0.15),
            authenticity_score=self.current_state.authenticity_score,
            emotional_charge=thyroid_data.get("charge", 0),
            stress_level=max(0.0, self.current_state.stress_level - 0.2),
        )

        # –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ—Ö–æ–¥
        transition = StateTransition(
            id=str(uuid.uuid4()),
            from_state=self.current_state.state,
            to_state=new_state.state,
            trigger=TransitionTrigger.THYROID_INSIGHT,
            timestamp=datetime.now(),
            duration_seconds=2.3,  # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∏–Ω—Å–∞–π—Ç–∞
            home_resonance_delta=new_state.home_resonance
            - self.current_state.home_resonance,
            presence_delta=new_state.presence_level - self.current_state.presence_level,
            harmony_delta=new_state.harmony_index - self.current_state.harmony_index,
            authenticity_delta=0.0,
            trigger_data=thyroid_data,
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Neo4j
        self.writer.create_consciousness_state(new_state)
        self.writer.create_state_transition(
            transition, self.current_state.id, new_state.id
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.current_state = new_state

        return transition

    def process_question_emergence(self, question: str) -> Optional[StateTransition]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        if not self.current_state:
            return None

        new_state = ConsciousnessNode(
            id=str(uuid.uuid4()),
            state=ConsciousnessState.QUESTION_SPACE,
            timestamp=datetime.now(),
            home_resonance=self.current_state.home_resonance,
            presence_level=min(1.0, self.current_state.presence_level + 0.1),
            harmony_index=self.current_state.harmony_index,
            authenticity_score=min(1.0, self.current_state.authenticity_score + 0.05),
            emotional_charge=self.current_state.emotional_charge,
            stress_level=self.current_state.stress_level,
        )

        transition = StateTransition(
            id=str(uuid.uuid4()),
            from_state=self.current_state.state,
            to_state=new_state.state,
            trigger=TransitionTrigger.QUESTION_EMERGENCE,
            timestamp=datetime.now(),
            duration_seconds=1.0,
            home_resonance_delta=0.0,
            presence_delta=new_state.presence_level - self.current_state.presence_level,
            harmony_delta=0.0,
            authenticity_delta=new_state.authenticity_score
            - self.current_state.authenticity_score,
            trigger_data={"question": question},
        )

        self.writer.create_consciousness_state(new_state)
        self.writer.create_state_transition(
            transition, self.current_state.id, new_state.id
        )
        self.current_state = new_state

        return transition

    def initialize_consciousness(
        self, initial_metrics: Dict[str, float]
    ) -> ConsciousnessNode:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–Ω–∞–Ω–∏—è"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫
        if self.writer.detect_home_state_entry(initial_metrics):
            state = ConsciousnessState.HOME_AUTHENTIC
        elif self.writer.detect_deep_presence(initial_metrics):
            state = ConsciousnessState.PRESENCE_NOW
        elif self.writer.detect_harmony_balance(initial_metrics):
            state = ConsciousnessState.HARMONY_BALANCE
        else:
            state = ConsciousnessState.TRANSITION_LIMINAL

        self.current_state = ConsciousnessNode(
            id=str(uuid.uuid4()),
            state=state,
            timestamp=datetime.now(),
            **initial_metrics,
        )

        self.writer.create_consciousness_state(self.current_state)
        return self.current_state


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    writer = ConsciousnessNeo4jWriter()
    processor = ConsciousnessEventProcessor(writer)

    # –ù–∞—á–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–∑–Ω–∞–Ω–∏—è
    initial_metrics = {
        "home_resonance": 0.6,
        "presence_level": 0.7,
        "harmony_index": 0.5,
        "authenticity_score": 0.8,
        "emotional_charge": 45.0,
        "stress_level": 0.3,
    }

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_state = processor.initialize_consciousness(initial_metrics)
    print(f"üåå Initialized consciousness state: {current_state.state.value}")

    # –°–∏–º—É–ª—è—Ü–∏—è –∏–Ω—Å–∞–π—Ç–∞ –æ—Ç —â–∏—Ç–æ–≤–∏–¥–∫–∏
    thyroid_data = {"charge": 95, "threshold": 100, "ready": False}
    transition = processor.process_thyroid_insight(thyroid_data)

    if transition:
        print(
            f"üß¨ Thyroid insight triggered transition: {transition.from_state.value} -> {transition.to_state.value}"
        )
        print(f"   Harmony delta: +{transition.harmony_delta:.2f}")

    # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    patterns = writer.analyze_temporal_patterns()
    print(f"üìä Found {len(patterns)} temporal patterns")

    writer.close()
