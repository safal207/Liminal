apiVersion: v1
kind: Namespace
metadata:
  name: liminal-production
  labels:
    name: liminal-production
    environment: production

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: liminal-config
  namespace: liminal-production
data:
  ENV: "production"
  LOG_LEVEL: "INFO"
  PROMETHEUS_ENABLED: "true"
  ML_ENABLED: "true"
  WEBSOCKET_ENABLED: "true"
  DATABASE_POOL_SIZE: "20"
  REDIS_MAX_CONNECTIONS: "100"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: liminal-secrets
  namespace: liminal-production
type: Opaque
data:
  POSTGRES_PASSWORD: "" # Base64 encoded password
  NEO4J_PASSWORD: "" # Base64 encoded password
  JWT_SECRET_KEY: "" # Base64 encoded secret
  DATOMIC_LICENSE_KEY: "" # Base64 encoded license

---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: liminal-production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "liminal"
        - name: POSTGRES_USER
          value: "liminal"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: liminal-secrets
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - liminal
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - liminal
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: liminal-production
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# PostgreSQL PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: liminal-production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: fast-ssd

---
# Neo4j Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: neo4j
  namespace: liminal-production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: neo4j
  template:
    metadata:
      labels:
        app: neo4j
    spec:
      containers:
      - name: neo4j
        image: neo4j:5.15-community
        ports:
        - containerPort: 7474
        - containerPort: 7687
        env:
        - name: NEO4J_AUTH
          valueFrom:
            secretKeyRef:
              name: liminal-secrets
              key: NEO4J_PASSWORD
        - name: NEO4J_PLUGINS
          value: '["apoc", "graph-data-science"]'
        - name: NEO4J_dbms_memory_heap_initial__size
          value: "512m"
        - name: NEO4J_dbms_memory_heap_max__size
          value: "2G"
        volumeMounts:
        - name: neo4j-data
          mountPath: /data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /
            port: 7474
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 7474
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: neo4j-data
        persistentVolumeClaim:
          claimName: neo4j-pvc

---
# Neo4j Service
apiVersion: v1
kind: Service
metadata:
  name: neo4j
  namespace: liminal-production
spec:
  selector:
    app: neo4j
  ports:
  - name: http
    port: 7474
    targetPort: 7474
  - name: bolt
    port: 7687
    targetPort: 7687
  type: ClusterIP

---
# Neo4j PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: neo4j-pvc
  namespace: liminal-production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: liminal-production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command: ["redis-server"]
        args: ["--appendonly", "yes", "--maxmemory", "1gb", "--maxmemory-policy", "allkeys-lru"]
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: liminal-production
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# Redis PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: liminal-production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
# LIMINAL Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: liminal-backend
  namespace: liminal-production
  labels:
    app: liminal-backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: liminal-backend
  template:
    metadata:
      labels:
        app: liminal-backend
    spec:
      containers:
      - name: liminal-backend
        image: ghcr.io/your-username/resonance-liminal/liminal-backend:latest
        ports:
        - containerPort: 8000
        env:
        - name: DATABASE_URL
          value: "postgresql://liminal:$(POSTGRES_PASSWORD)@postgres:5432/liminal"
        - name: NEO4J_URI
          value: "bolt://neo4j:7687"
        - name: NEO4J_USER
          value: "neo4j"
        - name: NEO4J_PASSWORD
          valueFrom:
            secretKeyRef:
              name: liminal-secrets
              key: NEO4J_PASSWORD
        - name: REDIS_URL
          value: "redis://redis:6379"
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: liminal-secrets
              key: JWT_SECRET_KEY
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: liminal-secrets
              key: POSTGRES_PASSWORD
        envFrom:
        - configMapRef:
            name: liminal-config
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
        - name: app-data
          mountPath: /app/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 30
      volumes:
      - name: app-logs
        persistentVolumeClaim:
          claimName: liminal-logs-pvc
      - name: app-data
        persistentVolumeClaim:
          claimName: liminal-data-pvc

---
# LIMINAL Backend Service
apiVersion: v1
kind: Service
metadata:
  name: liminal-backend
  namespace: liminal-production
  labels:
    app: liminal-backend
spec:
  selector:
    app: liminal-backend
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
  type: ClusterIP

---
# LIMINAL Logs PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: liminal-logs-pvc
  namespace: liminal-production
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard

---
# LIMINAL Data PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: liminal-data-pvc
  namespace: liminal-production
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 20Gi
  storageClassName: standard

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: liminal-backend-hpa
  namespace: liminal-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: liminal-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: liminal-network-policy
  namespace: liminal-production
spec:
  podSelector:
    matchLabels:
      app: liminal-backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: neo4j
    ports:
    - protocol: TCP
      port: 7687
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: liminal-ingress
  namespace: liminal-production
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/websocket-services: "liminal-backend"
spec:
  tls:
  - hosts:
    - api.liminal.consciousness
    secretName: liminal-tls
  rules:
  - host: api.liminal.consciousness
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: liminal-backend
            port:
              number: 8000

---
# ServiceMonitor for Prometheus scraping
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: liminal-backend-metrics
  namespace: liminal-production
  labels:
    app: liminal-backend
spec:
  selector:
    matchLabels:
      app: liminal-backend
  endpoints:
  - port: "8000"
    path: /metrics
    interval: 30s