#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
"""

import asyncio
import json

import requests
import websockets
from colorama import Fore, Style, init

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è Windows
init()


async def test_websocket_connection():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""

    print(f"{Fore.CYAN}=== –ü–†–û–°–¢–û–ô –¢–ï–°–¢ WEBSOCKET –° JWT ==={Style.RESET_ALL}")

    # 1. –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    print(f"{Fore.YELLOW}1. –ü–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞...{Style.RESET_ALL}")
    try:
        response = requests.post(
            "http://localhost:8000/token",
            json={"username": "testuser", "password": "testpass"},
        )

        if response.status_code == 200:
            token_data = response.json()
            token = token_data.get("access_token")
            print(f"{Fore.GREEN}‚úì –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ{Style.RESET_ALL}")
        else:
            print(f"{Fore.RED}‚úó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code}{Style.RESET_ALL}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False

    except Exception as e:
        print(f"{Fore.RED}‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–∫–µ–Ω–∞: {e}{Style.RESET_ALL}")
        return False

    # 2. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
    print(f"{Fore.YELLOW}2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...{Style.RESET_ALL}")

    ws_url = f"ws://localhost:8000/ws/timeline?token={token}"
    print(f"URL: {ws_url}")

    try:
        async with websockets.connect(ws_url) as websocket:
            print(f"{Fore.GREEN}‚úì WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ{Style.RESET_ALL}")

            # 3. –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            print(f"{Fore.YELLOW}3. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...{Style.RESET_ALL}")

            try:
                # –ñ–¥–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–±—ã—á–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
                message = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                print(f"{Fore.CYAN}–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}{Style.RESET_ALL}")

                # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
                try:
                    msg_data = json.loads(message)
                    msg_type = msg_data.get("type", "unknown")
                    print(f"{Fore.GREEN}‚úì –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {msg_type}{Style.RESET_ALL}")
                except json.JSONDecodeError:
                    print(f"{Fore.YELLOW}–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON{Style.RESET_ALL}")

                # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                print(f"{Fore.YELLOW}4. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...{Style.RESET_ALL}")

                test_message = {"type": "subscribe", "channel": "timeline"}

                await websocket.send(json.dumps(test_message))
                print(f"{Fore.GREEN}‚úì –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ{Style.RESET_ALL}")

                # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
                try:
                    response_msg = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                    print(f"{Fore.CYAN}–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_msg}{Style.RESET_ALL}")
                except TimeoutError:
                    print(f"{Fore.YELLOW}–¢–∞–π–º-–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ){Style.RESET_ALL}")

                print(f"{Fore.GREEN}‚úì –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!{Style.RESET_ALL}")
                return True

            except TimeoutError:
                print(f"{Fore.YELLOW}–¢–∞–π–º-–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è{Style.RESET_ALL}")
                print(f"{Fore.GREEN}‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (—Å–µ—Ä–≤–µ—Ä –º–æ–ª—á–∏—Ç){Style.RESET_ALL}")
                return True

    except websockets.exceptions.InvalidStatusCode as e:
        print(f"{Fore.RED}‚úó –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ WebSocket: {e}{Style.RESET_ALL}")
        return False

    except websockets.exceptions.ConnectionClosed as e:
        print(f"{Fore.RED}‚úó –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: –∫–æ–¥ {e.code}, –ø—Ä–∏—á–∏–Ω–∞: {e.reason}{Style.RESET_ALL}")
        return False

    except Exception as e:
        print(f"{Fore.RED}‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}{Style.RESET_ALL}")
        import traceback

        traceback.print_exc()
        return False


async def test_metrics_endpoint():
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –º–µ—Ç—Ä–∏–∫"""
    print(f"{Fore.YELLOW}5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –º–µ—Ç—Ä–∏–∫...{Style.RESET_ALL}")

    try:
        response = requests.get("http://localhost:8000/metrics")
        if response.status_code == 200:
            metrics_text = response.text
            print(f"{Fore.GREEN}‚úì –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã ({len(metrics_text)} —Å–∏–º–≤–æ–ª–æ–≤){Style.RESET_ALL}")

            # –ò—â–µ–º WebSocket –º–µ—Ç—Ä–∏–∫–∏
            if "websocket" in metrics_text.lower():
                print(f"{Fore.GREEN}‚úì WebSocket –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞–π–¥–µ–Ω—ã{Style.RESET_ALL}")
            else:
                print(f"{Fore.YELLOW}WebSocket –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã{Style.RESET_ALL}")

            return True
        else:
            print(f"{Fore.RED}‚úó –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ç—Ä–∏–∫–∞–º: {response.status_code}{Style.RESET_ALL}")
            return False

    except Exception as e:
        print(f"{Fore.RED}‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –º–µ—Ç—Ä–∏–∫: {e}{Style.RESET_ALL}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print(f"{Fore.CYAN}{'=' * 50}{Style.RESET_ALL}")
    print(f"{Fore.CYAN}–ü–†–û–°–¢–û–ô –¢–ï–°–¢ WEBSOCKET + JWT + –ú–ï–¢–†–ò–ö–ò{Style.RESET_ALL}")
    print(f"{Fore.CYAN}{'=' * 50}{Style.RESET_ALL}")

    # –¢–µ—Å—Ç WebSocket
    ws_success = await test_websocket_connection()

    # –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫
    metrics_success = await test_metrics_endpoint()

    print(f"{Fore.CYAN}{'=' * 50}{Style.RESET_ALL}")
    if ws_success and metrics_success:
        print(f"{Fore.GREEN}üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û! üéâ{Style.RESET_ALL}")
    else:
        print(f"{Fore.RED}‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò{Style.RESET_ALL}")
        print(f"WebSocket: {'‚úì' if ws_success else '‚úó'}")
        print(f"–ú–µ—Ç—Ä–∏–∫–∏: {'‚úì' if metrics_success else '‚úó'}")
    print(f"{Fore.CYAN}{'=' * 50}{Style.RESET_ALL}")


if __name__ == "__main__":
    asyncio.run(main())
