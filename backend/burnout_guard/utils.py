"""
üöÄüõ°Ô∏è BurnoutGuard Utils ‚Äî –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è BurnoutGuard:
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
- –í–∞–ª–∏–¥–∞—Ü–∏—è
- –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã
"""

import logging
import json
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional, Union

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π logger
safe_logger = logging.getLogger("burnout_guard")
if not safe_logger.handlers:
    handler = logging.StreamHandler()
    handler.setFormatter(logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    ))
    safe_logger.addHandler(handler)
    safe_logger.setLevel(logging.INFO)


def format_risk_score(score: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–∫–æ—Ä —Ä–∏—Å–∫–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
    percentage = int(score * 100)
    
    if score <= 0.2:
        return f"üü¢ {percentage}% - –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫"
    elif score <= 0.4:
        return f"üü° {percentage}% - –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"
    elif score <= 0.6:
        return f"üü† {percentage}% - –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫"
    elif score <= 0.8:
        return f"üî¥ {percentage}% - –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
    else:
        return f"üö® {percentage}% - –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô —Ä–∏—Å–∫"


def format_time_duration(hours: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
    if hours < 1:
        minutes = int(hours * 60)
        return f"{minutes} –º–∏–Ω"
    elif hours < 24:
        return f"{hours:.1f} —á"
    else:
        days = int(hours // 24)
        remaining_hours = int(hours % 24)
        return f"{days}–¥ {remaining_hours}—á"


def validate_risk_score(score: float) -> float:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å–∫–æ—Ä —Ä–∏—Å–∫–∞."""
    if not isinstance(score, (int, float)):
        return 0.0
    return max(0.0, min(1.0, float(score)))


def safe_divide(numerator: float, denominator: float, default: float = 0.0) -> float:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å."""
    if denominator == 0:
        return default
    return numerator / denominator


def calculate_percentage_change(old_value: float, new_value: float) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ."""
    if old_value == 0:
        return 0.0 if new_value == 0 else 100.0
    return ((new_value - old_value) / old_value) * 100.0


def get_time_of_day_category(hour: int) -> str:
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –¥–Ω—è."""
    if 6 <= hour < 12:
        return "morning"
    elif 12 <= hour < 18:
        return "afternoon"
    elif 18 <= hour < 22:
        return "evening"
    else:
        return "night"


def is_working_hours(hour: int, working_start: int = 9, working_end: int = 18) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—Ä–µ–º—è —Ä–∞–±–æ—á–∏–º–∏ —á–∞—Å–∞–º–∏."""
    return working_start <= hour < working_end


def serialize_burnout_data(data: Any) -> str:
    """–°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ BurnoutGuard –≤ JSON."""
    def serialize_helper(obj):
        if isinstance(obj, datetime):
            return obj.isoformat()
        elif hasattr(obj, '__dict__'):
            return {key: serialize_helper(value) for key, value in obj.__dict__.items()}
        elif isinstance(obj, list):
            return [serialize_helper(item) for item in obj]
        elif isinstance(obj, dict):
            return {key: serialize_helper(value) for key, value in obj.items()}
        elif hasattr(obj, 'value'):  # –¥–ª—è Enum
            return obj.value
        else:
            return obj
    
    try:
        return json.dumps(serialize_helper(data), ensure_ascii=False, indent=2)
    except Exception as e:
        safe_logger.error(f"Serialization error: {e}")
        return "{}"


def create_alert_message(risk_score: float, indicators: List[str]) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è."""
    risk_emoji = "üö®" if risk_score > 0.8 else "‚ö†Ô∏è" if risk_score > 0.6 else "‚ÑπÔ∏è"
    
    message = f"{risk_emoji} –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –≤—ã–≥–æ—Ä–∞–Ω–∏—è: {format_risk_score(risk_score)}\n"
    
    if indicators:
        message += "\n–û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:\n"
        for indicator in indicators[:5]:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5
            message += f"‚Ä¢ {indicator}\n"
    
    return message.strip()


def calculate_work_intensity(session_hours: float, break_count: int = 0) -> str:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã."""
    if session_hours <= 2:
        return "low"
    elif session_hours <= 4:
        return "normal"
    elif session_hours <= 8:
        intensity = "high" if break_count < 2 else "normal"
        return intensity
    else:
        return "extreme"


def get_intervention_urgency(risk_score: float, trend_risk: float) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç—å –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞."""
    if risk_score > 0.8 or (risk_score > 0.6 and trend_risk > 0.4):
        return "immediate"
    elif risk_score > 0.6 or trend_risk > 0.3:
        return "soon"
    elif risk_score > 0.4:
        return "planned"
    else:
        return "none"