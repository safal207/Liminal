"""
üöÄüõ°Ô∏è BurnoutGuard Real-time Streaming ‚Äî –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–≥–æ—Ä–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

–°–∏—Å—Ç–µ–º–∞ real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—ã–≥–æ—Ä–∞–Ω–∏—è, –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π WebSocket streaming:
- –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ EmotionalUpdate –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–≥–æ—Ä–∞–Ω–∏–∏
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∏—Å–∫–µ
- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–æ–º–∞–Ω–¥–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π

"–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –≤—ã–≥–æ—Ä–∞–Ω–∏—è —á–µ—Ä–µ–∑ —É–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" ‚ö°
"""

import asyncio
import time
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Callable
from dataclasses import dataclass, asdict
from collections import deque
import uuid

from ..emotime.websocket.streaming_engine import (
    RealTimeEmotionalStreamer, StreamingConfig, StreamingMetrics,
    AdaptiveQualityController, SafetyFilter
)
from ..websocket.connection_manager import EmotionalUpdate, get_connection_manager
from .core import BurnoutGuardEngine, BurnoutState, BurnoutRisk
from .modes import BurnoutMode, BurnoutRiskLevel
from .utils import safe_logger, format_risk_score, create_alert_message


@dataclass
class BurnoutUpdate(EmotionalUpdate):
    """–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ EmotionalUpdate –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–≥–æ—Ä–∞–Ω–∏–∏."""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–ª—è –≤—ã–≥–æ—Ä–∞–Ω–∏—è –ø–æ–ª—è
    burnout_risk_score: float = 0.0
    burnout_risk_level: str = "low"
    burnout_mode: str = "healthy"
    intervention_needed: bool = False
    
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    risk_indicators: List[str] = None
    recommendations: List[str] = None
    
    # –¢—Ä–µ–Ω–¥—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    risk_trend: str = "stable"  # rising, falling, stable
    mode_stability: float = 1.0
    time_since_last_break: Optional[float] = None
    
    # –ö–æ–º–∞–Ω–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–¥–ª—è HR)
    team_average_risk: Optional[float] = None
    team_alert_level: Optional[str] = None
    
    def __post_init__(self):
        super().__post_init__()
        if self.risk_indicators is None:
            self.risk_indicators = []
        if self.recommendations is None:
            self.recommendations = []


@dataclass
class BurnoutStreamingConfig(StreamingConfig):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –≤–µ—â–∞–Ω–∏—è –¥–ª—è –≤—ã–≥–æ—Ä–∞–Ω–∏—è."""
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—ã–≥–æ—Ä–∞–Ω–∏—è
    risk_alert_threshold: float = 0.6      # –ø–æ—Ä–æ–≥ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
    critical_alert_threshold: float = 0.8  # –ø–æ—Ä–æ–≥ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
    
    # –ß–∞—Å—Ç–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    alert_frequency_minutes: float = 5.0   # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∞–ª–µ—Ä—Ç–∞–º–∏
    critical_alert_immediate: bool = True  # –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã —Å—Ä–∞–∑—É
    
    # –ö–æ–º–∞–Ω–¥–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    team_monitoring_enabled: bool = False
    hr_notifications_enabled: bool = False
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
    user_notification_preferences: Dict[str, bool] = None
    
    def __post_init__(self):
        if self.user_notification_preferences is None:
            self.user_notification_preferences = {
                "instant_alerts": True,
                "daily_summary": True,
                "weekly_report": True,
                "break_reminders": True
            }


class BurnoutSafetyFilter(SafetyFilter):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–≥–æ—Ä–∞–Ω–∏–∏.
    
    –ó–∞—â–∏—â–∞–µ—Ç –æ—Ç:
    - –õ–æ–∂–Ω—ã—Ö –∞–ª–∞—Ä–º–æ–≤ –ø—Ä–∏ –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    - –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    - –ü–∞–Ω–∏–∫–∏ –æ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    - –£—Ç–µ—á–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self):
        super().__init__()
        self.last_alert_time: Dict[str, datetime] = {}
        self.alert_cooldown = timedelta(minutes=5)
        
    def filter_burnout_update(self, update: BurnoutUpdate) -> BurnoutUpdate:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –≤—ã–≥–æ—Ä–∞–Ω–∏—è."""
        
        filtered_update = update
        
        # 1. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ–∂–Ω—ã—Ö –∞–ª–∞—Ä–º–æ–≤
        if update.confidence < 0.4 and update.burnout_risk_score > 0.7:
            # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å + –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ = —Å–Ω–∏–∂–∞–µ–º —Ä–∏—Å–∫
            filtered_update.burnout_risk_score *= 0.7
            filtered_update.safety_status = "confidence_adjusted"
            safe_logger.debug(f"Adjusted high risk due to low confidence: {update.confidence}")
        
        # 2. –ö–æ–Ω—Ç—Ä–æ–ª—å —á–∞—Å—Ç–æ—Ç—ã –∞–ª–µ—Ä—Ç–æ–≤
        user_id = getattr(update, 'user_id', 'unknown')
        now = datetime.now()
        
        if user_id in self.last_alert_time:
            time_since_last = now - self.last_alert_time[user_id]
            if (time_since_last < self.alert_cooldown and 
                update.burnout_risk_score > 0.6 and 
                update.burnout_risk_score < 0.8):  # –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π
                
                # –ü–æ–¥–∞–≤–ª—è–µ–º –Ω–µ-–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã –≤ cooldown –ø–µ—Ä–∏–æ–¥–µ
                filtered_update.intervention_needed = False
                filtered_update.safety_status = "alert_cooldown"
        
        # 3. –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if update.burnout_risk_score > 0.95:
            # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–≥–ª–∞–∂–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞–Ω–∏–∫–∏
            filtered_update.burnout_risk_score = 0.9
            filtered_update.safety_status = "panic_prevention"
        
        # 4. –ó–∞—â–∏—Ç–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if hasattr(update, 'team_average_risk') and update.team_average_risk:
            # –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ HR
            if not getattr(update, 'is_hr_user', False):
                filtered_update.team_average_risk = None
                filtered_update.team_alert_level = None
        
        # 5. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ª–µ—Ä—Ç–∞
        if filtered_update.intervention_needed:
            self.last_alert_time[user_id] = now
        
        return filtered_update


class BurnoutAdaptiveController(AdaptiveQualityController):
    """
    –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—ã–≥–æ—Ä–∞–Ω–∏—è.
    
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —á–∞—Å—Ç–æ—Ç—É –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    
    def __init__(self):
        super().__init__()
        self.risk_based_quality = True
        
    def get_adaptive_config(self, risk_score: float, activity_level: str = "normal") -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞."""
        
        base_config = self.get_quality_config(self.current_quality)
        
        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞ –≤—ã–≥–æ—Ä–∞–Ω–∏—è
        if risk_score > 0.8:  # –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫
            base_config.update({
                "update_frequency": 3.0,  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É
                "feature_detail": "full",
                "ml_insights": True,
                "alert_priority": "high"
            })
        elif risk_score > 0.6:  # –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
            base_config.update({
                "update_frequency": 2.0,
                "feature_detail": "enhanced",
                "ml_insights": True,
                "alert_priority": "medium"
            })
        elif risk_score < 0.2:  # –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫
            base_config.update({
                "update_frequency": 0.5,  # —Å–Ω–∏–∂–∞–µ–º —á–∞—Å—Ç–æ—Ç—É
                "feature_detail": "minimal",
                "ml_insights": False,
                "alert_priority": "low"
            })
        
        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if activity_level == "high":
            base_config["update_frequency"] *= 1.5
        elif activity_level == "low":
            base_config["update_frequency"] *= 0.7
        
        return base_config


class BurnoutStreamingEngine:
    """
    –î–≤–∏–∂–æ–∫ real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—ã–≥–æ—Ä–∞–Ω–∏—è.
    
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π WebSocket streaming
    –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–∏—Å–∫–µ –≤—ã–≥–æ—Ä–∞–Ω–∏—è.
    """
    
    def __init__(
        self, 
        user_id: str,
        burnout_engine: BurnoutGuardEngine,
        team_id: Optional[str] = None
    ):
        self.user_id = user_id
        self.team_id = team_id
        self.burnout_engine = burnout_engine
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã streaming
        self.connection_manager = get_connection_manager()
        self.safety_filter = BurnoutSafetyFilter()
        self.adaptive_controller = BurnoutAdaptiveController()
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = BurnoutStreamingConfig()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –º–µ—Ç—Ä–∏–∫–∏
        self.is_streaming = False
        self.last_update_time: Optional[datetime] = None
        self.update_count = 0
        
        # –ë—É—Ñ–µ—Ä—ã –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.risk_history = deque(maxlen=20)
        self.update_buffer = deque(maxlen=5)
        
    async def start_streaming(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–≥–æ—Ä–∞–Ω–∏—è."""
        
        if self.is_streaming:
            safe_logger.warning(f"Streaming already active for user {self.user_id}")
            return
            
        self.is_streaming = True
        safe_logger.info(f"Starting burnout streaming for user {self.user_id}")
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã
        await self._subscribe_to_channels()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        asyncio.create_task(self._monitoring_loop())
        
    async def stop_streaming(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."""
        
        self.is_streaming = False
        safe_logger.info(f"Stopped burnout streaming for user {self.user_id}")
        
        # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –∫–∞–Ω–∞–ª–æ–≤
        await self._unsubscribe_from_channels()
    
    async def _subscribe_to_channels(self):
        """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã."""
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª
        personal_channel = f"burnout:{self.user_id}"
        await self.connection_manager.subscribe_to_channel(self.user_id, personal_channel)
        
        # –ö–æ–º–∞–Ω–¥–Ω—ã–π –∫–∞–Ω–∞–ª (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞)
        if self.team_id:
            team_channel = f"burnout:team:{self.team_id}"
            await self.connection_manager.subscribe_to_channel(self.user_id, team_channel)
        
        # –û–±—â–∏–µ –∞–ª–µ—Ä—Ç—ã
        global_channel = "burnout:alerts"
        await self.connection_manager.subscribe_to_channel(self.user_id, global_channel)
    
    async def _unsubscribe_from_channels(self):
        """–û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ—Ç –∫–∞–Ω–∞–ª–æ–≤."""
        
        channels = [
            f"burnout:{self.user_id}",
            "burnout:alerts"
        ]
        
        if self.team_id:
            channels.append(f"burnout:team:{self.team_id}")
        
        for channel in channels:
            await self.connection_manager.unsubscribe_from_channel(self.user_id, channel)
    
    async def _monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—ã–≥–æ—Ä–∞–Ω–∏—è."""
        
        while self.is_streaming:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–≥–æ—Ä–∞–Ω–∏—è
                burnout_state = await self.burnout_engine.get_current_state()
                
                if burnout_state:
                    # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    update = await self._create_burnout_update(burnout_state)
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
                    filtered_update = self.safety_filter.filter_burnout_update(update)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    should_send = await self._should_send_update(filtered_update)
                    
                    if should_send:
                        await self._send_burnout_update(filtered_update)
                        
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏
                    if filtered_update.burnout_risk_score > 0.8:
                        await self._handle_critical_risk(filtered_update)
                
                # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                delay = await self._calculate_adaptive_delay(burnout_state)
                await asyncio.sleep(delay)
                
            except Exception as e:
                safe_logger.error(f"Error in burnout monitoring loop: {e}")
                await asyncio.sleep(5.0)  # –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def _create_burnout_update(self, burnout_state: BurnoutState) -> BurnoutUpdate:
        """–°–æ–∑–¥–∞–µ—Ç BurnoutUpdate –∏–∑ BurnoutState."""
        
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Emotime
        emotime_state = burnout_state.emotime_state
        
        # –°–æ–∑–¥–∞–µ–º BurnoutUpdate
        update = BurnoutUpdate(
            user_id=self.user_id,
            session_id=getattr(burnout_state, 'session_id', f'burnout_{uuid.uuid4()}'),
            timestamp=burnout_state.timestamp,
            
            # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            mode=emotime_state.mode.name,
            features=asdict(emotime_state.features),
            confidence=emotime_state.confidence,
            resonance_trace=[asdict(point) for point in emotime_state.resonance_trace[-5:]],
            
            # –î–∞–Ω–Ω—ã–µ –æ –≤—ã–≥–æ—Ä–∞–Ω–∏–∏
            burnout_risk_score=burnout_state.risk_assessment.score,
            burnout_risk_level=burnout_state.risk_assessment.level.value,
            burnout_mode=burnout_state.burnout_mode.type.value,
            intervention_needed=burnout_state.intervention_needed,
            
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            risk_indicators=burnout_state.risk_assessment.emotional_indicators,
            recommendations=await self._generate_recommendations(burnout_state),
            
            # –¢—Ä–µ–Ω–¥—ã
            risk_trend=await self._calculate_risk_trend(burnout_state),
            mode_stability=burnout_state.mode_stability,
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            ml_insights={"burnout_confidence": burnout_state.burnout_mode.confidence},
            safety_status="normal"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if self.team_id and await self._user_has_team_access():
            team_data = await self._get_team_analytics()
            if team_data:
                update.team_average_risk = team_data.get("average_risk")
                update.team_alert_level = team_data.get("alert_level")
        
        return update
    
    async def _should_send_update(self, update: BurnoutUpdate) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ."""
        
        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã
        if update.burnout_risk_score > 0.8:
            return True
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
        if len(self.risk_history) > 0:
            last_risk = self.risk_history[-1]
            current_level = update.burnout_risk_level
            last_level = self._get_risk_level_from_score(last_risk)
            
            if current_level != last_level:
                return True
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ
        if update.intervention_needed:
            return True
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥)
        if not self.last_update_time:
            return True
            
        time_since_last = datetime.now() - self.last_update_time
        min_interval = self._get_min_update_interval(update.burnout_risk_score)
        
        return time_since_last.total_seconds() >= min_interval
    
    async def _send_burnout_update(self, update: BurnoutUpdate):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ –≤—ã–≥–æ—Ä–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ WebSocket."""
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            update_data = asdict(update)
            update_data["type"] = "burnout_update"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            await self.connection_manager.send_to_user(
                self.user_id, 
                update_data,
                require_ack=update.intervention_needed  # —Ç—Ä–µ–±—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if self.team_id and update.burnout_risk_score > 0.6:
                await self._send_team_alert(update)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.last_update_time = datetime.now()
            self.update_count += 1
            self.risk_history.append(update.burnout_risk_score)
            
            safe_logger.debug(f"Sent burnout update to user {self.user_id}: risk={update.burnout_risk_score:.2f}")
            
        except Exception as e:
            safe_logger.error(f"Failed to send burnout update: {e}")
    
    async def _handle_critical_risk(self, update: BurnoutUpdate):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ —Å —Ä–∏—Å–∫–æ–º –≤—ã–≥–æ—Ä–∞–Ω–∏—è."""
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–µ—Ä—Ç
        alert_data = {
            "type": "critical_burnout_alert",
            "user_id": self.user_id,
            "risk_score": update.burnout_risk_score,
            "risk_level": update.burnout_risk_level,
            "indicators": update.risk_indicators,
            "recommendations": update.recommendations,
            "timestamp": update.timestamp.isoformat(),
            "message": create_alert_message(update.burnout_risk_score, update.risk_indicators)
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        await self.connection_manager.send_to_user(
            self.user_id,
            alert_data,
            require_ack=True,
            priority="high"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É/HR (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
        if self.team_id and self.config.hr_notifications_enabled:
            await self._notify_team_about_critical_risk(update)
        
        safe_logger.warning(
            f"Critical burnout risk for user {self.user_id}: "
            f"{update.burnout_risk_score:.2f} ({update.burnout_risk_level})"
        )
    
    async def _calculate_adaptive_delay(self, burnout_state: Optional[BurnoutState]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏."""
        
        if not burnout_state:
            return 30.0  # –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        risk_score = burnout_state.risk_assessment.score
        
        # –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ = —á–∞—â–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if risk_score > 0.8:
            return 15.0
        elif risk_score > 0.6:
            return 30.0
        elif risk_score > 0.4:
            return 60.0
        else:
            return 120.0  # –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫ = —Ä–µ–∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    async def _generate_recommendations(self, burnout_state: BurnoutState) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
        
        recommendations = []
        risk_score = burnout_state.risk_assessment.score
        burnout_mode = burnout_state.burnout_mode.type.value
        
        # –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—é —Ä–∏—Å–∫–∞
        if risk_score > 0.8:
            recommendations.extend([
                "üö® –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ 15-20 –º–∏–Ω—É—Ç",
                "üíß –í—ã–ø–µ–π—Ç–µ –≤–æ–¥—ã –∏ —Å–¥–µ–ª–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤", 
                "üö∂‚Äç‚ôÇÔ∏è –ü—Ä–æ–≥—É–ª—è–π—Ç–µ—Å—å –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ"
            ])
        elif risk_score > 0.6:
            recommendations.extend([
                "‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –º–∏–Ω—É—Ç",
                "üéØ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ –∑–∞ —Ä–∞–∑",
                "üì± –û—Ç–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ 1 —á–∞—Å"
            ])
        elif risk_score > 0.4:
            recommendations.extend([
                "‚öñÔ∏è –û—Ü–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â—É—é –Ω–∞–≥—Ä—É–∑–∫—É –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã",
                "üßò‚Äç‚ôÄÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ 5-–º–∏–Ω—É—Ç–Ω—É—é –º–µ–¥–∏—Ç–∞—Ü–∏—é",
                "üìù –ó–∞–ø–∏—à–∏—Ç–µ 3 –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã"
            ])
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –≤—ã–≥–æ—Ä–∞–Ω–∏—è
        if burnout_mode == "overwork":
            recommendations.append("üìÖ –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–µ–ª–µ–≥–∏—Ä—É–π—Ç–µ –∑–∞–¥–∞—á–∏")
        elif burnout_mode == "emotional_exhaustion":
            recommendations.append("ü§ó –ü–æ–≥–æ–≤–æ—Ä–∏—Ç–µ —Å –∫–æ–ª–ª–µ–≥–æ–π –∏–ª–∏ –±–ª–∏–∑–∫–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º")
        elif burnout_mode == "cynicism":
            recommendations.append("üí° –ù–∞–π–¥–∏—Ç–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∞—Å–ø–µ–∫—Ç –≤ —Ç–µ–∫—É—â–µ–π —Ä–∞–±–æ—Ç–µ")
        
        return recommendations[:5]  # –º–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    
    async def _calculate_risk_trend(self, burnout_state: BurnoutState) -> str:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∏—Å–∫–∞."""
        
        if len(self.risk_history) < 3:
            return "stable"
        
        recent_risks = list(self.risk_history)[-3:]
        current_risk = burnout_state.risk_assessment.score
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
        if current_risk > recent_risks[-1] + 0.1:
            return "rising"
        elif current_risk < recent_risks[-1] - 0.1:
            return "falling"
        else:
            return "stable"
    
    def _get_risk_level_from_score(self, score: float) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –∏–∑ —Å–∫–æ—Ä–∞."""
        if score <= 0.2:
            return "very_low"
        elif score <= 0.4:
            return "low"
        elif score <= 0.6:
            return "medium"
        elif score <= 0.8:
            return "high"
        else:
            return "critical"
    
    def _get_min_update_interval(self, risk_score: float) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."""
        if risk_score > 0.8:
            return 10.0  # –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π - –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        elif risk_score > 0.6:
            return 30.0  # –≤—ã—Å–æ–∫–∏–π - –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        elif risk_score > 0.4:
            return 60.0  # —Å—Ä–µ–¥–Ω–∏–π - –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        else:
            return 120.0  # –Ω–∏–∑–∫–∏–π - –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
    
    async def _user_has_team_access(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º."""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –µ—Å–ª–∏ –µ—Å—Ç—å team_id
        return self.team_id is not None
    
    async def _get_team_analytics(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥—ã."""
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        return {
            "average_risk": 0.45,
            "alert_level": "medium"
        }
    
    async def _send_team_alert(self, update: BurnoutUpdate):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –∫–æ–º–∞–Ω–¥–µ."""
        if not self.team_id:
            return
            
        team_alert = {
            "type": "team_burnout_alert",
            "team_id": self.team_id,
            "user_id": self.user_id,  # –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω
            "risk_level": update.burnout_risk_level,
            "timestamp": update.timestamp.isoformat(),
            "message": f"–ß–ª–µ–Ω –∫–æ–º–∞–Ω–¥—ã –∏–º–µ–µ—Ç {update.burnout_risk_level} —Ä–∏—Å–∫ –≤—ã–≥–æ—Ä–∞–Ω–∏—è"
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥–Ω—ã–π –∫–∞–Ω–∞–ª
        team_channel = f"burnout:team:{self.team_id}"
        await self.connection_manager.broadcast_to_channel(team_channel, team_alert)
    
    async def _notify_team_about_critical_risk(self, update: BurnoutUpdate):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º —Ä–∏—Å–∫–µ."""
        if not self.team_id:
            return
            
        critical_notification = {
            "type": "critical_team_alert",
            "team_id": self.team_id,
            "risk_level": "critical",
            "timestamp": update.timestamp.isoformat(),
            "message": "–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫ –≤—ã–≥–æ—Ä–∞–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥–µ",
            "action_required": True
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HR –∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º
        hr_channel = f"burnout:hr:{self.team_id}"
        await self.connection_manager.broadcast_to_channel(hr_channel, critical_notification)


# –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è BurnoutStreamingEngine
async def create_burnout_streaming_engine(
    user_id: str,
    burnout_engine: BurnoutGuardEngine,
    team_id: Optional[str] = None
) -> BurnoutStreamingEngine:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç BurnoutStreamingEngine."""
    
    engine = BurnoutStreamingEngine(user_id, burnout_engine, team_id)
    return engine