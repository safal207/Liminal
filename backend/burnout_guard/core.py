"""
üöÄüõ°Ô∏è BurnoutGuard Core Engine ‚Äî —è–¥—Ä–æ –∑–∞—â–∏—Ç—ã –æ—Ç –≤—ã–≥–æ—Ä–∞–Ω–∏—è

–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ BurnoutGuard, –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å Emotime:
- –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞ –≤—ã–≥–æ—Ä–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –°–∏—Å—Ç–µ–º–∞ —Å–∫–æ—Ä–∏–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ML –∏ confidence
- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–µ—Ç–µ–∫—Ü–∏–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π

"–ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ –∑–∞—â–∏—Ç—É –æ—Ç –≤—ã–≥–æ—Ä–∞–Ω–∏—è" ‚ú®
"""

import asyncio
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, asdict

from ..emotime.core import EmotimeEngine, EmotimeState
from ..emotime.modes import EmotionalMode
from ..emotime.fusion import EmotionalFeatures
from ..emotime.timeseries import EmotionalPoint
from .modes import BurnoutModeMapper, BurnoutMode, BurnoutRiskLevel
from .utils import safe_logger

try:
    from ..emotime.ml import AdaptiveCalibrator, AdaptiveEmotionalEngine
    ML_AVAILABLE = True
except ImportError:
    ML_AVAILABLE = False


@dataclass
class BurnoutRisk:
    """–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –≤—ã–≥–æ—Ä–∞–Ω–∏—è."""
    score: float                    # 0.0-1.0 –æ–±—â–∏–π —Å–∫–æ—Ä —Ä–∏—Å–∫–∞
    level: BurnoutRiskLevel        # —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
    factors: Dict[str, float]      # —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞ –∏ –∏—Ö –≤–µ—Å–∞
    confidence: float              # —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ—Ü–µ–Ω–∫–µ
    timestamp: datetime
    
    # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    emotional_indicators: List[str]    # —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    behavioral_patterns: List[str]     # –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    duration_risk: float              # —Ä–∏—Å–∫ –æ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    trend_risk: float                 # —Ä–∏—Å–∫ –æ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤
    
    
@dataclass 
class BurnoutState:
    """–ü–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ BurnoutGuard."""
    timestamp: datetime
    emotime_state: EmotimeState        # –±–∞–∑–æ–≤–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    burnout_mode: BurnoutMode          # —Ä–µ–∂–∏–º –≤—ã–≥–æ—Ä–∞–Ω–∏—è
    risk_assessment: BurnoutRisk       # –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞
    
    # –ò—Å—Ç–æ—Ä–∏—è –∏ —Ç—Ä–µ–Ω–¥—ã
    risk_history: List[float]          # –∏—Å—Ç–æ—Ä–∏—è —Å–∫–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ N)
    mode_stability: float              # —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∂–∏–º–∞ (0.0-1.0)
    intervention_needed: bool          # –Ω—É–∂–Ω–æ –ª–∏ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ
    
    
class BurnoutRiskScorer:
    """
    –°–∏—Å—Ç–µ–º–∞ —Å–∫–æ—Ä–∏–Ω–≥–∞ —Ä–∏—Å–∫–∞ –≤—ã–≥–æ—Ä–∞–Ω–∏—è.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑:
    1. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã (–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å, –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ, —Ä–µ–∂–∏–º—ã)
    2. –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã (–ø–∞—Ç—Ç–µ—Ä–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –≤—Ä–µ–º—è)
    3. –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Ç—Ä–µ–Ω–¥—ã, —Ü–∏–∫–ª—ã)
    4. ML-—Ñ–∞–∫—Ç–æ—Ä—ã (confidence, –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏)
    """
    
    # –í–µ—Å–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞
    RISK_FACTOR_WEIGHTS = {
        "emotional_state": 0.35,      # —Ç–µ–∫—É—â–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        "behavioral_patterns": 0.25,   # –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        "temporal_analysis": 0.25,     # –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –∏ —Ç—Ä–µ–Ω–¥—ã
        "ml_confidence": 0.15         # ML —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è
    }
    
    # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞
    EMOTIONAL_RISK_CRITERIA = {
        "high_stress": {"weight": 0.4, "threshold": 0.7},
        "low_joy": {"weight": 0.3, "threshold": 0.2},
        "negative_valence": {"weight": 0.3, "threshold": -0.3},
        "high_arousal": {"weight": 0.2, "threshold": 0.8},
        "emotional_flatness": {"weight": 0.25, "threshold": 0.1}
    }
    
    def __init__(self, user_id: str):
        self.user_id = user_id
        self.risk_history: List[Tuple[float, datetime]] = []
        self.max_history = 100  # –º–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏
        
    async def calculate_risk(
        self, 
        emotime_state: EmotimeState,
        burnout_mode: BurnoutMode,
        additional_context: Optional[Dict[str, Any]] = None
    ) -> BurnoutRisk:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–∞ –≤—ã–≥–æ—Ä–∞–Ω–∏—è.
        
        Args:
            emotime_state: –¢–µ–∫—É—â–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            burnout_mode: –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –≤—ã–≥–æ—Ä–∞–Ω–∏—è
            additional_context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ç.–¥.)
            
        Returns:
            –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –≤—ã–≥–æ—Ä–∞–Ω–∏—è
        """
        
        context = additional_context or {}
        
        # 1. –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        emotional_score, emotional_indicators = await self._analyze_emotional_factors(
            emotime_state.features, emotime_state.mode
        )
        
        # 2. –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        behavioral_score, behavioral_patterns = await self._analyze_behavioral_patterns(
            emotime_state, context
        )
        
        # 3. –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑
        temporal_score = await self._analyze_temporal_factors(
            emotime_state, burnout_mode
        )
        
        # 4. ML confidence –∞–Ω–∞–ª–∏–∑
        ml_score = await self._analyze_ml_factors(emotime_state)
        
        # 5. –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã
        total_score = (
            emotional_score * self.RISK_FACTOR_WEIGHTS["emotional_state"] +
            behavioral_score * self.RISK_FACTOR_WEIGHTS["behavioral_patterns"] +
            temporal_score * self.RISK_FACTOR_WEIGHTS["temporal_analysis"] +
            ml_score * self.RISK_FACTOR_WEIGHTS["ml_confidence"]
        )
        
        # 6. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
        risk_level = self._determine_risk_level(total_score)
        
        # 7. –í—ã—á–∏—Å–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidence = await self._calculate_confidence(
            emotime_state, [emotional_score, behavioral_score, temporal_score, ml_score]
        )
        
        # 8. –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã
        risk_factors = {
            "emotional": emotional_score,
            "behavioral": behavioral_score, 
            "temporal": temporal_score,
            "ml_confidence": ml_score
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.risk_history.append((total_score, datetime.now()))
        if len(self.risk_history) > self.max_history:
            self.risk_history = self.risk_history[-self.max_history:]
        
        return BurnoutRisk(
            score=total_score,
            level=risk_level,
            factors=risk_factors,
            confidence=confidence,
            timestamp=datetime.now(),
            emotional_indicators=emotional_indicators,
            behavioral_patterns=behavioral_patterns,
            duration_risk=temporal_score,
            trend_risk=await self._calculate_trend_risk()
        )
    
    async def _analyze_emotional_factors(
        self, 
        features: EmotionalFeatures,
        mode: EmotionalMode
    ) -> Tuple[float, List[str]]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞."""
        
        indicators = []
        total_risk = 0.0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ä–∏—Å–∫–∞
        if features.valence < self.EMOTIONAL_RISK_CRITERIA["negative_valence"]["threshold"]:
            risk = self.EMOTIONAL_RISK_CRITERIA["negative_valence"]["weight"]
            total_risk += risk
            indicators.append(f"–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å ({features.valence:.2f})")
            
        if features.arousal > self.EMOTIONAL_RISK_CRITERIA["high_arousal"]["threshold"]:
            risk = self.EMOTIONAL_RISK_CRITERIA["high_arousal"]["weight"]
            total_risk += risk
            indicators.append(f"–í—ã—Å–æ–∫–æ–µ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ ({features.arousal:.2f})")
            
        if features.intensity < self.EMOTIONAL_RISK_CRITERIA["emotional_flatness"]["threshold"]:
            risk = self.EMOTIONAL_RISK_CRITERIA["emotional_flatness"]["weight"]
            total_risk += risk
            indicators.append(f"–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏—Ç—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å ({features.intensity:.2f})")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∂–∏–º–∞
        from ..emotime.modes import ModeType
        if mode.type == ModeType.STRESS:
            total_risk += self.EMOTIONAL_RISK_CRITERIA["high_stress"]["weight"]
            indicators.append(f"–†–µ–∂–∏–º —Å—Ç—Ä–µ—Å—Å–∞ (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {mode.intensity:.2f})")
            
        if mode.type == ModeType.JOY and mode.intensity < self.EMOTIONAL_RISK_CRITERIA["low_joy"]["threshold"]:
            total_risk += self.EMOTIONAL_RISK_CRITERIA["low_joy"]["weight"]
            indicators.append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Ä–∞–¥–æ—Å—Ç–∏")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ [0, 1]
        normalized_risk = min(1.0, total_risk)
        
        return normalized_risk, indicators
    
    async def _analyze_behavioral_patterns(
        self, 
        emotime_state: EmotimeState,
        context: Dict[str, Any]
    ) -> Tuple[float, List[str]]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã."""
        
        patterns = []
        risk_score = 0.0
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        current_hour = datetime.now().hour
        
        if current_hour < 6 or current_hour > 22:
            risk_score += 0.3
            patterns.append(f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è ({current_hour}:00)")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
        session_duration = context.get("session_duration_hours", 0)
        if session_duration > 8:
            risk_score += 0.4
            patterns.append(f"–î–ª–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è ({session_duration:.1f} —á–∞—Å–æ–≤)")
        elif session_duration > 10:
            risk_score += 0.6
            patterns.append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è ({session_duration:.1f} —á–∞—Å–æ–≤)")
        
        # –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π —Ä–µ–∂–∏–º–æ–≤
        if len(emotime_state.resonance_trace) > 5:
            recent_modes = [point.mode for point in emotime_state.resonance_trace[-10:]]
            mode_changes = sum(1 for i in range(1, len(recent_modes)) 
                             if recent_modes[i] != recent_modes[i-1])
            
            if mode_changes > 6:  # —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
                risk_score += 0.2
                patterns.append(f"–ß–∞—Å—Ç—ã–µ —Å–º–µ–Ω—ã —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è ({mode_changes} –∑–∞ 10 —Ü–∏–∫–ª–æ–≤)")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö (confidence)
        avg_confidence = emotime_state.confidence
        if avg_confidence < 0.3:
            risk_score += 0.2
            patterns.append(f"–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∞–Ω–∞–ª–∏–∑–µ ({avg_confidence:.2f})")
        
        return min(1.0, risk_score), patterns
    
    async def _analyze_temporal_factors(
        self, 
        emotime_state: EmotimeState,
        burnout_mode: BurnoutMode
    ) -> float:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞."""
        
        risk_score = 0.0
        
        # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –≤—ã–≥–æ—Ä–∞–Ω–∏—è
        if burnout_mode.duration_hours > 4:
            risk_score += 0.3
        elif burnout_mode.duration_hours > 8:
            risk_score += 0.5
        elif burnout_mode.duration_hours > 12:
            risk_score += 0.7
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.risk_history) >= 5:
            recent_scores = [score for score, _ in self.risk_history[-5:]]
            trend = np.polyfit(range(len(recent_scores)), recent_scores, 1)[0]
            
            if trend > 0.1:  # –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–∏–π —Ç—Ä–µ–Ω–¥
                risk_score += min(0.4, trend * 2.0)
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if len(emotime_state.resonance_trace) > 5:
            recent_valences = [point.valence for point in emotime_state.resonance_trace[-10:]]
            if recent_valences:
                valence_std = np.std(recent_valences)
                if valence_std > 0.4:  # –≤—ã—Å–æ–∫–∞—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å = –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
                    risk_score += 0.2
        
        return min(1.0, risk_score)
    
    async def _analyze_ml_factors(self, emotime_state: EmotimeState) -> float:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç ML-—Ñ–∞–∫—Ç–æ—Ä—ã (confidence, –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å)."""
        
        if not ML_AVAILABLE:
            return 0.5  # –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä –µ—Å–ª–∏ ML –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        
        # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ confidence
        confidence_factor = 1.0 - emotime_state.confidence  # –Ω–∏–∑–∫–∏–π confidence = –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ ML –º–µ—Ç—Ä–∏–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
        ml_risk = confidence_factor * 0.8  # confidence —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 80% ML —Ñ–∞–∫—Ç–æ—Ä–∞
        
        return min(1.0, ml_risk)
    
    def _determine_risk_level(self, score: float) -> BurnoutRiskLevel:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –ø–æ —Å–∫–æ—Ä—É."""
        
        if score <= 0.2:
            return BurnoutRiskLevel.VERY_LOW
        elif score <= 0.4:
            return BurnoutRiskLevel.LOW
        elif score <= 0.6:
            return BurnoutRiskLevel.MEDIUM
        elif score <= 0.8:
            return BurnoutRiskLevel.HIGH
        else:
            return BurnoutRiskLevel.CRITICAL
    
    async def _calculate_confidence(
        self, 
        emotime_state: EmotimeState,
        factor_scores: List[float]
    ) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ—Ü–µ–Ω–∫–µ —Ä–∏—Å–∫–∞."""
        
        # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç Emotime
        base_confidence = emotime_state.confidence
        
        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        factor_std = np.std(factor_scores)
        consistency_confidence = max(0.0, 1.0 - factor_std)  # –Ω–∏–∑–∫–∞—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å = –≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        
        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        data_confidence = min(1.0, len(emotime_state.resonance_trace) / 10.0)
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º
        total_confidence = (
            base_confidence * 0.5 +
            consistency_confidence * 0.3 +
            data_confidence * 0.2
        )
        
        return min(0.95, max(0.1, total_confidence))
    
    async def _calculate_trend_risk(self) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∏—Å–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤."""
        
        if len(self.risk_history) < 3:
            return 0.0
            
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π
        recent_scores = [score for score, _ in self.risk_history[-10:]]
        
        if len(recent_scores) < 3:
            return 0.0
            
        # –í—ã—á–∏—Å–ª—è–µ–º —Ç—Ä–µ–Ω–¥
        trend = np.polyfit(range(len(recent_scores)), recent_scores, 1)[0]
        
        # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ = —Ä–æ—Å—Ç —Ä–∏—Å–∫–∞
        return max(0.0, min(1.0, trend * 3.0))


class BurnoutGuardEngine:
    """
    –ì–ª–∞–≤–Ω—ã–π –¥–≤–∏–∂–æ–∫ BurnoutGuard.
    
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å EmotimeEngine –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–≥–æ—Ä–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
    """
    
    def __init__(
        self,
        user_id: str,
        emotime_engine: EmotimeEngine,
        update_interval: float = 60.0,  # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        lookback_hours: int = 24        # –∞–Ω–∞–ª–∏–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    ):
        self.user_id = user_id
        self.emotime_engine = emotime_engine
        self.update_interval = update_interval
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.mode_mapper = BurnoutModeMapper(lookback_hours=lookback_hours)
        self.risk_scorer = BurnoutRiskScorer(user_id=user_id)
        
        # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.current_state: Optional[BurnoutState] = None
        self.is_running = False
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.state_history: List[BurnoutState] = []
        self.max_history = 1000
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç BurnoutGuard –¥–≤–∏–∂–æ–∫."""
        self.is_running = True
        safe_logger.info(f"BurnoutGuard engine started for user {self.user_id}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞
        asyncio.create_task(self._analysis_loop())
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç BurnoutGuard –¥–≤–∏–∂–æ–∫."""
        self.is_running = False
        safe_logger.info(f"BurnoutGuard engine stopped for user {self.user_id}")
    
    async def get_current_state(self) -> Optional[BurnoutState]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–≥–æ—Ä–∞–Ω–∏—è."""
        return self.current_state
    
    async def get_risk_assessment(self) -> Optional[BurnoutRisk]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–∞."""
        if self.current_state:
            return self.current_state.risk_assessment
        return None
    
    async def analyze_now(self, additional_context: Optional[Dict[str, Any]] = None) -> Optional[BurnoutState]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        return await self._perform_analysis(additional_context)
    
    async def _analysis_loop(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–≥–æ—Ä–∞–Ω–∏—è."""
        while self.is_running:
            try:
                await self._perform_analysis()
                await asyncio.sleep(self.update_interval)
                
            except Exception as e:
                safe_logger.error(f"BurnoutGuard analysis error: {e}")
                await asyncio.sleep(self.update_interval)
    
    async def _perform_analysis(self, additional_context: Optional[Dict[str, Any]] = None) -> Optional[BurnoutState]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞ –≤—ã–≥–æ—Ä–∞–Ω–∏—è."""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        emotime_state = await self.emotime_engine.get_current_state()
        if not emotime_state:
            return None
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
        emotional_history = []
        for point in emotime_state.resonance_trace:
            if hasattr(point, 'mode') and hasattr(point, 'timestamp'):
                emotional_history.append((point.mode, point.timestamp))
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –≤—ã–≥–æ—Ä–∞–Ω–∏—è
        burnout_mode = await self.mode_mapper.analyze_burnout_risk(emotional_history)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–∞
        risk_assessment = await self.risk_scorer.calculate_risk(
            emotime_state, burnout_mode, additional_context
        )
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ —Ç—Ä–µ–Ω–¥—ã
        mode_stability = await self._calculate_mode_stability()
        intervention_needed = await self._determine_intervention_need(risk_assessment)
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∏—Å–∫–æ–≤
        risk_history = [score for score, _ in self.risk_scorer.risk_history[-20:]]
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        new_state = BurnoutState(
            timestamp=datetime.now(),
            emotime_state=emotime_state,
            burnout_mode=burnout_mode,
            risk_assessment=risk_assessment,
            risk_history=risk_history,
            mode_stability=mode_stability,
            intervention_needed=intervention_needed
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.current_state = new_state
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.state_history.append(new_state)
        if len(self.state_history) > self.max_history:
            self.state_history = self.state_history[-self.max_history:]
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        if risk_assessment.level.value in ["high", "critical"]:
            safe_logger.warning(
                f"High burnout risk detected for user {self.user_id}: "
                f"{risk_assessment.level.value} ({risk_assessment.score:.2f})"
            )
        
        return new_state
    
    async def _calculate_mode_stability(self) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∂–∏–º–∞ –≤—ã–≥–æ—Ä–∞–Ω–∏—è."""
        
        if len(self.state_history) < 3:
            return 0.5  # –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ—Å—Ç–æ—è–Ω–∏–π
        recent_modes = [state.burnout_mode.type for state in self.state_history[-10:]]
        
        if not recent_modes:
            return 0.5
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ
        current_mode = recent_modes[-1]
        same_mode_count = sum(1 for mode in recent_modes if mode == current_mode)
        stability = same_mode_count / len(recent_modes)
        
        return stability
    
    async def _determine_intervention_need(self, risk_assessment: BurnoutRisk) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞."""
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞
        if risk_assessment.level in [BurnoutRiskLevel.HIGH, BurnoutRiskLevel.CRITICAL]:
            return True
        
        # –ï—Å–ª–∏ —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫, –Ω–æ —Å –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–∏–º —Ç—Ä–µ–Ω–¥–æ–º
        if (risk_assessment.level == BurnoutRiskLevel.MEDIUM and 
            risk_assessment.trend_risk > 0.3):
            return True
        
        # –ï—Å–ª–∏ –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º —Ä–∏—Å–∫–µ
        if (risk_assessment.score > 0.6 and risk_assessment.confidence < 0.4):
            return True
        
        return False