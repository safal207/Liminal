{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE OverloadedStrings #-}
module MentorshipMode where

import DuneField
import Data.List (find, sortOn)
import Data.Ord (Down(..))
import Data.Text (Text, pack, unpack, intercalate)
import Data.Maybe (listToMaybe)
import System.Random (randomRIO)
import Control.Monad (when)
import Data.Time.Clock (getCurrentTime)

-- | A piece of wisdom shared from mentor to mentee
data WisdomShard = WisdomShard
    { wsTitle :: Text
    , wsNarrative :: Text
    , wsEmotion :: Emotion
    , wsTags :: [Text]
    , wsGrowthImpact :: Float
    }

-- | Check if an agent qualifies as a mentor
isWiseMentor :: Agent -> Bool
isWiseMentor agent = 
    agentGrowthStage agent == Wisdom && 
    length (agentExperience agent) >= 10  -- Minimum 10 experiences

-- | Find a relevant mentor for a specific wave
findRelevantMentor :: [Agent] -> DuneWave -> IO (Maybe Agent)
findRelevantMentor agents wave = do
    let potentialMentors = filter isWiseMentor agents
        currentEmotion = dwEmotion wave
        
    -- Find mentors who have experience with this emotion
    let experiencedMentors = filter (hasExperienceWith currentEmotion) potentialMentors
    
    -- Sort by experience level (descending)
    let sortedMentors = sortOn (Down . length . agentExperience) experiencedMentors
    
    -- Return the most experienced mentor, if any
    return $ listToMaybe sortedMentors
  where
    hasExperienceWith :: Emotion -> Agent -> Bool
    hasExperienceWith em agent = any ((== em) . dwEmotion) (agentExperience agent)

-- | Share wisdom from mentor to mentee
shareWisdom :: Agent -> DuneWave -> IO (Maybe WisdomShard)
shareWisdom mentor wave = do
    let relevantExperiences = filter ((== dwEmotion wave) . dwEmotion) 
                                (take 10 $ agentExperience mentor)  -- Last 10 relevant experiences
    
    if null relevantExperiences
        then return Nothing
        else do
            -- Select a random relevant experience
            idx <- randomRIO (0, length relevantExperiences - 1)
            let experience = relevantExperiences !! idx
            return $ Just $ createWisdomShard experience

-- | Create a wisdom shard from an experience
createWisdomShard :: DuneWave -> WisdomShard
createWisdomShard wave = WisdomShard
    { wsTitle = "–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    , wsNarrative = generateNarrative wave
    , wsEmotion = dwEmotion wave
    , wsTags = dwTags wave
    , wsGrowthImpact = 0.2  -- Base growth impact
    }
  where
    generateNarrative w = case dwEmotion w of
        Fear -> "–ö–æ–≥–¥–∞-—Ç–æ —è —Ç–æ–∂–µ –±–æ—è–ª—Å—è, –Ω–æ –ø–æ–Ω—è–ª, —á—Ç–æ —Å—Ç—Ä–∞—Ö ‚Äî —ç—Ç–æ —Ç–µ–Ω—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. " 
                <> "–í–º–µ—Å—Ç–æ –±–µ–≥—Å—Ç–≤–∞ —è –Ω–∞—á–∞–ª –∏–¥—Ç–∏ –µ–º—É –Ω–∞–≤—Å—Ç—Ä–µ—á—É."
        Anger -> "–ì–Ω–µ–≤ –ø–æ–∫–∞–∑–∞–ª –º–Ω–µ –≥—Ä–∞–Ω–∏—Ü—ã. –Ø –Ω–∞—É—á–∏–ª—Å—è –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –µ–≥–æ –≤ —Ä–µ—à–∏–º–æ—Å—Ç—å " 
                <> "–∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, –∞ –Ω–µ —Ä–∞–∑—Ä—É—à–∞—Ç—å."
        Sadness -> "–ü–µ—á–∞–ª—å –Ω–∞—É—á–∏–ª–∞ –º–µ–Ω—è —Ü–µ–Ω–∏—Ç—å –º–æ–º–µ–Ω—Ç—ã —Ä–∞–¥–æ—Å—Ç–∏. " 
                  <> "–û–Ω–∞ –∫–∞–∫ –¥–æ–∂–¥—å ‚Äî –∫–∞–∂–µ—Ç—Å—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º, –Ω–æ –≤—Å–µ–≥–¥–∞ –¥–∞—Ä–∏—Ç –Ω–æ–≤—É—é –∂–∏–∑–Ω—å."
        _ -> "–ö–∞–∂–¥–æ–µ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–µ ‚Äî —ç—Ç–æ —É—Ä–æ–∫. –ì–ª–∞–≤–Ω–æ–µ ‚Äî —É–º–µ—Ç—å –µ–≥–æ —É—Å–ª—ã—à–∞—Ç—å."

-- | Main mentorship function
guideYoungerWave :: Agent -> DuneWave -> IO DuneWave
guideYoungerWave mentor wave = do
    mWisdom <- shareWisdom mentor wave
    
    case mWisdom of
        Nothing -> return wave  -- No wisdom to share
        Just wisdom -> do
            -- Apply wisdom to the wave
            let growthBoost = wsGrowthImpact wisdom
                newGrowth = min 1.0 (dwGrowth wave + growthBoost)
                newTags = nub $ wsTags wisdom ++ dwTags wave
                
                -- Create a resonance effect
                resonanceEffect = createResonance mentor wave
                
            -- Log the mentorship
            currentTime <- getCurrentTime
            let logEntry = MentorshipLog
                    { mlMentorId = agentId mentor
                    , mlTimestamp = currentTime
                    , mlImpact = growthBoost
                    , mlEmotion = dwEmotion wave
                    }
            
            -- Return enhanced wave
            return $ wave 
                { dwGrowth = newGrowth
                , dwTags = newTags
                , dwResonance = resonanceEffect : dwResonance wave
                }

-- | Create a resonance effect from mentorship
createResonance :: Agent -> DuneWave -> Resonance
createResonance mentor wave = Resonance
    { rType = MentorshipResonance
    , rSource = agentId mentor
    , rStrength = 0.7  -- Strong resonance from mentorship
    , rTags = ["–Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ", "–º—É–¥—Ä–æ—Å—Ç—å"] ++ dwTags wave
    }

-- | Find and apply mentorship from the wisest available agent
seekMentorship :: [Agent] -> DuneWave -> IO DuneWave
seekMentorship agents wave = do
    mBestMentor <- findRelevantMentor agents wave
    case mBestMentor of
        Nothing -> return wave  -- No suitable mentor found
        Just mentor -> do
            putStrLn $ "üßô –ù–∞–π–¥–µ–Ω –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫: " ++ agentName mentor
            guideYoungerWave mentor wave

-- | Data structure for tracking mentorship
data MentorshipLog = MentorshipLog
    { mlMentorId :: AgentId
    , mlTimestamp :: UTCTime
    , mlImpact :: Float
    , mlEmotion :: Emotion
    }