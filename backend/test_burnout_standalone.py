"""
üöÄüõ°Ô∏è BurnoutGuard Standalone Test ‚Äî –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è

–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ BurnoutGuard –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:
- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –≤—ã–≥–æ—Ä–∞–Ω–∏—è
- –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∫–æ—Ä–∏–Ω–≥–∞
- –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
"""

import asyncio
from datetime import datetime, timedelta
from enum import Enum
from dataclasses import dataclass
from typing import List, Dict, Any


# –ü—Ä–æ—Å—Ç—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
class EmotionalModeType(Enum):
    CALM = "calm"
    FOCUS = "focus"
    STRESS = "stress"
    JOY = "joy"
    CONTEMPLATION = "contemplation"
    NEUTRAL = "neutral"


class BurnoutRiskLevel(Enum):
    VERY_LOW = "very_low"
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


@dataclass
class EmotionalData:
    """–ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    mode: EmotionalModeType
    valence: float      # -1.0 to 1.0
    arousal: float      # 0.0 to 1.0
    intensity: float    # 0.0 to 1.0
    timestamp: datetime
    confidence: float = 0.8


class BurnoutDetector:
    """–ü—Ä–æ—Å—Ç–æ–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –≤—ã–≥–æ—Ä–∞–Ω–∏—è."""
    
    def __init__(self):
        # –í–µ—Å–∞ —Ä–∏—Å–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
        self.mode_risk_weights = {
            EmotionalModeType.STRESS: 0.9,
            EmotionalModeType.CONTEMPLATION: 0.4,
            EmotionalModeType.FOCUS: 0.3,
            EmotionalModeType.NEUTRAL: 0.25,
            EmotionalModeType.CALM: 0.1,
            EmotionalModeType.JOY: 0.05
        }
    
    def analyze_burnout_risk(self, emotional_history: List[EmotionalData]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∏—Å–∫ –≤—ã–≥–æ—Ä–∞–Ω–∏—è."""
        
        if not emotional_history:
            return {"risk_score": 0.0, "risk_level": BurnoutRiskLevel.LOW, "indicators": []}
        
        # 1. –ë–∞–∑–æ–≤—ã–π —Ä–∏—Å–∫ –æ—Ç —Ä–µ–∂–∏–º–æ–≤
        mode_risk = 0.0
        mode_counts = {}
        
        for data in emotional_history:
            weight = self.mode_risk_weights.get(data.mode, 0.25)
            mode_risk += weight * data.intensity
            mode_counts[data.mode] = mode_counts.get(data.mode, 0) + 1
        
        mode_risk /= len(emotional_history)
        
        # 2. –†–∏—Å–∫ –æ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        pattern_risk = self._analyze_patterns(emotional_history)
        
        # 3. –†–∏—Å–∫ –æ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        valence_risk = self._analyze_valence_risk(emotional_history)
        
        # 4. –ò—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä
        total_risk = (mode_risk * 0.5 + pattern_risk * 0.3 + valence_risk * 0.2)
        total_risk = max(0.0, min(1.0, total_risk))
        
        # 5. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
        if total_risk <= 0.2:
            risk_level = BurnoutRiskLevel.VERY_LOW
        elif total_risk <= 0.4:
            risk_level = BurnoutRiskLevel.LOW
        elif total_risk <= 0.6:
            risk_level = BurnoutRiskLevel.MEDIUM
        elif total_risk <= 0.8:
            risk_level = BurnoutRiskLevel.HIGH
        else:
            risk_level = BurnoutRiskLevel.CRITICAL
        
        # 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        indicators = self._generate_indicators(emotional_history, mode_counts, total_risk)
        
        return {
            "risk_score": total_risk,
            "risk_level": risk_level,
            "indicators": indicators,
            "mode_breakdown": mode_counts,
            "dominant_mode": max(mode_counts, key=mode_counts.get) if mode_counts else EmotionalModeType.NEUTRAL
        }
    
    def _analyze_patterns(self, history: List[EmotionalData]) -> float:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã."""
        
        if len(history) < 3:
            return 0.0
        
        risk = 0.0
        modes = [data.mode for data in history]
        
        # –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å (3+ —Å—Ç—Ä–µ—Å—Å–∞ –ø–æ–¥—Ä—è–¥)
        stress_streak = 0
        max_stress_streak = 0
        
        for mode in modes:
            if mode == EmotionalModeType.STRESS:
                stress_streak += 1
                max_stress_streak = max(max_stress_streak, stress_streak)
            else:
                stress_streak = 0
        
        if max_stress_streak >= 3:
            risk += 0.6
        elif max_stress_streak >= 2:
            risk += 0.3
        
        # –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π
        joy_count = sum(1 for mode in modes if mode == EmotionalModeType.JOY)
        if len(modes) > 5 and joy_count == 0:
            risk += 0.4
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏—Ç—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (–º–Ω–æ–≥–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö)
        neutral_ratio = sum(1 for mode in modes if mode == EmotionalModeType.NEUTRAL) / len(modes)
        if neutral_ratio > 0.6:
            risk += 0.3
        
        return min(1.0, risk)
    
    def _analyze_valence_risk(self, history: List[EmotionalData]) -> float:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∏—Å–∫ –æ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏."""
        
        if not history:
            return 0.0
        
        # –°—Ä–µ–¥–Ω—è—è –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å
        avg_valence = sum(data.valence for data in history) / len(history)
        
        # –ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å = —Ä–∏—Å–∫
        if avg_valence < -0.5:
            return 0.8
        elif avg_valence < -0.2:
            return 0.5
        elif avg_valence < 0:
            return 0.3
        else:
            return max(0.0, -avg_valence * 0.5)  # –Ω–µ–±–æ–ª—å—à–æ–π —Ä–∏—Å–∫ –¥–∞–∂–µ –ø—Ä–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    
    def _generate_indicators(self, history: List[EmotionalData], mode_counts: Dict, risk_score: float) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞."""
        
        indicators = []
        total_count = len(history)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ —Ä–µ–∂–∏–º–∞–º
        if mode_counts.get(EmotionalModeType.STRESS, 0) / total_count > 0.3:
            indicators.append("–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞")
        
        if mode_counts.get(EmotionalModeType.JOY, 0) / total_count < 0.1:
            indicators.append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π")
        
        if mode_counts.get(EmotionalModeType.FOCUS, 0) / total_count > 0.5:
            indicators.append("–ß—Ä–µ–∑–º–µ—Ä–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ä–∞–±–æ—Ç–µ")
        
        if mode_counts.get(EmotionalModeType.NEUTRAL, 0) / total_count > 0.4:
            indicators.append("–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏—Ç—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å")
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        avg_valence = sum(data.valence for data in history) / len(history) if history else 0
        if avg_valence < -0.3:
            indicators.append("–ü—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π")
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
        avg_intensity = sum(data.intensity for data in history) / len(history) if history else 0
        if avg_intensity < 0.3:
            indicators.append("–ù–∏–∑–∫–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
        
        return indicators if indicators else ["–ë–∞–∑–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ"]


class RecommendationGenerator:
    """–ü—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
    
    def __init__(self):
        self.recommendations = {
            BurnoutRiskLevel.CRITICAL: [
                "üö® –ù–ï–ú–ï–î–õ–ï–ù–ù–û —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ 15-20 –º–∏–Ω—É—Ç",
                "üíß –í—ã–ø–µ–π—Ç–µ –≤–æ–¥—ã –∏ —Å–¥–µ–ª–∞–π—Ç–µ –≥–ª—É–±–æ–∫–∏–µ –≤–¥–æ—Ö–∏",
                "üö∂‚Äç‚ôÇÔ∏è –í—ã–π–¥–∏—Ç–µ –Ω–∞ —Å–≤–µ–∂–∏–π –≤–æ–∑–¥—É—Ö",
                "üìû –ü–æ–≥–æ–≤–æ—Ä–∏—Ç–µ —Å –∫–æ–ª–ª–µ–≥–æ–π –∏–ª–∏ –±–ª–∏–∑–∫–∏–º",
                "‚è∞ –û—Ç–ª–æ–∂–∏—Ç–µ –≤—Å–µ –Ω–µ—Å—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏"
            ],
            BurnoutRiskLevel.HIGH: [
                "‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –º–∏–Ω—É—Ç",
                "üéØ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ –∑–∞ —Ä–∞–∑",
                "üì± –û—Ç–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ 1 —á–∞—Å",
                "üßò‚Äç‚ôÄÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ 5-–º–∏–Ω—É—Ç–Ω—É—é –º–µ–¥–∏—Ç–∞—Ü–∏—é",
                "üìù –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
            ],
            BurnoutRiskLevel.MEDIUM: [
                "‚öñÔ∏è –û—Ü–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â—É—é –Ω–∞–≥—Ä—É–∑–∫—É",
                "‚òï –°–¥–µ–ª–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ —á–∞–π/–∫–æ—Ñ–µ",
                "üìù –ó–∞–ø–∏—à–∏—Ç–µ 3 –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã",
                "üí™ –°–¥–µ–ª–∞–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
                "üéµ –ü–æ—Å–ª—É—à–∞–π—Ç–µ –ª—é–±–∏–º—É—é –º—É–∑—ã–∫—É"
            ],
            BurnoutRiskLevel.LOW: [
                "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
                "üìÖ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã",
                "üéØ –°—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–µ–ª–∏",
                "üå± –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏",
                "ü§ù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏"
            ],
            BurnoutRiskLevel.VERY_LOW: [
                "üéâ –û—Ç–ª–∏—á–Ω–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ!",
                "üí° –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –ø–æ–∑–∏—Ç–∏–≤–æ–º —Å –∫–æ–ª–ª–µ–≥–∞–º–∏",
                "üìö –í—Ä–µ–º—è –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ",
                "üé® –ó–∞–π–º–∏—Ç–µ—Å—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏",
                "üèÜ –ü–æ–º–æ–≥–∏—Ç–µ –¥—Ä—É–≥–∏–º –≤ –∫–æ–º–∞–Ω–¥–µ"
            ]
        }
    
    def get_recommendations(self, risk_level: BurnoutRiskLevel, indicators: List[str]) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞."""
        
        base_recommendations = self.recommendations.get(risk_level, [])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º
        specific_recs = []
        
        for indicator in indicators:
            if "—Å—Ç—Ä–µ—Å—Å" in indicator.lower():
                specific_recs.append("üßò‚Äç‚ôÄÔ∏è –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Å–Ω–∏–∂–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–∞")
            elif "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π" in indicator.lower():
                specific_recs.append("üòä –ù–∞–π–¥–∏—Ç–µ —á—Ç–æ-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–µ –≤ —Ç–µ–∫—É—â–µ–º –¥–Ω–µ")
            elif "–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è" in indicator.lower():
                specific_recs.append("‚è±Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É Pomodoro (25 –º–∏–Ω —Ä–∞–±–æ—Ç—ã + 5 –º–∏–Ω –ø–µ—Ä–µ—Ä—ã–≤)")
            elif "–ø—Ä–∏—Ç—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å" in indicator.lower():
                specific_recs.append("üé≠ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è")
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        all_recs = base_recommendations + specific_recs
        return all_recs[:5]  # –º–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π


def format_risk_score(score: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–∫–æ—Ä —Ä–∏—Å–∫–∞."""
    percentage = int(score * 100)
    
    if score <= 0.2:
        return f"üü¢ {percentage}% - –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫"
    elif score <= 0.4:
        return f"üü° {percentage}% - –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"
    elif score <= 0.6:
        return f"üü† {percentage}% - –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫"
    elif score <= 0.8:
        return f"üî¥ {percentage}% - –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
    else:
        return f"üö® {percentage}% - –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô —Ä–∏—Å–∫"


def create_test_scenarios() -> List[Dict[str, Any]]:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏."""
    
    scenarios = []
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å
    stress_data = []
    base_time = datetime.now()
    for i in range(5):
        stress_data.append(EmotionalData(
            mode=EmotionalModeType.STRESS,
            valence=-0.7,
            arousal=0.8,
            intensity=0.9,
            timestamp=base_time - timedelta(hours=i)
        ))
    
    scenarios.append({
        "name": "–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å",
        "data": stress_data,
        "expected_risk": "high"
    })
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ó–¥–æ—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    healthy_data = []
    modes = [EmotionalModeType.CALM, EmotionalModeType.JOY, EmotionalModeType.FOCUS, EmotionalModeType.CALM, EmotionalModeType.JOY]
    valences = [0.3, 0.7, 0.1, 0.4, 0.6]
    
    for i, (mode, valence) in enumerate(zip(modes, valences)):
        healthy_data.append(EmotionalData(
            mode=mode,
            valence=valence,
            arousal=0.5,
            intensity=0.7,
            timestamp=base_time - timedelta(hours=i)
        ))
    
    scenarios.append({
        "name": "–ó–¥–æ—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
        "data": healthy_data,
        "expected_risk": "low"
    })
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞
    overwork_data = []
    for i in range(6):
        overwork_data.append(EmotionalData(
            mode=EmotionalModeType.FOCUS,
            valence=-0.1,
            arousal=0.7,
            intensity=0.8,
            timestamp=base_time - timedelta(hours=i)
        ))
    
    scenarios.append({
        "name": "–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ (–¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å)",
        "data": overwork_data,
        "expected_risk": "medium"
    })
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 4: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏—Ç—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
    neutral_data = []
    for i in range(7):
        neutral_data.append(EmotionalData(
            mode=EmotionalModeType.NEUTRAL,
            valence=0.0,
            arousal=0.3,
            intensity=0.2,
            timestamp=base_time - timedelta(hours=i)
        ))
    
    scenarios.append({
        "name": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏—Ç—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å",
        "data": neutral_data,
        "expected_risk": "medium"
    })
    
    return scenarios


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    print("üöÄüõ°Ô∏è BurnoutGuard - AI –∑–∞—â–∏—Ç–∞ –æ—Ç –≤—ã–≥–æ—Ä–∞–Ω–∏—è")
    print("–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    detector = BurnoutDetector()
    recommender = RecommendationGenerator()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    scenarios = create_test_scenarios()
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ –≤—ã–≥–æ—Ä–∞–Ω–∏—è:")
    print("-" * 40)
    
    for scenario in scenarios:
        print(f"\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario['name']}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∏—Å–∫
        result = detector.analyze_burnout_risk(scenario['data'])
        
        print(f"   –†–∏—Å–∫: {format_risk_score(result['risk_score'])}")
        print(f"   –£—Ä–æ–≤–µ–Ω—å: {result['risk_level'].value}")
        print(f"   –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º: {result['dominant_mode'].value}")
        
        print(f"   –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:")
        for indicator in result['indicators']:
            print(f"     ‚Ä¢ {indicator}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = recommender.get_recommendations(
            result['risk_level'], 
            result['indicators']
        )
        
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for i, rec in enumerate(recommendations[:3], 1):
            print(f"     {i}. {rec}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
        expected = scenario['expected_risk']
        actual_score = result['risk_score']
        
        if expected == "high" and actual_score > 0.6:
            print("   ‚úÖ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        elif expected == "low" and actual_score < 0.4:
            print("   ‚úÖ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        elif expected == "medium" and 0.4 <= actual_score <= 0.6:
            print("   ‚úÖ –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        else:
            print(f"   ‚ö†Ô∏è –û–∂–∏–¥–∞–ª—Å—è {expected} —Ä–∏—Å–∫, –ø–æ–ª—É—á–µ–Ω —Å–∫–æ—Ä {actual_score:.2f}")
    
    print("\n" + "=" * 60)
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è BurnoutGuard –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüí° –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("   üîç –î–µ—Ç–µ–∫—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤—ã–≥–æ—Ä–∞–Ω–∏—è")
    print("   üìä –ú–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞")
    print("   üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    print("   ‚ö° Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–≤ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏)")
    print("   üë• –ö–æ–º–∞–Ω–¥–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–≤ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏)")
    
    print("\nüöÄ –ì–æ—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–æ–±–∏–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º!")


if __name__ == "__main__":
    asyncio.run(main())