"""
üåø‚ú® Emotime Emotional Modes ‚Äî —Ä–µ–∂–∏–º—ã —ç–º–æ—Ü–∏–π

–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–æ –≤—Ä–µ–º–µ–Ω–∏:
- Calm: —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ —É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ
- Focus: –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å  
- Stress: –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ
- Joy: —Ä–∞–¥–æ—Å—Ç—å –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ
- Contemplation: —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è

"–ö–∞–∂–¥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî —ç—Ç–æ –º—É–∑—ã–∫–∞ –¥—É—à–∏, –∏–≥—Ä–∞—é—â–∞—è –≤ —Å–≤–æ–µ–º —Ä–∏—Ç–º–µ"
"""

import numpy as np
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Any
from enum import Enum

from .timeseries import EmotionalPoint, EmotionalTimeSeries


class ModeType(Enum):
    """–¢–∏–ø—ã —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤."""
    CALM = "calm"
    FOCUS = "focus" 
    STRESS = "stress"
    JOY = "joy"
    CONTEMPLATION = "contemplation"
    NEUTRAL = "neutral"


@dataclass
class EmotionalMode:
    """–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º."""
    name: str
    type: ModeType
    intensity: float        # 0.0 to 1.0 - –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∂–∏–º–∞
    confidence: float       # 0.0 to 1.0 - —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    description: str
    duration: int = 1       # —Å–∫–æ–ª—å–∫–æ —Ü–∏–∫–ª–æ–≤ –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ
    
    # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ä–µ–∂–∏–º–∞
    valence_range: tuple = None     # (min, max) –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å
    arousal_range: tuple = None     # (min, max) –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ
    tempo_range: tuple = None       # (min, max) —Ç–µ–º–ø


class EmotionalModes:
    """
    –°–∏—Å—Ç–µ–º–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é HMM (Hidden Markov Model) –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤.
    """
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ —Å –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    MODE_DEFINITIONS = {
        ModeType.CALM: {
            "name": "Calm",
            "description": "State of peace and balance",
            "valence_range": (-0.2, 0.4),   # —Å–ª–µ–≥–∫–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ
            "arousal_range": (0.0, 0.3),    # –Ω–∏–∑–∫–æ–µ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ
            "tempo_range": (0.0, 0.4),      # –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ç–µ–º–ø
            "emoji": "üßò‚Äç‚ôÄÔ∏è"
        },
        ModeType.FOCUS: {
            "name": "Focus", 
            "description": "State of deep concentration",
            "valence_range": (-0.1, 0.3),   # –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ
            "arousal_range": (0.4, 0.7),    # —Å—Ä–µ–¥–Ω–µ–µ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ
            "tempo_range": (0.3, 0.7),      # —É–º–µ—Ä–µ–Ω–Ω—ã–π —Ç–µ–º–ø
            "emoji": "üéØ"
        },
        ModeType.STRESS: {
            "name": "Stress",
            "description": "State of stress and anxiety",
            "valence_range": (-0.8, -0.1),  # –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ
            "arousal_range": (0.6, 1.0),    # –≤—ã—Å–æ–∫–æ–µ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ
            "tempo_range": (0.5, 1.0),      # –±—ã—Å—Ç—Ä—ã–π —Ç–µ–º–ø
            "emoji": "‚ö°"
        },
        ModeType.JOY: {
            "name": "Joy",
            "description": "State of happiness and inspiration",
            "valence_range": (0.4, 1.0),    # –≤—ã—Å–æ–∫–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ
            "arousal_range": (0.3, 0.8),    # —Å—Ä–µ–¥–Ω–µ–µ-–≤—ã—Å–æ–∫–æ–µ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ
            "tempo_range": (0.2, 0.8),      # –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è
            "emoji": "‚ú®"
        },
        ModeType.CONTEMPLATION: {
            "name": "Contemplation", 
            "description": "State of deep reflection",
            "valence_range": (-0.3, 0.2),   # —Å–ª–µ–≥–∫–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ
            "arousal_range": (0.2, 0.5),    # –Ω–∏–∑–∫–æ–µ-—Å—Ä–µ–¥–Ω–µ–µ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ
            "tempo_range": (0.0, 0.3),      # –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ç–µ–º–ø
            "emoji": "üí≠"
        },
        ModeType.NEUTRAL: {
            "name": "Neutral",
            "description": "Basic neutral state",
            "valence_range": (-0.2, 0.2),   # –æ–∫–æ–ª–æ –Ω—É–ª—è
            "arousal_range": (0.3, 0.6),    # —Å—Ä–µ–¥–Ω–µ–µ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ
            "tempo_range": (0.3, 0.6),      # —Å—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø
            "emoji": "üòê"
        }
    }
    
    def __init__(self, stability_threshold: float = 0.8):
        self.stability_threshold = stability_threshold
        self.current_mode: Optional[EmotionalMode] = None
        self.mode_history: List[EmotionalMode] = []
        
        # –ü–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è HMM)
        self.transition_probabilities = self._initialize_transitions()
    
    def _initialize_transitions(self) -> Dict[ModeType, Dict[ModeType, float]]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ç—Ä–∏—Ü—É –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π."""
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥—è—Ç –¥—Ä—É–≥ –≤ –¥—Ä—É–≥–∞ —á–∞—â–µ
        transitions = {
            ModeType.CALM: {
                ModeType.CALM: 0.7,          # —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                ModeType.FOCUS: 0.15,        # –∏–∑ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è –≤ —Ñ–æ–∫—É—Å
                ModeType.CONTEMPLATION: 0.1,  # –≤ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
                ModeType.NEUTRAL: 0.05
            },
            ModeType.FOCUS: {
                ModeType.FOCUS: 0.6,         # —Ñ–æ–∫—É—Å –¥–µ—Ä–∂–∏—Ç—Å—è
                ModeType.CALM: 0.2,          # —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ñ–æ–∫—É—Å–∞
                ModeType.STRESS: 0.1,        # –ø–µ—Ä–µ–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ
                ModeType.JOY: 0.05,          # —Ä–∞–¥–æ—Å—Ç—å –æ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                ModeType.NEUTRAL: 0.05
            },
            ModeType.STRESS: {
                ModeType.STRESS: 0.4,        # —Å—Ç—Ä–µ—Å—Å –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è
                ModeType.CALM: 0.25,         # —É—Å–ø–æ–∫–æ–µ–Ω–∏–µ
                ModeType.FOCUS: 0.15,        # –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∑–∞–¥–∞—á—É
                ModeType.CONTEMPLATION: 0.1, # –æ–±–¥—É–º—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
                ModeType.NEUTRAL: 0.1
            },
            ModeType.JOY: {
                ModeType.JOY: 0.5,           # —Ä–∞–¥–æ—Å—Ç—å –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è
                ModeType.CALM: 0.3,          # —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ
                ModeType.FOCUS: 0.1,         # —ç–Ω–µ—Ä–≥–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã
                ModeType.NEUTRAL: 0.1
            },
            ModeType.CONTEMPLATION: {
                ModeType.CONTEMPLATION: 0.6,  # —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è —É–≥–ª—É–±–ª—è—é—Ç—Å—è
                ModeType.CALM: 0.2,          # –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø–æ–∫–æ–π
                ModeType.FOCUS: 0.1,         # –ø–æ–Ω–∏–º–∞–Ω–∏–µ –≤–µ–¥–µ—Ç –∫ –¥–µ–π—Å—Ç–≤–∏—é
                ModeType.NEUTRAL: 0.1
            },
            ModeType.NEUTRAL: {
                ModeType.NEUTRAL: 0.4,       # –±–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                ModeType.CALM: 0.2,
                ModeType.FOCUS: 0.15,
                ModeType.CONTEMPLATION: 0.1,
                ModeType.STRESS: 0.1,
                ModeType.JOY: 0.05
            }
        }
        
        return transitions
    
    async def classify_mode(
        self, 
        point: EmotionalPoint, 
        timeseries: EmotionalTimeSeries
    ) -> EmotionalMode:
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏.
        
        –£—á–∏—Ç—ã–≤–∞–µ—Ç:
        1. –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏/–≤–æ–∑–±—É–∂–¥–µ–Ω–∏—è/—Ç–µ–º–ø–∞
        2. –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∂–∏–º–æ–≤ (HMM transitions)
        3. –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        """
        
        # 1. –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞–∂–¥–æ–º—É —Ä–µ–∂–∏–º—É
        mode_scores = {}
        for mode_type in ModeType:
            score = self._calculate_mode_score(point, mode_type)
            mode_scores[mode_type] = score
            
        # 2. –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è
        if self.current_mode:
            adjusted_scores = self._apply_transition_probabilities(mode_scores)
        else:
            adjusted_scores = mode_scores
            
        # 3. –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å–∫–æ—Ä–æ–º
        best_mode_type = max(adjusted_scores, key=adjusted_scores.get)
        confidence = adjusted_scores[best_mode_type]
        
        # 4. –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–µ–∂–∏–º–∞
        mode_def = self.MODE_DEFINITIONS[best_mode_type]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∂–∏–º–∞
        intensity = self._calculate_intensity(point, best_mode_type)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        duration = 1
        if (self.current_mode and 
            self.current_mode.type == best_mode_type):
            duration = self.current_mode.duration + 1
            
        new_mode = EmotionalMode(
            name=mode_def["name"],
            type=best_mode_type,
            intensity=intensity,
            confidence=confidence,
            description=mode_def["description"],
            duration=duration,
            valence_range=mode_def["valence_range"],
            arousal_range=mode_def["arousal_range"], 
            tempo_range=mode_def["tempo_range"]
        )
        
        # 5. –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        self.current_mode = new_mode
        self.mode_history.append(new_mode)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.mode_history) > 100:
            self.mode_history = self.mode_history[-50:]
            
        return new_mode
    
    def _calculate_mode_score(
        self, 
        point: EmotionalPoint, 
        mode_type: ModeType
    ) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ—á–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —Ä–µ–∂–∏–º—É."""
        
        mode_def = self.MODE_DEFINITIONS[mode_type]
        
        valence_range = mode_def["valence_range"]
        arousal_range = mode_def["arousal_range"] 
        tempo_range = mode_def["tempo_range"]
        
        # –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        valence_score = self._membership_function(
            point.valence, valence_range[0], valence_range[1]
        )
        arousal_score = self._membership_function(
            point.arousal, arousal_range[0], arousal_range[1]
        )
        tempo_score = self._membership_function(
            point.tempo, tempo_range[0], tempo_range[1]
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        intensity_factor = 1.0
        if mode_type in [ModeType.JOY, ModeType.STRESS]:
            # –†–∞–¥–æ—Å—Ç—å –∏ —Å—Ç—Ä–µ—Å—Å —Ç—Ä–µ–±—É—é—Ç –≤—ã—Å–æ–∫–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
            intensity_factor = point.intensity
        elif mode_type == ModeType.CALM:
            # –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ —Ç—Ä–µ–±—É–µ—Ç –Ω–∏–∑–∫–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
            intensity_factor = 1.0 - point.intensity
            
        # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞
        total_score = (
            valence_score * 0.4 +
            arousal_score * 0.35 +
            tempo_score * 0.15 +
            intensity_factor * 0.1
        )
        
        return total_score
    
    def _membership_function(self, value: float, range_min: float, range_max: float) -> float:
        """
        –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ (membership function) –¥–ª—è –Ω–µ—á–µ—Ç–∫–æ–π –ª–æ–≥–∏–∫–∏.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 1 - –Ω–∞—Å–∫–æ–ª—å–∫–æ value –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥–∏–∞–ø–∞–∑–æ–Ω—É.
        """
        
        if range_min <= value <= range_max:
            return 1.0
            
        # –ü–ª–∞–≤–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –∑–∞ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        range_width = range_max - range_min
        tolerance = range_width * 0.5  # –¥–æ–ø—É—Å–∫ 50% –æ—Ç —à–∏—Ä–∏–Ω—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        
        if value < range_min:
            distance = range_min - value
            return max(0.0, 1.0 - distance / tolerance)
        else:  # value > range_max
            distance = value - range_max  
            return max(0.0, 1.0 - distance / tolerance)
    
    def _apply_transition_probabilities(self, mode_scores: Dict[ModeType, float]) -> Dict[ModeType, float]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ HMM."""
        
        if not self.current_mode:
            return mode_scores
            
        current_type = self.current_mode.type
        transitions = self.transition_probabilities.get(current_type, {})
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        adjusted_scores = {}
        for mode_type, score in mode_scores.items():
            transition_prob = transitions.get(mode_type, 0.1)  # –±–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–∫–æ—Ä —Å –ø–µ—Ä–µ—Ö–æ–¥–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
            adjusted_score = score * 0.7 + transition_prob * 0.3
            adjusted_scores[mode_type] = adjusted_score
            
        return adjusted_scores
    
    def _calculate_intensity(self, point: EmotionalPoint, mode_type: ModeType) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∂–∏–º–∞."""
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ —Ç–æ—á–∫–∏
        base_intensity = point.intensity
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
        if mode_type == ModeType.STRESS:
            # –°—Ç—Ä–µ—Å—Å —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è –≤—ã—Å–æ–∫–∏–º –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ–º
            return min(base_intensity + point.arousal * 0.3, 1.0)
        elif mode_type == ModeType.JOY:
            # –†–∞–¥–æ—Å—Ç—å —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å—é
            return min(base_intensity + max(0, point.valence) * 0.3, 1.0)
        elif mode_type == ModeType.CALM:
            # –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏—é
            return max(base_intensity - point.arousal * 0.2, 0.0)
        elif mode_type == ModeType.FOCUS:
            # –§–æ–∫—É—Å —Å–≤—è–∑–∞–Ω —Å–æ —Å—Ä–µ–¥–Ω–∏–º –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ–º
            optimal_arousal = 0.55
            arousal_distance = abs(point.arousal - optimal_arousal)
            focus_bonus = max(0, 0.3 - arousal_distance)
            return min(base_intensity + focus_bonus, 1.0)
            
        return base_intensity
    
    def get_mode_statistics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–∂–∏–º–∞–º."""
        
        if not self.mode_history:
            return {"status": "no_data"}
            
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤ –∫–∞–∂–¥–æ–º —Ä–µ–∂–∏–º–µ
        mode_durations = {}
        for mode in self.mode_history:
            mode_name = mode.name
            if mode_name not in mode_durations:
                mode_durations[mode_name] = 0
            mode_durations[mode_name] += 1
            
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        total_points = len(self.mode_history)
        mode_percentages = {
            mode: (duration / total_points) * 100
            for mode, duration in mode_durations.items()
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏
        transitions = {}
        for i in range(1, len(self.mode_history)):
            prev_mode = self.mode_history[i-1].name
            curr_mode = self.mode_history[i].name
            
            transition_key = f"{prev_mode} ‚Üí {curr_mode}"
            if transition_key not in transitions:
                transitions[transition_key] = 0
            transitions[transition_key] += 1
            
        # –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
        frequent_transitions = sorted(
            transitions.items(), 
            key=lambda x: x[1], 
            reverse=True
        )[:5]
        
        return {
            "total_points": total_points,
            "current_mode": {
                "name": self.current_mode.name,
                "type": self.current_mode.type.value,
                "intensity": self.current_mode.intensity,
                "duration": self.current_mode.duration,
                "confidence": self.current_mode.confidence
            } if self.current_mode else None,
            "mode_distribution": mode_percentages,
            "mode_durations": mode_durations,
            "frequent_transitions": [
                {"transition": trans, "count": count}
                for trans, count in frequent_transitions
            ],
            "stability": self._calculate_mode_stability()
        }
    
    def _calculate_mode_stability(self) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤."""
        
        if len(self.mode_history) < 5:
            return 0.5
            
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π —Ä–µ–∂–∏–º–æ–≤
        switches = 0
        for i in range(1, len(self.mode_history)):
            if self.mode_history[i].type != self.mode_history[i-1].type:
                switches += 1
                
        # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å = 1 - (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è / –≤–æ–∑–º–æ–∂–Ω—ã–µ_–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è)
        possible_switches = len(self.mode_history) - 1
        stability = 1.0 - (switches / possible_switches)
        
        return stability
    
    def get_mode_insights(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Å–∞–π—Ç—ã –æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤."""
        
        insights = []
        
        if not self.mode_history or len(self.mode_history) < 10:
            return ["–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"]
            
        stats = self.get_mode_statistics()
        
        # –ê–Ω–∞–ª–∏–∑ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —Ä–µ–∂–∏–º–æ–≤
        mode_dist = stats["mode_distribution"]
        dominant_mode = max(mode_dist, key=mode_dist.get)
        dominant_percentage = mode_dist[dominant_mode]
        
        if dominant_percentage > 60:
            insights.append(f"–ü—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç —Ä–µ–∂–∏–º '{dominant_mode}' ({dominant_percentage:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        stability = stats["stability"]
        if stability > 0.8:
            insights.append("–í—ã—Å–æ–∫–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å")
        elif stability < 0.4:
            insights.append("–ß–∞—Å—Ç—ã–µ —Å–º–µ–Ω—ã —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤")
            
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
        if self.current_mode and self.current_mode.duration > 5:
            insights.append(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ '{self.current_mode.name}'")
            
        # –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
        recent_intensities = [mode.intensity for mode in self.mode_history[-10:]]
        avg_intensity = sum(recent_intensities) / len(recent_intensities)
        
        if avg_intensity > 0.8:
            insights.append("–í—ã—Å–æ–∫–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å")
        elif avg_intensity < 0.3:
            insights.append("–ù–∏–∑–∫–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
            
        return insights if insights else ["–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã"]